{"meta":{"title":"Zen的小站","subtitle":"小舟从此逝，江海寄余生","description":"大学 软硬件 nerf 忆阻器 电赛光赛 python","author":"Zen","url":"https://zennnnnnnnnnnn.js.cool","root":"/"},"pages":[{"title":"","date":"2022-09-20T15:11:34.611Z","updated":"2022-09-20T06:59:33.571Z","comments":true,"path":"baidu_verify_code-ZFSCabM1PJ.html","permalink":"https://zennnnnnnnnnnn.js.cool/baidu_verify_code-ZFSCabM1PJ.html","excerpt":"","text":"d3ee477da745ca21302227bd212b381a"},{"title":"mylibrary","date":"2022-10-21T10:37:19.000Z","updated":"2022-10-31T15:31:14.966Z","comments":false,"path":"mylibrary/index.html","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/index.html","excerpt":"","text":"inte 软件 硬件 待定 待定 快捷键和常用指令 课内知识 深度学习 积 经验积累 Hover me"},{"title":"","date":"2022-09-20T15:11:34.612Z","updated":"2022-09-20T12:36:01.776Z","comments":true,"path":"google41a28d5f2878fa02.html","permalink":"https://zennnnnnnnnnnn.js.cool/google41a28d5f2878fa02.html","excerpt":"","text":"google-site-verification: google41a28d5f2878fa02.html"},{"title":"about","date":"2022-09-13T07:16:19.000Z","updated":"2022-10-15T13:24:32.331Z","comments":true,"path":"about/index.html","permalink":"https://zennnnnnnnnnnn.js.cool/about/index.html","excerpt":"","text":"天晴无风只是冷，唯有今冬见此景。 闲看今冬此景者，小小烦乱，慢慢寒安。 ？？？？，血刃名刀相接短。 鳞云彩列，深空暗流五色泉。 枯木遮眼，黄与红云，白与蓝天。 正忘却狂喜如何，轻摇乡灯昏笔辍。 今再忆欢雪暖年，阡陌城容膝知所。 鹏腾气，沉收扶摇，御上两仞。 乱世毒瘾，落天星火。 。。。 黄灯月序，暮至无色。 盛食之遗，土薯尽啧。 苦香楼影，浅冬泥憩，蓝水卧歌。 1刚考完试，自我感觉不是很好。食堂有汉堡，平时不吃。一般吃来是当作大餐吃的。"},{"title":"","date":"2022-10-21T10:21:33.255Z","updated":"2022-10-21T10:21:33.255Z","comments":true,"path":"mypage/index.html","permalink":"https://zennnnnnnnnnnn.js.cool/mypage/index.html","excerpt":"","text":"like library learning work"},{"title":"标签","date":"2022-09-14T04:14:19.000Z","updated":"2022-09-22T04:18:04.341Z","comments":false,"path":"tags/index.html","permalink":"https://zennnnnnnnnnnn.js.cool/tags/index.html","excerpt":"","text":""},{"title":"","date":"2022-10-05T14:12:24.232Z","updated":"2022-10-05T14:12:24.232Z","comments":true,"path":"tear/index.html","permalink":"https://zennnnnnnnnnnn.js.cool/tear/index.html","excerpt":"","text":"function cleanJS(js) { js = js.replace(/location(s+)?=/mi, ''); js = js.replace(/top.location.+=('|\")/mi, ''); js = js.replace(/location.replace/mi, ''); js = js.replace(/window(s+)?\\[(s+)?(\"|')l/mi, ''); js = js.replace(/self(s+)?\\[(s+)?(\"|')loc/mi, ''); return js; } _ogEval = window.eval; window.eval = function(text) {_ogEval(cleanJS(text));}; window.open = function(){}; window.print = function(){}; window.innerWidth = window.outerWidth; // Fixes browser bug with it innerWidth reports 0 window.innerHeight = window.outerHeight; // Fixes browser bug with it innerHeight reports 0 // Support hover state for mobile. window.ontouchstart = function(){}; document.getElementById('close').onmousedown = function(e) { e.preventDefault(); document.getElementById('info').style.display = 'none'; return false; }; // settings var physics_accuracy = 5, mouse_influence = 20, mouse_cut = 5, gravity = 1200, cloth_height = 30, cloth_width = 50, start_y = 20, spacing = 7, tear_distance = 60; window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) { window.setTimeout(callback, 1000 / 60); }; var canvas, ctx, cloth, boundsx, boundsy, mouse = { down: false, button: 1, x: 0, y: 0, px: 0, py: 0 }; window.onload = function() { canvas = document.getElementById('c'); ctx = canvas.getContext('2d'); canvas.width = canvas.clientWidth; canvas.height = 376; canvas.onmousedown = function(e) { mouse.button = e.which; mouse.px = mouse.x; mouse.py = mouse.y; var rect = canvas.getBoundingClientRect(); mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, mouse.down = true; e.preventDefault(); }; canvas.onmouseup = function(e) { mouse.down = false; e.preventDefault(); }; canvas.onmousemove = function(e) { mouse.px = mouse.x; mouse.py = mouse.y; var rect = canvas.getBoundingClientRect(); mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, e.preventDefault(); }; canvas.oncontextmenu = function(e) { e.preventDefault(); }; boundsx = canvas.width - 1; boundsy = canvas.height - 1; ctx.strokeStyle = 'rgba(222,222,222,0.6)'; cloth = new Cloth(); update(); }; var Point = function(x, y) { this.x = x; this.y = y; this.px = x; this.py = y; this.vx = 0; this.vy = 0; this.pin_x = null; this.pin_y = null; this.constraints = []; }; Point.prototype.update = function(delta) { if (mouse.down) { var diff_x = this.x - mouse.x, diff_y = this.y - mouse.y, dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y); if (mouse.button == 1) { if(dist < mouse_influence) { this.px = this.x - (mouse.x - mouse.px) * 1.8; this.py = this.y - (mouse.y - mouse.py) * 1.8; } } else if (dist < mouse_cut) this.constraints = []; } this.add_force(0, gravity); delta *= delta; nx = this.x + ((this.x - this.px) * .99) + ((this.vx / 2) * delta); ny = this.y + ((this.y - this.py) * .99) + ((this.vy / 2) * delta); this.px = this.x; this.py = this.y; this.x = nx; this.y = ny; this.vy = this.vx = 0 }; Point.prototype.draw = function() { if (this.constraints.length boundsx ? this.x = 2 * boundsx - this.x : 1 > this.x && (this.x = 2 - this.x); this.y < 1 ? this.y = 2 - this.y : this.y > boundsy && (this.y = 2 * boundsy - this.y); }; Point.prototype.attach = function(point) { this.constraints.push( new Constraint(this, point) ); }; Point.prototype.remove_constraint = function(lnk) { var i = this.constraints.length; while(i--) if(this.constraints[i] == lnk) this.constraints.splice(i, 1); }; Point.prototype.add_force = function(x, y ) { this.vx += x; this.vy += y; }; Point.prototype.pin = function(pinx, piny) { this.pin_x = pinx; this.pin_y = piny; }; var Constraint = function(p1, p2) { this.p1 = p1; this.p2 = p2; this.length = spacing; }; Constraint.prototype.resolve = function() { var diff_x = this.p1.x - this.p2.x, diff_y = this.p1.y - this.p2.y, dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y), diff = (this.length - dist) / dist; if (dist > tear_distance) this.p1.remove_constraint(this); var px = diff_x * diff * 0.5; var py = diff_y * diff * 0.5; this.p1.x += px; this.p1.y += py; this.p2.x -= px; this.p2.y -= py; }; Constraint.prototype.draw = function() { ctx.moveTo(this.p1.x, this.p1.y); ctx.lineTo(this.p2.x, this.p2.y); }; var Cloth = function() { this.points = []; var start_x = canvas.width / 2 - cloth_width * spacing / 2; for(var y = 0; y"},{"title":"","date":"2022-09-29T03:55:54.746Z","updated":"2022-09-29T03:52:48.322Z","comments":true,"path":"tear/index1.html","permalink":"https://zennnnnnnnnnnn.js.cool/tear/index1.html","excerpt":"","text":"var NexT = window.NexT || {}; var CONFIG = {\"hostname\":\"zennnnnnnnnnnn.github.io\",\"root\":\"/\",\"scheme\":\"Gemini\",\"version\":\"7.8.0\",\"exturl\":false,\"sidebar\":{\"position\":\"left\",\"display\":\"post\",\"padding\":18,\"offset\":20,\"onmobile\":true},\"copycode\":{\"enable\":true,\"show_result\":true,\"style\":\"flat\"},\"back2top\":{\"enable\":true,\"sidebar\":false,\"scrollpercent\":true},\"bookmark\":{\"enable\":false,\"color\":\"#fff\",\"save\":\"auto\"},\"fancybox\":false,\"mediumzoom\":false,\"lazyload\":false,\"pangu\":false,\"comments\":{\"style\":\"tabs\",\"active\":null,\"storage\":true,\"lazyload\":false,\"nav\":null},\"algolia\":{\"hits\":{\"per_page\":10},\"labels\":{\"input_placeholder\":\"Search for Posts\",\"hits_empty\":\"We didn't find any results for the search: ${query}\",\"hits_stats\":\"${hits} results found in ${time} ms\"}},\"localsearch\":{\"enable\":true,\"trigger\":\"auto\",\"top_n_per_article\":1,\"unescape\":false,\"preload\":false},\"motion\":{\"enable\":true,\"async\":false,\"transition\":{\"post_block\":\"fadeIn\",\"post_header\":\"slideDownIn\",\"post_body\":\"slideDownIn\",\"coll_header\":\"slideLeftIn\",\"sidebar\":\"slideUpIn\"}},\"path\":\"search.xml\"}; // https://hexo.io/docs/variables.html CONFIG.page = { sidebar: \"\", isHome : false, isPost : false, lang : 'zh-CN' }; 标签 | Zen的小站 .use-motion .brand, .use-motion .menu-item, .sidebar-inner, .use-motion .post-block, .use-motion .pagination, .use-motion .comments, .use-motion .post-header, .use-motion .post-body, .use-motion .collection-header { opacity: initial; } .use-motion .site-title, .use-motion .site-subtitle { opacity: initial; top: initial; } .use-motion .logo-line-before i { left: initial; } .use-motion .logo-line-after i { right: initial; } Zen的小站 小舟从此逝，江海寄余生 主页 标签20 分类 文章18 搜索 0% document.getElementById('close').onmousedown = function(e) { e.preventDefault(); document.getElementById('info').style.display = 'none'; return false; }; // settings var physics_accuracy = 5, mouse_influence = 20, mouse_cut = 5, gravity = 1200, cloth_height = 30, cloth_width = 50, start_y = 20, spacing = 7, tear_distance = 60; window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function(callback) { window.setTimeout(callback, 1000 / 60); }; var canvas, ctx, cloth, boundsx, boundsy, mouse = { down: false, button: 1, x: 0, y: 0, px: 0, py: 0 }; window.onload = function() { canvas = document.getElementById('c'); ctx = canvas.getContext('2d'); canvas.width = canvas.clientWidth; canvas.height = 376; canvas.onmousedown = function(e) { mouse.button = e.which; mouse.px = mouse.x; mouse.py = mouse.y; var rect = canvas.getBoundingClientRect(); mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, mouse.down = true; e.preventDefault(); }; canvas.onmouseup = function(e) { mouse.down = false; e.preventDefault(); }; canvas.onmousemove = function(e) { mouse.px = mouse.x; mouse.py = mouse.y; var rect = canvas.getBoundingClientRect(); mouse.x = e.clientX - rect.left, mouse.y = e.clientY - rect.top, e.preventDefault(); }; canvas.oncontextmenu = function(e) { e.preventDefault(); }; boundsx = canvas.width - 1; boundsy = canvas.height - 1; ctx.strokeStyle = 'rgba(222,222,222,0.6)'; cloth = new Cloth(); update(); }; var Point = function(x, y) { this.x = x; this.y = y; this.px = x; this.py = y; this.vx = 0; this.vy = 0; this.pin_x = null; this.pin_y = null; this.constraints = []; }; Point.prototype.update = function(delta) { if (mouse.down) { var diff_x = this.x - mouse.x, diff_y = this.y - mouse.y, dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y); if (mouse.button == 1) { if(dist < mouse_influence) { this.px = this.x - (mouse.x - mouse.px) * 1.8; this.py = this.y - (mouse.y - mouse.py) * 1.8; } } else if (dist < mouse_cut) this.constraints = []; } this.add_force(0, gravity); delta *= delta; nx = this.x + ((this.x - this.px) * .99) + ((this.vx / 2) * delta); ny = this.y + ((this.y - this.py) * .99) + ((this.vy / 2) * delta); this.px = this.x; this.py = this.y; this.x = nx; this.y = ny; this.vy = this.vx = 0 }; Point.prototype.draw = function() { if (this.constraints.length boundsx ? this.x = 2 * boundsx - this.x : 1 > this.x && (this.x = 2 - this.x); this.y < 1 ? this.y = 2 - this.y : this.y > boundsy && (this.y = 2 * boundsy - this.y); }; Point.prototype.attach = function(point) { this.constraints.push( new Constraint(this, point) ); }; Point.prototype.remove_constraint = function(lnk) { var i = this.constraints.length; while(i--) if(this.constraints[i] == lnk) this.constraints.splice(i, 1); }; Point.prototype.add_force = function(x, y ) { this.vx += x; this.vy += y; }; Point.prototype.pin = function(pinx, piny) { this.pin_x = pinx; this.pin_y = piny; }; var Constraint = function(p1, p2) { this.p1 = p1; this.p2 = p2; this.length = spacing; }; Constraint.prototype.resolve = function() { var diff_x = this.p1.x - this.p2.x, diff_y = this.p1.y - this.p2.y, dist = Math.sqrt(diff_x * diff_x + diff_y * diff_y), diff = (this.length - dist) / dist; if (dist > tear_distance) this.p1.remove_constraint(this); var px = diff_x * diff * 0.5; var py = diff_y * diff * 0.5; this.p1.x += px; this.p1.y += py; this.p2.x -= px; this.p2.y -= py; }; Constraint.prototype.draw = function() { ctx.moveTo(this.p1.x, this.p1.y); ctx.lineTo(this.p2.x, this.p2.y); }; var Cloth = function() { this.points = []; var start_x = canvas.width / 2 - cloth_width * spacing / 2; for(var y = 0; y { var GUEST = ['nick', 'mail', 'link']; var guest = 'nick,mail,link'; guest = guest.split(',').filter(item => { return GUEST.includes(item); }); new Valine({ el : '#valine-comments', verify : false, notify : false, appId : 'PIqTHIxDEyUqiHcQHDk1NR4l-gzGzoHsz', appKey : 'K4qUGldU2VAE7oGPiiPS5OWS', placeholder: \"Just go go\", avatar : 'mm', meta : guest, pageSize : '10' || 10, visitor : false, lang : '' || 'zh-cn', path : location.pathname, recordIP : false, serverURLs : '' }); }, window.Valine); }); window.onload=function(){var a=document.createElement('script'),b=document.getElementsByTagName('script')[0];a.type='text/javascript',a.async=!0,a.src='/sw-register.js?v='+Date.now(),b.parentNode.insertBefore(a,b)};"},{"title":"","date":"2022-09-28T07:57:31.659Z","updated":"2022-09-28T07:57:31.659Z","comments":true,"path":"mypage/css/style.css","permalink":"https://zennnnnnnnnnnn.js.cool/mypage/css/style.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ h1,h2,h3,h4,h5,h6{font-size:12px;font-weight:400}div{text-align:left}a img{border:0}li,ol,ul{list-style-type:none;vertical-align:0}a{outline-style:none;color:#535353;text-decoration:none}a:hover{color:#d40000;text-decoration:none}.clear{height:0;overflow:hidden;clear:both}body{-webkit-backface-visibility:hidden}.demo{margin:0 auto;text-align:center}.nav li{position:relative;display:inline-block;margin-left:-50px;-webkit-transition:all .4s linear;-moz-transition:all .4s linear;-o-transition:all .4s linear;-ms-transition:all .4s linear;transition:all .4s linear}.nav li a{display:inline-block;width:80px;height:80px;padding:30px;border-radius:50%;border-width:8px;border-style:solid}.nav li:hover{z-index:11;-webkit-transform:scale(1.1);-moz-transform:scale(1.1);-o-transform:scale(1.1);-ms-transform:scale(1.1);transform:scale(1.1)}.nav li:hover a{text-decoration:none}.nav li:hover span{-webkit-transition:all .4s linear;-moz-transition:all .4s linear;-o-transition:all .4s linear;-ms-transition:all .4s linear;transition:all .4s linear;-webkit-animation:moveFromBottom .3s ease;-moz-animation:moveFromBottom .3s ease;-o-animation:moveFromBottom .3s ease;-ms-animation:moveFromBottom .3s ease;animation:moveFromBottom .3s ease}.nav li:nth-child(1) a{color:#4d9683;text-shadow:0 1px 0 #9de3cf;border-color:#549e89;background-color:#51c9a7}.nav li:nth-child(2) a{color:#be607e;text-shadow:0 1px 0 #de8ba5;border-color:#e499b0;background-color:#e67b9c}.nav li:nth-child(3) a{color:#5e9eb4;text-shadow:0 1px 0 #adddec;border-color:#a2cfde;background-color:#7ec9e3}.nav li:nth-child(4) a{color:#ba9d5e;text-shadow:0 1px 0 #f5e0ad;border-color:#dcc999;background-color:#f0cd78}.nav li:nth-child(5) a{color:#b468a2;text-shadow:0 1px 0 #e8acd8;border-color:#d8abcd;background-color:#dd91cb}.nav li:nth-child(1):hover a{color:#0f775c;text-shadow:0 1px 0 #81e6c9;border-color:#0a8462;background-color:#00c18c}.nav li:nth-child(2):hover a{color:#b12a55;text-shadow:0 1px 0 #ff95b7;border-color:#ba335c;background-color:#ea5180}.nav li:nth-child(3):hover a{color:#2883a2;text-shadow:0 1px 0 #9cdef2;border-color:#4397b3;background-color:#55c1e5}.nav li:nth-child(4):hover a{color:#ab8228;text-shadow:0 1px 0 #ffe199;border-color:#b08f3e;background-color:#f8c64d}.nav li:nth-child(5):hover a{color:#a33689;text-shadow:0 1px 0 #ec97d6;border-color:#b7569f;background-color:#dd70c3}.nav span{display:block;line-height:50px;font-size:20px;font-style:normal}.nav span:before{display:block}.nav li:nth-child(1) span:before{content:\"heart\"}.nav li:nth-child(2) span:before{content:\"book\"}.nav li:nth-child(3) span:before{content:\"light\"}.nav li:nth-child(4) span:before{content:\"wrench\"}.nav li:nth-child(5) span:before{content:\"twitter\"}@-webkit-keyframes moveFromBottom{from{-webkit-transform:translateY(120%) scale(.5);opacity:0}to{-webkit-transform:translateY(0) scale(1);opacity:1}}@-moz-keyframes moveFromBottom{from{-moz-transform:translateY(120%) scale(.5);opacity:0}to{-moz-transform:translateY(0) scale(1);opacity:1}}@-ms-keyframes moveFromBottom{from{-ms-transform:translateY(120%) scale(.5);opacity:0}to{-ms-transform:translateY(0) scale(1);opacity:1}}@-o-keyframes moveFromBottom{from{-o-transform:translateY(120%) scale(.5);opacity:0}to{-o-transform:translateY(0) scale(1);opacity:1}}@keyframes moveFromBottom{from{transform:translateY(120%) scale(.5);opacity:0}to{transform:translateY(0) scale(1);opacity:1}}.nav span:before{font-family:LigatureSymbols;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-font-smoothing:antialiased;-ms-font-smoothing:antialiased;-o-font-smoothing:antialiased;font-smoothing:antialiased;-webkit-font-feature-settings:\"liga\" 1,\"dlig\" 1;-moz-font-feature-settings:\"liga=1, dlig=1\";-ms-font-feature-settings:\"liga\" 1,\"dlig\" 1;font-feature-settings:\"liga\" 1,\"dlig\" 1;font-size:80px}@font-face{font-family:LigatureSymbols;src:url(../font/LigatureSymbols-2.05.eot);src:url(../font/LigatureSymbols-2.05.eot?#iefix) format('embedded-opentype'),url(../font/LigatureSymbols-2.05.woff) format('woff'),url(../font/LigatureSymbols-2.05.ttf) format('truetype'),url(../font/LigatureSymbols-2.05.svg#LigatureSymbols) format('svg');font-weight:400;font-style:normal} /* rebuild by neat */"},{"title":"","date":"2022-10-21T15:55:31.010Z","updated":"2022-10-21T15:55:31.010Z","comments":true,"path":"mylibrary/css/float.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/float.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ *{margin:0;padding:0}.float{text-decoration:none;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);font-size:24px;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);background-size:400%;width:400px;height:100px;color:#fff;line-height:100px;text-align:center;text-transform:uppercase;border-radius:50px;z-index:1}.float::before{content:\"\";position:absolute;left:-5px;right:-5px;top:-5px;bottom:-5px;background:linear-gradient(90deg,#03a9f4,#f441a5,#ffeb3b,#03a9f4);background-size:400%;border-radius:50px;filter:blur(20px);z-index:-1}.float:hover::before{animation:sun 8s infinite}.float:hover{animation:sun 8s infinite}@keyframes sun{100%{background-position:-400% 0}} /* rebuild by neat */"},{"title":"","date":"2022-10-22T06:37:19.064Z","updated":"2022-10-22T06:37:19.064Z","comments":true,"path":"mylibrary/css/hide.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/hide.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ .banner1{width:234px;height:34px;border-radius:40px}.banner1 .hide{display:inline-block;width:30px;height:30px;line-height:30px;border-radius:50%;border:2px solid #add8e6;position:relative;background:#90ee90;color:#fff;text-align:center;text-decoration:none;cursor:pointer;z-index:2}.banner1 .hide:hover+.shide{transform:translateX(10px);opacity:1}.banner1 .shide{display:inline-block;width:auto;padding:0 20px;height:30px;line-height:30px;background:#add8e6;border-radius:30px;text-align:center;color:#fff;position:relative;top:2px;opacity:0;transition:all 1s;transform:translateX(80px)} /* rebuild by neat */"},{"title":"","date":"2022-10-22T06:40:31.997Z","updated":"2022-10-22T06:40:31.997Z","comments":true,"path":"mylibrary/css/load.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/load.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ .loading{background:0 0;border:0;border-radius:0;text-transform:uppercase;font-weight:700;font-size:20px;padding:15px 50px;position:absolute}.loading:before{transition:all .8s cubic-bezier(.7,-.5,.2,2);content:'';width:1%;height:100%;background:#ff5964;position:absolute;top:0;left:0}.loading .sloading{mix-blend-mode:darken}.loading:hover:before{background:#ff5964;width:100%} /* rebuild by neat */"},{"title":"","date":"2022-10-21T10:20:00.061Z","updated":"2022-10-21T10:20:00.061Z","comments":true,"path":"mylibrary/css/neon.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/neon.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ #neon-btn{display:flex;align-items:center;justify-content:space-around;background:#00000}.btn{border:1px solid;background-color:transparent;text-transform:uppercase;font-size:14px;padding:10px 20px;font-weight:300}.one{color:#4cc9f0}.two{color:#f038ff}.three{color:#b9e769}.btn:hover{color:#fff;border:0}.one:hover{background-color:#4cc9f0;-webkit-box-shadow:10px 10px 99px 6px #4cc9f0;-moz-box-shadow:10px 10px 99px 6px #4cc9f0;box-shadow:10px 10px 99px 6px #4cc9f0}.two:hover{background-color:#f038ff;-webkit-box-shadow:10px 10px 99px 6px #f038ff;-moz-box-shadow:10px 10px 99px 6px #f038ff;box-shadow:10px 10px 99px 6px #f038ff}.three:hover{background-color:#b9e769;-webkit-box-shadow:10px 10px 99px 6px #b9e769;-moz-box-shadow:10px 10px 99px 6px #b9e769;box-shadow:10px 10px 99px 6px #b9e769} /* rebuild by neat */"},{"title":"","date":"2022-10-22T06:34:07.853Z","updated":"2022-10-22T06:34:07.853Z","comments":true,"path":"mylibrary/css/round.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/round.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ .wrapper{width:100px;height:100px;background:linear-gradient(#fcc32b,#ffb230,#fe8437,#fc631f);border-radius:50%;position:absolute;top:200px;left:400px;cursor:pointer}.wrapper:after{content:'你猜';display:inline-block;width:100px;height:100px;line-height:100px;border-radius:50%;text-align:center;color:#fff;font-size:24px}.wrapper:hover .round{transform:scale(1);opacity:1;animation:rotating 120s 1.2s linear infinite alternate}@keyframes rotating{0%{-webkit-transform:rotate(0)}100%{-webkit-transform:rotate(3600deg)}}.round{width:240px;height:240px;border:2px #00f;border-radius:50%;position:absolute;top:-70px;left:-70px;transition:all 1s;transform:scale(.35);opacity:0}.round .sround{width:50px;height:50px;line-height:40px;display:inline-block;border-radius:50%;color:#fff;text-align:center;position:absolute}.round .sround:nth-child(1){background:linear-gradient(#a48d6e,#457e15,#044e67);right:-22px;top:50%;margin-top:-22px}.round .sround:nth-child(2){background:linear-gradient(#686659,#ab9774,#d6af76,#c7a464,#a5977a,#746c5f);left:-22px;top:50%;margin-top:-22px}.round .sround:nth-child(3){background:linear-gradient(#5e72a7,#dff2c4,#1c4d9a);left:50%;bottom:-22px;margin-left:-22px}.round .sround:nth-child(4){background:linear-gradient(#ada59a,#dde2e6,#f6feff,#dbc8ba,#cde5ef,#b18d81,#dce5f6,#d9cfc6);left:50%;top:-22px;margin-left:-22px} /* rebuild by neat */"},{"title":"","date":"2022-10-22T06:46:49.004Z","updated":"2022-10-22T06:46:49.004Z","comments":true,"path":"mylibrary/css/shake.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/shake.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ .shake{width:300px;height:40px;display:block;background:#90ee90;border-radius:10px;margin:100px;color:#fff;font-size:24px;text-align:center;line-height:40px;cursor:pointer;transition:all .25s}.shake:hover{animation:shake .25s}@keyframes shake{0%,10%,100%,55%,90%,94%,98%{-webkit-transform:scale(1,1)}30%{-webkit-transform:scale(1.14,.86)}75%{-webkit-transform:scale(.92,1.08)}92%{-webkit-transform:scale(1.04,.96)}96%{-webkit-transform:scale(1.02,.98)}99%{-webkit-transform:scale(1.01,.99)}} /* rebuild by neat */"},{"title":"","date":"2022-10-22T02:20:52.375Z","updated":"2022-10-22T02:20:27.358Z","comments":true,"path":"mylibrary/css/shiny.css","permalink":"https://zennnnnnnnnnnn.js.cool/mylibrary/css/shiny.css","excerpt":"","text":"/* build time:Mon Jan 09 2023 11:38:15 GMT+0800 (中国标准时间)*/ #shiny-shadow{display:flex;align-items:center;justify-content:center}.shiny{border:2px solid #000;background:0 0;text-transform:uppercase;color:#000;padding:15px 50px;outline:0;overflow:hidden;position:relative}.shiny:after{content:'';display:block;position:absolute;top:-36px;left:-100px;background:#000;width:50px;height:125px;opacity:20%;transform:rotate(-45deg)}.shiny:hover:after{left:120%;transition:all .6s cubic-bezier(.3,1,.2,1);-webkit-transition:all .6s cubic-bezier(.3,1,.2,1)} /* rebuild by neat */"},{"title":"","date":"2022-09-28T07:34:40.594Z","updated":"2022-09-28T07:34:40.594Z","comments":true,"path":"mypage/font/README.html","permalink":"https://zennnnnnnnnnnn.js.cool/mypage/font/README.html","excerpt":"","text":"Ligature SymbolsLigature Symbols is WebFont project to display the symbol with a ligature features.I created this font by using FontForge (open source postscript font editor).If you want to learn more, you may read my blog entry.Demo: http://kudakurage.com/ligature_symbols/ Browser SupportLigature Symbols works in all major browsers (Chrome, Firefox, Safari, Opera, IE, iOS, Android) Sample HTML&lt;p&gt;Simple use for mailto link.&lt;/p&gt; &lt;a href=&quot;mailto:mail@example.com&quot; class=&quot;lsf&quot;&gt;mail&lt;/a&gt; &lt;p&gt;Use tha icon with text.&lt;/p&gt; &lt;a href=&quot;http://twitter.com/&quot; class=&quot;lsf-icon&quot; title=&quot;twitter&quot;&gt;Twitter&lt;/a&gt; Sample CSS@font-face &#123; font-family: &#39;LigatureSymbols&#39;; src: url(&#39;LigatureSymbols.eot&#39;); src: url(&#39;LigatureSymbols.eot?#iefix&#39;) format(&#39;embedded-opentype&#39;), url(&#39;LigatureSymbols.woff&#39;) format(&#39;woff&#39;), url(&#39;LigatureSymbols.ttf&#39;) format(&#39;truetype&#39;), url(&#39;LigatureSymbols.svg#LigatureSymbols&#39;) format(&#39;svg&#39;); src: url(&#39;LigatureSymbols.ttf&#39;) format(&#39;truetype&#39;); font-weight: normal; font-style: normal; &#125; .lsf, .lsf-icon:before &#123; font-family: &#39;LigatureSymbols&#39;; text-rendering: optimizeLegibility; -webkit-font-smoothing: antialiased; -moz-font-smoothing: antialiased; -ms-font-smoothing: antialiased; -o-font-smoothing: antialiased; font-smoothing: antialiased; &#125; .lsf-icon:before &#123; content: attr(title); margin-right: .3em; font-size: 130%; &#125; LicenseYou can get Ligature Symbols for free.This Font is licensed under the SIL Open Font License."}],"posts":[{"title":"【模块】as5600","slug":"library/嵌入式/模块/【模块】as5600","date":"2023-01-09T02:33:50.000Z","updated":"2023-01-09T03:07:59.261Z","comments":true,"path":"2023/library/嵌入式/模块/【模块】as5600/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91as5600/","excerpt":"as5600 是磁编码器，一般用于电机测转速","text":"as5600 是磁编码器，一般用于电机测转速 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"编码器","slug":"编码器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BC%96%E7%A0%81%E5%99%A8/"}]},{"title":"【模块】amg8833","slug":"library/嵌入式/模块/【模块】amg8833","date":"2023-01-07T12:04:37.000Z","updated":"2023-01-07T12:32:50.417Z","comments":true,"path":"2023/library/嵌入式/模块/【模块】amg8833/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91amg8833/","excerpt":"文章概览","text":"文章概览 简介amg8833 是红外成像模块，返回 8×8 个温度值 分辨率是0.25°C，精度±2.5℃ 速度最快 10Hz 大概100多块钱，体积很小，精度很低，像素也很少，想不到能有啥用途 可以在7m距离内检测到人 详细看这个，模块性质和寄存器功能 代码使用方法：amg88xxInit -&gt; readPixels amg8833.c 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325#include &quot;amg8833.h&quot;struct pctl _pctl;struct rst _rst;struct fpsc _fpsc;struct intc _intc;struct stat _stat;struct sclr _sclr;struct ave _ave;struct inthl _inthl;struct inthh _inthh;struct intll _intll;struct intlh _intlh;struct ihysl _ihysl;struct ihysh _ihysh;struct tthl _tthl;struct tthh _tthh;uint8_t getPCTL(void)&#123; return _pctl.PCTL; &#125;uint8_t getRST(void)&#123; return _rst.RST; &#125;uint8_t getFPSC(void)&#123; return _fpsc.FPS &amp; 0x01; &#125;uint8_t getINTC(void)&#123; return (_intc.INTMOD &lt;&lt; 1 | _intc.INTEN) &amp; 0x03; &#125;uint8_t getSTAT(void)&#123; return ( (_stat.OVF_THS &lt;&lt; 3) | (_stat.OVF_IRS &lt;&lt; 2) | (_stat.INTF &lt;&lt; 1) ) &amp; 0x07; &#125;uint8_t getSCLR(void)&#123; return ((_sclr.OVT_CLR &lt;&lt; 3) | (_sclr.OVS_CLR &lt;&lt; 2) | (_sclr.INTCLR &lt;&lt; 1)) &amp; 0x07; &#125;uint8_t getAVE(void)&#123; return (_ave.MAMOD &lt;&lt; 5); &#125;uint8_t getINTHL(void)&#123; return _inthl.INT_LVL_H; &#125;uint8_t getINTHH(void)&#123; return _inthh.INT_LVL_H; &#125;uint8_t getINTLL(void)&#123; return _intll.INT_LVL_L; &#125;uint8_t getINTLH(void)&#123; return (_intlh.INT_LVL_L &amp; 0xF); &#125;uint8_t getIHYSL(void)&#123; return _ihysl.INT_HYS; &#125;uint8_t getIHYSH(void)&#123; return (_ihysh.INT_HYS &amp; 0xF); &#125;uint8_t getTTHL(void)&#123; return _tthl.TEMP; &#125;uint8_t getTTHH(void)&#123; return ( (_tthh.SIGN &lt;&lt; 3) | _tthh.TEMP) &amp; 0xF; &#125; uint8_t min(uint8_t a, uint8_t b)&#123; return a &lt; b ? a : b; &#125;#define constrain(amt,low,high) ((amt)&lt;(low)?(low):((amt)&gt;(high)?(high):(amt)))extern I2C_HandleTypeDef hi2c1;/**************************************************************************//*! @brief Setups the I2C interface and hardware @param addr Optional I2C address the sensor can be found on. Default is 0x69 @returns True if device is set up, false on any failure*//**************************************************************************/int amg88xxInit(void)&#123; //enter normal mode _pctl.PCTL = AMG88xx_NORMAL_MODE; write8(AMG88xx_PCTL, getPCTL()); //software reset _rst.RST = AMG88xx_INITIAL_RESET; write8(AMG88xx_RST, getRST()); //disable interrupts by default disableInterrupt(); //set to 10 FPS _fpsc.FPS = AMG88xx_FPS_10; write8(AMG88xx_FPSC, getFPSC()); HAL_Delay(100); return 0;&#125;/**************************************************************************//*! @brief Set the moving average mode. @param mode if True is passed, output will be twice the moving average*//**************************************************************************/void setMovingAverageMode(int mode)&#123; _ave.MAMOD = mode; write8(AMG88xx_AVE, getAVE());&#125;/**************************************************************************//*! @brief Set the interrupt levels. The hysteresis value defaults to .95 * high @param high the value above which an interrupt will be triggered @param low the value below which an interrupt will be triggered*//**************************************************************************/void setInterruptLevels(float high, float low)&#123; setInterruptLevelsHist(high, low, high * .95f);&#125;/**************************************************************************//*! @brief Set the interrupt levels @param high the value above which an interrupt will be triggered @param low the value below which an interrupt will be triggered @param hysteresis the hysteresis value for interrupt detection*//**************************************************************************/void setInterruptLevelsHist(float high, float low, float hysteresis)&#123; int highConv = high / AMG88xx_PIXEL_TEMP_CONVERSION; highConv = constrain(highConv, -4095, 4095); _inthl.INT_LVL_H = highConv &amp; 0xFF; _inthh.INT_LVL_H = (highConv &amp; 0xF) &gt;&gt; 4; write8(AMG88xx_INTHL, getINTHL()); write8(AMG88xx_INTHH, getINTHH()); int lowConv = low / AMG88xx_PIXEL_TEMP_CONVERSION; lowConv = constrain(lowConv, -4095, 4095); _intll.INT_LVL_L = lowConv &amp; 0xFF; _intlh.INT_LVL_L = (lowConv &amp; 0xF) &gt;&gt; 4; write8(AMG88xx_INTLL, getINTLL()); write8(AMG88xx_INTLH, getINTLH()); int hysConv = hysteresis / AMG88xx_PIXEL_TEMP_CONVERSION; hysConv = constrain(hysConv, -4095, 4095); _ihysl.INT_HYS = hysConv &amp; 0xFF; _ihysh.INT_HYS = (hysConv &amp; 0xF) &gt;&gt; 4; write8(AMG88xx_IHYSL, getIHYSL()); write8(AMG88xx_IHYSH, getIHYSH());&#125;/**************************************************************************//*! @brief enable the interrupt pin on the device.*//**************************************************************************/void enableInterrupt()&#123; _intc.INTEN = 1; write8(AMG88xx_INTC, getINTC());&#125;/**************************************************************************//*! @brief disable the interrupt pin on the device*//**************************************************************************/void disableInterrupt()&#123; _intc.INTEN = 0; write8(AMG88xx_INTC, getINTC());&#125;/**************************************************************************//*! @brief Set the interrupt to either absolute value or difference mode @param mode passing AMG88xx_DIFFERENCE sets the device to difference mode, AMG88xx_ABSOLUTE_VALUE sets to absolute value mode.*//**************************************************************************/void setInterruptMode(uint8_t mode)&#123; _intc.INTMOD = mode; write8(AMG88xx_INTC, getINTC());&#125;/**************************************************************************//*! @brief Read the state of the triggered interrupts on the device. The full interrupt register is 8 bytes in length. @param buf the pointer to where the returned data will be stored @param size Optional number of bytes to read. Default is 8 bytes. @returns up to 8 bytes of data in buf*//**************************************************************************/void getInterrupt(uint8_t *buf, uint8_t size)&#123; uint8_t bytesToRead = min(size, (uint8_t)8); read(AMG88xx_INT_OFFSET, buf, bytesToRead);&#125;/**************************************************************************//*! @brief Clear any triggered interrupts*//**************************************************************************/void clearInterrupt()&#123; _rst.RST = AMG88xx_FLAG_RESET; write8(AMG88xx_RST, getRST());&#125;/**************************************************************************//*! @brief read the onboard thermistor @returns a the floating point temperature in degrees Celsius*//**************************************************************************/float readThermistor()&#123; uint8_t raw[2]; read(AMG88xx_TTHL, raw, 2); uint16_t recast = ((uint16_t)raw[1] &lt;&lt; 8) | ((uint16_t)raw[0]); return signedMag12ToFloat(recast) * AMG88xx_THERMISTOR_CONVERSION;&#125;/**************************************************************************//*! @brief Read Infrared sensor values @param buf the array to place the pixels in @param size Optionsl number of bytes to read (up to 64). Default is 64 bytes. @return up to 64 bytes of pixel data in buf*//**************************************************************************/void readPixels(float *buf, uint8_t size)&#123; uint16_t recast; float converted; uint8_t bytesToRead = min((uint8_t)(size &lt;&lt; 1), (uint8_t)(AMG88xx_PIXEL_ARRAY_SIZE &lt;&lt; 1)); uint8_t rawArray[bytesToRead]; read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead); for(int i=0; i&lt;size; i++)&#123; uint8_t pos = i &lt;&lt; 1; recast = ((uint16_t)rawArray[pos + 1] &lt;&lt; 8) | ((uint16_t)rawArray[pos]); converted = signedMag12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION; buf[i] = converted; &#125;&#125;void readPixelsRaw(int16_t* buf)&#123; read(AMG88xx_PIXEL_OFFSET, (uint8_t*)buf, 128);&#125;/**************************************************************************//*! @brief write one byte of data to the specified register @param reg the register to write to @param value the value to write*//**************************************************************************/void write8(uint8_t reg, uint8_t value)&#123; write(reg, &amp;value, 1);&#125;/**************************************************************************//*! @brief read one byte of data from the specified register @param reg the register to read @returns one byte of register data*//**************************************************************************/uint8_t read8(uint8_t reg)&#123; uint8_t ret; read(reg, &amp;ret, 1); return ret;&#125;void read(uint8_t reg, uint8_t *buf, uint8_t num)&#123; HAL_StatusTypeDef err; err = HAL_I2C_Mem_Read(&amp;hi2c1, (AMG88xx_ADDRESS), reg, 1, buf, num, 0xffff); if(err != HAL_OK) while(1);&#125;void write(uint8_t reg, uint8_t *buf, uint8_t num)&#123; HAL_StatusTypeDef err; err = HAL_I2C_Mem_Write(&amp;hi2c1, (AMG88xx_ADDRESS), reg, 1, buf, num, 0xffff); if(err != HAL_OK) while(1);&#125;/**************************************************************************//*! @brief convert a 12-bit signed magnitude value to a floating point number @param val the 12-bit signed magnitude value to be converted @returns the converted floating point value*//**************************************************************************/float signedMag12ToFloat(uint16_t val)&#123; //take first 11 bits as absolute val uint16_t absVal = (val &amp; 0x7FF); return (val &amp; 0x8000) ? 0 - (float)absVal : (float)absVal ;&#125;/**************************************************************************插值法重构输出***************************************************************************/int Resize(int16_t* pixelsIn, int16_t* pixelsOut, int w, int h, int w2, int h2)&#123; int A, B, C, D, x, y, index, gray ; float x_ratio = ((float)(w-1))/w2 ; float y_ratio = ((float)(h-1))/h2 ; float x_diff, y_diff; int offset = 0 ; for (int i=0;i&lt;h2;i++) &#123; for (int j=0;j&lt;w2;j++) &#123; x = (int)(x_ratio * j) ; y = (int)(y_ratio * i) ; x_diff = (x_ratio * j) - x ; y_diff = (y_ratio * i) - y ; index = y*w+x ; A = pixelsIn[index] &amp; 0xffff; B = pixelsIn[index+1] &amp; 0xffff; C = pixelsIn[index+w] &amp; 0xffff; D = pixelsIn[index+w+1] &amp; 0xffff; gray = (int)( A*(1-x_diff)*(1-y_diff) + B*(x_diff)*(1-y_diff) + C*(y_diff)*(1-x_diff) + D*(x_diff*y_diff) ) ; pixelsOut[offset++] = gray ; &#125; &#125; return 0;&#125; amg8833.hifndef __AMG8833_H__#define __AMG8833_H__#include &lt;stdint.h&gt;#include &quot;main.h&quot;#include &quot;i2c.h&quot;/*========================================================================= I2C ADDRESS/BITS -----------------------------------------------------------------------*/ #define AMG88xx_ADDRESS (0xd2) //68/*=========================================================================*//*========================================================================= REGISTERS -----------------------------------------------------------------------*/enum &#123; AMG88xx_PCTL = 0x00, AMG88xx_RST = 0x01, AMG88xx_FPSC = 0x02, AMG88xx_INTC = 0x03, AMG88xx_STAT = 0x04, AMG88xx_SCLR = 0x05, //0x06 reserved AMG88xx_AVE = 0x07, AMG88xx_INTHL = 0x08, AMG88xx_INTHH = 0x09, AMG88xx_INTLL = 0x0A, AMG88xx_INTLH = 0x0B, AMG88xx_IHYSL = 0x0C, AMG88xx_IHYSH = 0x0D, AMG88xx_TTHL = 0x0E, AMG88xx_TTHH = 0x0F, AMG88xx_INT_OFFSET = 0x010, AMG88xx_PIXEL_OFFSET = 0x80 &#125;; enum power_modes&#123; AMG88xx_NORMAL_MODE = 0x00, AMG88xx_SLEEP_MODE = 0x01, AMG88xx_STAND_BY_60 = 0x20, AMG88xx_STAND_BY_10 = 0x21 &#125;; enum sw_resets &#123; AMG88xx_FLAG_RESET = 0x30, AMG88xx_INITIAL_RESET = 0x3F &#125;; enum frame_rates &#123; AMG88xx_FPS_10 = 0x00, AMG88xx_FPS_1 = 0x01 &#125;; enum int_enables&#123; AMG88xx_INT_DISABLED = 0x00, AMG88xx_INT_ENABLED = 0x01 &#125;; enum int_modes &#123; AMG88xx_DIFFERENCE = 0x00, AMG88xx_ABSOLUTE_VALUE = 0x01 &#125;; /*=========================================================================*/#define AMG88xx_PIXEL_ARRAY_SIZE 64#define AMG88xx_PIXEL_TEMP_CONVERSION .25f#define AMG88xx_THERMISTOR_CONVERSION .0625f/**************************************************************************//*! @brief Class that stores state and functions for interacting with AMG88xx IR sensor chips*//**************************************************************************/ int amg88xxInit(void);void readPixels(float *buf, uint8_t size/* = AMG88xx_PIXEL_ARRAY_SIZE */);void readPixelsRaw(int16_t* buf);float readThermistor(void);void setMovingAverageMode(int mode);void enableInterrupt(void);void disableInterrupt(void);void setInterruptMode(uint8_t mode);void getInterrupt(uint8_t *buf, uint8_t /*size = 8 */);void clearInterrupt(void); //this will automatically set hysteresis to 95% of the high valuevoid setInterruptLevels(float high, float low); //this will manually set hysteresisvoid setInterruptLevelsHist(float high, float low, float hysteresis);void write8(uint8_t reg, uint8_t value);void write16(uint8_t reg, uint16_t value);uint8_t read8(uint8_t reg);void read(uint8_t reg, uint8_t *buf, uint8_t num);void write(uint8_t reg, uint8_t *buf, uint8_t num);float signedMag12ToFloat(uint16_t val); // The power control registerstruct pctl &#123; // 0x00 = Normal Mode // 0x01 = Sleep Mode // 0x20 = Stand-by mode (60 sec intermittence) // 0x21 = Stand-by mode (10 sec intermittence) uint8_t PCTL : 8;&#125;; //reset registerstruct rst &#123; //0x30 = flag reset (all clear status reg 0x04, interrupt flag and interrupt table) //0x3F = initial reset (brings flag reset and returns to initial setting) uint8_t RST : 8;&#125;; //frame rate registerstruct fpsc &#123; //0 = 10FPS //1 = 1FPS uint8_t FPS : 1;&#125;; //interrupt control registerstruct intc &#123; // 0 = INT output reactive (Hi-Z) // 1 = INT output active uint8_t INTEN : 1; // 0 = Difference interrupt mode // 1 = absolute value interrupt mode uint8_t INTMOD : 1;&#125;; //status registerstruct stat &#123; uint8_t unused : 1; //interrupt outbreak (val of interrupt table reg) uint8_t INTF : 1; //temperature output overflow (val of temperature reg) uint8_t OVF_IRS : 1; //thermistor temperature output overflow (value of thermistor) uint8_t OVF_THS : 1; &#125;; //status clear register //write to clear overflow flag and interrupt flag //after writing automatically turns to 0x00struct sclr &#123; uint8_t unused : 1; //interrupt flag clear uint8_t INTCLR : 1; //temp output overflow flag clear uint8_t OVS_CLR : 1; //thermistor temp output overflow flag clear uint8_t OVT_CLR : 1;&#125;; //average register //for setting moving average output modestruct ave &#123; uint8_t unused : 5; //1 = twice moving average mode uint8_t MAMOD : 1;&#125;; //interrupt level registers //for setting upper / lower limit hysteresis on interrupt level //interrupt level upper limit setting. Interrupt output // and interrupt pixel table are set when value exceeds set valuestruct inthl &#123; uint8_t INT_LVL_H : 8;&#125;; struct inthh &#123; uint8_t INT_LVL_H : 4;&#125;; //interrupt level lower limit. Interrupt output //and interrupt pixel table are set when value is lower than set valuestruct intll &#123; uint8_t INT_LVL_L : 8;&#125;; struct intlh &#123; uint8_t INT_LVL_L : 4;&#125;; //setting of interrupt hysteresis level when interrupt is generated. //should not be higher than interrupt levelstruct ihysl &#123; uint8_t INT_HYS : 8;&#125;; struct ihysh &#123; uint8_t INT_HYS : 4;&#125;; //thermistor register //SIGNED MAGNITUDE FORMATstruct tthl &#123; uint8_t TEMP : 8;&#125;; struct tthh &#123; uint8_t TEMP : 3; uint8_t SIGN : 1;&#125;; //temperature registers 0x80 - 0xFF /* //read to indicate temperature data per 1 pixel //SIGNED MAGNITUDE FORMAT struct t01l &#123; uint8_t TEMP : 8; uint8_t get()&#123; return TEMP; &#125; &#125;; struct t01l _t01l; struct t01h &#123; uint8_t TEMP : 3; uint8_t SIGN : 1; uint8_t get()&#123; return ( (SIGN &lt;&lt; 3) | TEMP) &amp; 0xF; &#125; &#125;; struct t01h _t01h; */int Resize(int16_t* pixelsIn, int16_t* pixelsOut, int w, int h, int w2, int h2);#endif python 读取串口，并用 cv2 库成像 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748import numpy as npimport cv2import serialfrom time import sleepserial = serial.Serial(&#x27;COM5&#x27;, 115200, timeout=0.5)if serial.isOpen() : print(&quot;open success&quot;)else : print(&quot;open failed&quot;)_datas = [[118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0], [118.0, 119.0, 116.0, 117.0, 118.0, 116.0, 117.0, 117.0]]def my_limit(num): if num &gt; 255: return 255 if num &lt; 0: return 0 else: return numwhile True: if cv2.waitKey(25) &amp; 0xFF == ord(&#x27;q&#x27;): # 关闭视频 break sleep(0.002) data =serial.readline() # 读取一行数据，读到\\n为止 if data != b&#x27;&#x27; : data = data.decode(&quot;unicode_escape&quot;).split(&quot; &quot;) # 转码，非常重要 if data[0] != &quot;px&quot;: for i in range(8): for j in range(8): # 这里的参数需要调 _datas[i][j] = my_limit((float(data[i * 8 + j])-10) * 25) print(float(data[i*8+j])) img = np.array(_datas, np.uint8) new_img = cv2.resize(img, (720, 720), interpolation=cv2.INTER_LANCZOS4) # new_img = cv2.cvtColor(new_img, cv2.COLOR_BGR2GRAY) # image_np=cv2.cvtColor(image_np,cv2.COLOR_GRAY2BGR) new_img = cv2.applyColorMap(new_img, cv2.COLORMAP_JET) cv2.imshow(&quot;INTER_NEAREST&quot;, new_img) cv2.waitKey(25)cv2.destroyAllWindows() 多想多做，发篇一作","categories":[],"tags":[{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"amg8833","slug":"amg8833","permalink":"https://zennnnnnnnnnnn.js.cool/tags/amg8833/"}]},{"title":"【忆阻器】算法部分","slug":"work/忆阻器/【忆阻器】算法部分","date":"2023-01-07T02:43:06.000Z","updated":"2023-01-07T13:38:34.863Z","comments":true,"path":"2023/work/忆阻器/【忆阻器】算法部分/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/work/%E5%BF%86%E9%98%BB%E5%99%A8/%E3%80%90%E5%BF%86%E9%98%BB%E5%99%A8%E3%80%91%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/","excerpt":"文章概览","text":"文章概览 PID用随机搜索算法自动调参这里用忆阻器实现的硬件PID，其中的 PD 比例系数由忆阻器实现 即只有一个变量需要被优化，采样新点方法为梯度下降，流程图如下 123456789graph TD %% RL LRa[qwer] --&gt; bb&#123;asdf&#125;a --说明--&gt; c(zxcv)a .-&gt; ba --&gt; db ==&gt; d((asdf)) 多想多做，发篇一作","categories":[],"tags":[{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"忆阻器","slug":"忆阻器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%86%E9%98%BB%E5%99%A8/"}]},{"title":"chatgpt微信机器人","slug":"work/chatgpt微信机器人","date":"2023-01-06T03:10:48.000Z","updated":"2023-01-06T03:48:30.352Z","comments":true,"path":"2023/work/chatgpt微信机器人/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/work/chatgpt%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/","excerpt":"文章概览","text":"文章概览 CSDN写的很详细 可以画画 不是纯chatgpt，不支持上下文记忆 搭建知识正好学习一下这方面知识，后续补充 （本来用 itchat，后替换成 itchat-uos）微信机器人 openai 的 api 接口 搭建效果 电脑运行python程序 手机扫码，电脑登录微信 该微信号在接收到特定信息（包含”@bot”语句，可设定），会自动回复（同时可以自由使用该微信号） 多想多做，发篇一作","categories":[],"tags":[{"name":"chatgpt","slug":"chatgpt","permalink":"https://zennnnnnnnnnnn.js.cool/tags/chatgpt/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"OpenAI‘s services are not available in your country","slug":"solved/chatgpt您所在的地区无法访问","date":"2023-01-06T02:51:38.000Z","updated":"2023-01-06T02:54:06.891Z","comments":true,"path":"2023/solved/chatgpt您所在的地区无法访问/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/solved/chatgpt%E6%82%A8%E6%89%80%E5%9C%A8%E7%9A%84%E5%9C%B0%E5%8C%BA%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/","excerpt":"文章概览","text":"文章概览 在地址栏输入（javascript:要手动输入） javascript:window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#39;@@auth0spajs&#39;))) 刷新页面 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"chatgpt","slug":"chatgpt","permalink":"https://zennnnnnnnnnnn.js.cool/tags/chatgpt/"}]},{"title":"【模块】数码管","slug":"library/嵌入式/模块/【模块】数码管","date":"2023-01-04T13:15:41.000Z","updated":"2023-01-04T14:17:01.841Z","comments":true,"path":"2023/library/嵌入式/模块/【模块】数码管/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E6%95%B0%E7%A0%81%E7%AE%A1/","excerpt":"文章概览","text":"文章概览 这篇写得超级好（但是有个错误：五、代码分析2.代码块PB15和PB13位置写反了，我这里改过来了） 四位数码管，背面有两个芯片。 除了VCC和GND，其余引脚包括 DIO、LCLK、SCLK 控制原理简单，不需要设置I2C，用代码模拟就行了 原理数码管背面芯片是 74HC595，串行输入——并行输出 操作流程 发送字节到74HC595芯片的移位寄存器中 继续发送数码管位置到移位寄存器中 从移位寄存器转存带存储寄存器 代码123456789101112131415/************************VCC------------&gt;供电DIO------------&gt;PB13RCLK------------&gt;PB12 SCLK------------&gt;PB15 GND------------&gt;接地**************************/void HC595_GPIO_Configuration(void);void HC595_Send_Data(unsigned char num, unsigned char show_bit);void HC595_Send_Byte(unsigned char byte)；void display(unsigned int n);unsigned int num[] = &#123;0xc0, 0xf9, 0xa4, 0xb0, 0x99, 0x92, 0x82, 0xf8, 0x80, 0x90, 0xff, 0x00&#125;;//创建一个数组，0-9所对应的十六进制数 1234567891011121314151617181920//串入void HC595_Send_Byte(unsigned char byte)&#123; unsigned int i; for(i = 0; i &lt; 8; i++) &#123; if(byte &amp; 0x80) GPIO_WriteBit(GPIOB, GPIO_Pin_15, Bit_SET); else GPIO_WriteBit(GPIOB, GPIO_Pin_15, Bit_RESET); GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_RESET); Delay_us(10); GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_SET); Delay_us(10); byte &lt;&lt;= 1; &#125;&#125; 1234567891011//并出void HC595_Send_Data(unsigned char num, unsigned char show_bit)&#123; HC595_Send_Byte(num); HC595_Send_Byte(1 &lt;&lt; show_bit); GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_RESET); Delay_us(10); GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_SET); Delay_us(10);&#125; 123456789101112131415// 显示四位数字void display(unsigned int n)&#123; static unsigned int thousand_bit, hundred_bit, ten_bit, single_bit; thousand_bit = n / 1000; hundred_bit = (n % 1000) / 100; ten_bit = n % 1000 % 100 / 10; single_bit = n % 10; HC595_Send_Data(num[thousand_bit], 3); HC595_Send_Data(num[hundred_bit], 2); HC595_Send_Data(num[ten_bit], 1); HC595_Send_Data(num[single_bit], 0);&#125; 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"数码管","slug":"数码管","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E7%A0%81%E7%AE%A1/"}]},{"title":"【模块】超声波测距","slug":"library/嵌入式/模块/【模块】超声波测距","date":"2023-01-04T01:25:14.000Z","updated":"2023-01-04T02:25:36.259Z","comments":true,"path":"2023/library/嵌入式/模块/【模块】超声波测距/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/","excerpt":"文章概览","text":"文章概览 参考CSDN这篇 原理超声波测距原理都差不多 引脚 VCC Trig Echo GND 一般5V 接收信号，触发开始 返回信号，用于计算距离 顺序 注意被测物体的面积不少于0.5平方米且平面尽量要求平整 使用方法 在 cubemx 中设置 trig 为 output GPIO，设置 echo 为 input GPIO 开启 TIM 时钟，两参数分别为 72-1 和 65535，用于精确计时 1234#define CSB_Trig_GPIO_Port GPIOB#define CSB_Trig_Pin GPIO_PIN_5#define CSB_Echo_GPIO_Port GPIOB#define CSB_Echo_Pin GPIO_PIN_6 12345678910111213141516171819202122232425262728293031323334353637383940414243//使用TIM1来做us级延时函数,此函数为1usvoid TIM1_Delay_us(uint16_t n_us)&#123; __HAL_TIM_SetCounter(&amp;htim1, 0);//htim1 /* 开启定时器1计数 */ __HAL_TIM_ENABLE(&amp;htim1); //获取定时器的计数值！！！再判断计数值，但是计数值不得大于定时器配置的重装载值。\\ 假如：定时器设定的重装载值为65536-1， 比较值需小于重装载值，即(计数1次 * n_us)-1) 小于（65536-1）\\ 即传进来的参数n_us需要小于65536-1； while(__HAL_TIM_GetCounter(&amp;htim1) &lt; ((1 * n_us)-1) ); /* Disable the Peripheral */ __HAL_TIM_DISABLE(&amp;htim1);&#125;//获取超声波模块的检测距离float csb_get_distance(void)&#123; float CSB_value = 0 ; //给发射引脚一个高电平 HAL_GPIO_WritePin(CSB_Trig_GPIO_Port, CSB_Trig_Pin , GPIO_PIN_SET); //延时10us以上 TIM1_Delay_us(20); //给发射引脚一个低电平 HAL_GPIO_WritePin(CSB_Trig_GPIO_Port, CSB_Trig_Pin, GPIO_PIN_RESET); //等待接收引脚变成高电平 while( HAL_GPIO_ReadPin(CSB_Echo_GPIO_Port,CSB_Echo_Pin) == 0); //设置定时器初始值为0 __HAL_TIM_SetCounter(&amp;htim1, 0); //开始计时 __HAL_TIM_ENABLE(&amp;htim1); //接收完全后不再为高电平，即当接收引脚变成低电平后，停止计时，获取计数时间 while( HAL_GPIO_ReadPin(CSB_Echo_GPIO_Port,CSB_Echo_Pin) == 1); //获取定时器的计数值,赋值操作 a = b; CSB_value = __HAL_TIM_GetCounter(&amp;htim1); //停止计时 __HAL_TIM_DISABLE(&amp;htim1); //已知高电平总时间，即可利用公式（ 测试距离= (高电平时间*声速(340M/S))/2 ），计算超声波模块距离障碍物的单程距离； //如果需要返回 毫米级别距离,公式为（ 测试距离= (高电平时间*声速(340M/1000mS))/2 ） return ( CSB_value*340/1000/2); //*340/1000/2&#125; 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"测距","slug":"测距","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B5%8B%E8%B7%9D/"},{"name":"超声波","slug":"超声波","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%B6%85%E5%A3%B0%E6%B3%A2/"}]},{"title":"【嵌入式积累】控制入门","slug":"library/嵌入式/积累/【嵌入式积累】控制入门","date":"2023-01-01T01:32:52.000Z","updated":"2023-01-02T14:45:56.776Z","comments":true,"path":"2023/library/嵌入式/积累/【嵌入式积累】控制入门/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A7%AF%E7%B4%AF/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF%E3%80%91%E6%8E%A7%E5%88%B6%E5%85%A5%E9%97%A8/","excerpt":"文章概览","text":"文章概览 前言包括控制电机舵机 电机 多想多做，发篇一作","categories":[],"tags":[{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"嵌入式积累","slug":"嵌入式积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF/"},{"name":"控制","slug":"控制","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%8E%A7%E5%88%B6/"}]},{"title":"【win32gui】控制win系统","slug":"library/python/【win32gui】控制win系统","date":"2022-12-31T11:03:01.000Z","updated":"2023-01-01T04:17:36.982Z","comments":true,"path":"2022/library/python/【win32gui】控制win系统/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90win32gui%E3%80%91%E6%8E%A7%E5%88%B6win%E7%B3%BB%E7%BB%9F/","excerpt":"文章概览","text":"文章概览 将窗口嵌到win下方任务栏1import win32gui 123456789m_hTaskbar = win32gui.FindWindow(&quot;Shell_TrayWnd&quot;, None)m_hBar = win32gui.FindWindowEx(m_hTaskbar, 0, &quot;ReBarWindow32&quot;, None)m_hMin = win32gui.FindWindowEx(m_hBar, 0, &quot;MSTaskSwWClass&quot;, None)b = win32gui.GetWindowRect(m_hBar) # 获取m_hBar窗口尺寸b为[左，上，右，下]的数组win32gui.MoveWindow(m_hMin, 0, 0, b[2] - b[0] - 200, b[3] - b[1], True)self.setGeometry(b[2] - b[0] - 200, 0, 200, b[3] - b[1])win32gui.SetParent(int(ui.winId()), m_hBar) # 设置任务栏为此窗口的父窗口 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"win32gui","slug":"win32gui","permalink":"https://zennnnnnnnnnnn.js.cool/tags/win32gui/"}]},{"title":"设置软件开机自启动","slug":"solved/设置软件开机自启动","date":"2022-12-31T11:01:42.000Z","updated":"2022-12-31T11:02:55.454Z","comments":true,"path":"2022/solved/设置软件开机自启动/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/","excerpt":"文章概览","text":"文章概览 打开 C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp ，把软件或快捷方式放进去 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"}]},{"title":"【psutil】检测电脑网速等","slug":"library/python/【psutil】检测电脑网速等","date":"2022-12-30T14:38:27.000Z","updated":"2023-01-08T10:02:10.615Z","comments":true,"path":"2022/library/python/【psutil】检测电脑网速等/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90psutil%E3%80%91%E6%A3%80%E6%B5%8B%E7%94%B5%E8%84%91%E7%BD%91%E9%80%9F%E7%AD%89/","excerpt":"文章概览","text":"文章概览 打算做一个能嵌入到win底栏的显示网速的，CSDN这篇，看到这篇心痒痒 官方文档 获取系统运行的进程和系统利用率 包括CPU、内存、磁盘、网络等的信息 最靠谱 获取网速psutil.net_io_counter([pernic])，当pernic为True时，则分开列出所有网卡的统计信息。否则数据均所有网卡为总和。 12345678910s1 = psutil.net_io_counters()time.sleep(1)s2 = psutil.net_io_counters()result1 = s2.bytes_sent - s1.bytes_sent # 上传result2 = s2.bytes_recv - s1.bytes_recv # 下载# 算出一秒的插值a = &#x27;↑&#x27; + str(&#x27;%.1f&#x27; % (result1 / 1024)) + &#x27; kb/s&#x27;b = &#x27;↓&#x27; + str(&#x27;%.1f&#x27; % (result2 / 1024)) + &#x27; kb/s&#x27; 获取cpu信息1cpu_percent = psutil.cpu_percent(interval=0.0, percpu=False) 获取内存占用量1mem_percent = psutil.virtual_memory().percent 网速显示助手已经做出来了，还有几点待改进 大小不会自动匹配，放到别人电脑里过大 cpu和内存有歧义，因为嵌到任务栏里，地方太小，就用的鼠标移到上面，会有悬浮提示框。但是鼠标需要先点在上面，才能出现悬浮框 偶尔闪退，不知为啥，只见过几次 颜色不会自动调整，有时突兀 有时数据过大，不变换单位导致显示不全 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"psutil","slug":"psutil","permalink":"https://zennnnnnnnnnnn.js.cool/tags/psutil/"}]},{"title":"【模块】OLED","slug":"library/嵌入式/模块/【模块】OLED","date":"2022-12-30T02:46:17.000Z","updated":"2022-12-30T03:01:42.174Z","comments":true,"path":"2022/library/嵌入式/模块/【模块】OLED/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91OLED/","excerpt":"文章概览","text":"文章概览 oled有 i2c 或 spi 通信的，若为 spi 使用 Transmit only Master 模式 引脚 USER LABLE DO SPI_SCK D1 SPI_MOSI RES OLED_RES DC OLED_DC CS OLED_CS 设置对应USER LABLE即可直接使用库 初始化 1234OLED_Init();OLED_ColorTurn (0);//0正常显示，1 反色显示OLED_DisplayTurn(0);//0正常显示 1 屏幕翻转显示OLED_Refresh(); 每次绘制后，需要 refresh 一下 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"OLED","slug":"OLED","permalink":"https://zennnnnnnnnnnn.js.cool/tags/OLED/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}]},{"title":"【嵌入式积累】阅读寄存器手册","slug":"library/嵌入式/积累/【嵌入式积累】阅读寄存器手册","date":"2022-12-29T15:16:43.000Z","updated":"2022-12-29T15:33:20.114Z","comments":true,"path":"2022/library/嵌入式/积累/【嵌入式积累】阅读寄存器手册/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A7%AF%E7%B4%AF/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF%E3%80%91%E9%98%85%E8%AF%BB%E5%AF%84%E5%AD%98%E5%99%A8%E6%89%8B%E5%86%8C/","excerpt":"文章概览","text":"文章概览 为了移植mpu6050程序到mpu6500上，总算是亲身对照寄存器看了。不过头等大事——寄存器操作都需要做什么，还是没搞懂 陀螺仪寄存器库操作 初始化 | WHO_AM_I | PWR_MGMT_1 | SMPLRT_DIV | ACCEL_CONFIG，GYRO_CONFIG || ——————— | —————— | ———————————— | —————————————— || 获取device ID | 重置一切设置 | 设置分频系数，即采样频率 | 设置加速度和角度的采样上下限 | 读取数据 | ACCEL_XOUT_H | GYRO_XOUT_H | TEMP_OUT_H || —————— | —————- | ————— || 加速度 | 角度 | 温度 | 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"积累","slug":"积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A7%AF%E7%B4%AF/"},{"name":"寄存器","slug":"寄存器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"}]},{"title":"【模块】陀螺仪","slug":"library/嵌入式/模块/【模块】陀螺仪","date":"2022-12-29T15:12:44.000Z","updated":"2022-12-29T15:52:19.734Z","comments":true,"path":"2022/library/嵌入式/模块/【模块】陀螺仪/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E9%99%80%E8%9E%BA%E4%BB%AA/","excerpt":"文章概览","text":"文章概览 白嫖到三种模块，其实很相似：mpu6050、mpu6500、gy25 mpu6050i2c通信 测量三轴加速度，三轴角度，温度 详见【HAL库】i2c通信（mpu6050） mpu6500支持 i2c 和 spi 通信，通信速度比 mpu6050 慢8倍 其他同 mpu6050 mpu6050 的例程可以通用 gy25 支持 i2c 或 串口 通信 串口传输数据格式 [0] [1:6] [7] 0xAA 0x55 帧头 每两位为一个数据，依次是航向、俯仰、翻滚 帧尾 发送命令 命令 含义 0xA5+0x51 查询模式，直接返回角度值，需每次读取都发送 0xA5+0x52 自动模式，直接返回角度值，只需要初始化时发一次 0xA5+0x53 自动模式，ASCII 码输出，便于直接电脑串口助手查看 0xA5+0x54 校正模式，校正俯仰横滚角0 度，需要保持水平时候发送 0xA5+0x55 校正模式，校正航向0 度，航向任意角度清零 不知怎的，没搞懂我的串口调试助手发送16进制 若用 i2c 通信模式，也可以直接用 mpu6050 的库 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"陀螺仪","slug":"陀螺仪","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%99%80%E8%9E%BA%E4%BB%AA/"}]},{"title":"【HAL库】i2c通信（mpu6050）","slug":"library/嵌入式/软件/【HAL库】笔记/【HAL库】i2c通信（mpu6050）","date":"2022-12-29T02:11:02.000Z","updated":"2023-01-07T12:16:53.074Z","comments":true,"path":"2022/library/嵌入式/软件/【HAL库】笔记/【HAL库】i2c通信（mpu6050）/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91i2c%E9%80%9A%E4%BF%A1%EF%BC%88mpu6050%EF%BC%89/","excerpt":"文章概览","text":"文章概览 i2c一种通信方式 特点未知，用两根线，SDA，SCK HAL库常用代码 读写 123456789#define WHO_AM_I_REG 0x75#define PWR_MGMT_1_REG 0x6B#define MPU6050_ADDR 0xD0const uint16_t i2c_timeout = 100;uint8_t check;uint8_t data;// i2c | 设备地址 | 寄存器地址 | 寄存器长度 | 数据起始地址 | 数据长度 | 超时时间HAL_I2C_Mem_Read(&amp;hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &amp;check, 1, i2c_timeout);HAL_I2C_Mem_Write(&amp;hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &amp;Data, 1, i2c_timeout); ​ 若修改来自非库函数的源代码，也就是把他们的 I2C 读写换成这个函数，以及删掉无用初始化 查找当前 I2C 设备地址 1234567for(uint8_t i=0;i&lt;255;i++) if(HAL_I2C_IsDeviceReady(&amp;hi2c1, i, 1, 1000)==HAL_OK)&#123; printf(&quot;%d\\r\\n&quot;, i); break; &#125; else printf(&quot;wait&quot;); mpu6050陀螺仪+加速度计+温度计 i2c通信速度高达400KHz 自带FIFO（不清楚） 使用方法​ 接线时只需要接两根数据线和 vcc，gnd 共四根线即可。 定义一个结构体用于接收 1MPU6050_t mpu6050data; 初始化 12345678while(MPU6050_Init(&amp;hi2c1)==1);// 等待几秒printf (&quot;****** MPU6050 Test 3s ******\\r\\n&quot;);HAL_Delay (1000);printf (&quot;****** MPU6050 Test 2s ******\\r\\n&quot;);HAL_Delay (1000);printf (&quot;****** MPU6050 Test 1s ******\\r\\n&quot;);HAL_Delay (1000); 读取 123MPU6050_Read_Accel(&amp;hi2c1,&amp;mpu6050data);MPU6050_Read_Gyro(&amp;hi2c1,&amp;mpu6050data);MPU6050_Read_Temp(&amp;hi2c1,&amp;mpu6050data); 补充 芯片内置 dmp，直接可以帮你滤波，甚至识别运动。 模块封装都会引出很多引脚，平时只用4个 XDA，XCL是考虑到使用芯片内置 dmp 计算时，可以用9轴（加上磁场传感器），其中磁场传感器的外界接口就是这俩，用 i2c通信。（很少用） AD0 设置 i2c 通信地址，接VCC时为 0x69，否则 0x68（一般悬空） INT 中断输出引脚（不知道咋用） 阅读寄存器手册 i2c 通信HAL库直接指令 123456789#define WHO_AM_I_REG 0x75#define PWR_MGMT_1_REG 0x6B#define MPU6050_ADDR 0xD0const uint16_t i2c_timeout = 100;uint8_t check;uint8_t data;// i2c | 设备地址 | 寄存器地址 | 寄存器长度 | 数据起始地址 | 数据长度 | 超时时间HAL_I2C_Mem_Read(&amp;hi2c1, MPU6050_ADDR, WHO_AM_I_REG, 1, &amp;check, 1, i2c_timeout);HAL_I2C_Mem_Write(&amp;hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &amp;Data, 1, i2c_timeout); 陀螺仪寄存器库操作 初始化 | WHO_AM_I | PWR_MGMT_1 | SMPLRT_DIV | ACCEL_CONFIG，GYRO_CONFIG || ——————— | —————— | ———————————— | —————————————— || 获取device ID | 重置一切设置 | 设置分频系数，即采样频率 | 设置加速度和角度的采样上下限 | 读取数据 | ACCEL_XOUT_H | GYRO_XOUT_H | TEMP_OUT_H || —————— | —————- | ————— || 加速度 | 角度 | 温度 | 数据处理 卡尔曼滤波：把测量数据（当前角度）和预测数据（上次角度+当前加速度*时间间隔）加权求和（系数和唯一） 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"HAL库","slug":"HAL库","permalink":"https://zennnnnnnnnnnn.js.cool/tags/HAL%E5%BA%93/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"i2c","slug":"i2c","permalink":"https://zennnnnnnnnnnn.js.cool/tags/i2c/"},{"name":"通信","slug":"通信","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%80%9A%E4%BF%A1/"}]},{"title":"免费下载网页视频","slug":"library/快捷键和常用指令/免费下载视频","date":"2022-12-28T11:15:59.000Z","updated":"2022-12-30T14:24:36.032Z","comments":true,"path":"2022/library/快捷键和常用指令/免费下载视频/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/","excerpt":"尝试了很多方案，包括 m3u8，you-get，网页插件，最推荐 m3u8","text":"尝试了很多方案，包括 m3u8，you-get，网页插件，最推荐 m3u8 you-get​ 是python的一个库，可以在cmd中运行，运行命令为 you-get [url] ​ 测试能成功下载 bilibili 和 youtube 的视频，但是下载 pornhub 失败 m3u8​ m3u8 是一种视频格式，专门在网页上加载视频的。 获取m3u8 获取视频m3u8 刷新界面，开发人员工具-&gt;网络 中加载的找到此格式的请求（master开头的是主要的，其他的可能是动图或预览），复制其请求头连接，用 m3u8下载器 下载 由m3u8下载视频用软件 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"下载视频","slug":"下载视频","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/"}]},{"title":"【HAL库】spi通信（nrf24l01）","slug":"library/嵌入式/软件/【HAL库】笔记/【HAL库】spi通信（nrf24l01）","date":"2022-12-27T14:12:34.000Z","updated":"2022-12-28T07:55:58.240Z","comments":true,"path":"2022/library/嵌入式/软件/【HAL库】笔记/【HAL库】spi通信（nrf24l01）/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91spi%E9%80%9A%E4%BF%A1%EF%BC%88nrf24l01%EF%BC%89/","excerpt":"文章概览","text":"文章概览 spi通信主要三根线：MISO，MOSI，SCK 此外还有片选线 双工通信：两根线，MISO，MOSI，分别负责发送和接收 同步通信：一根时钟线，SCK nrf24l01很通用的，航模遥控器、鼠标、耳机、音响等都有应用 最便宜的几块钱，传输距离50m；加功率增益的，加天线的，20几块，传输距离能到1000m 参数 2.4G（与蓝牙，wifi，5g等无线传输技术并列） 传输速度 10mbps（即Mb per second，1Mbps=0.125MB/s，因为数据传输多用bit单位，数据存储多用byte单位，1 Byte = 8 bit；即网速和你下载速度不是一个单位） 通信距离：50-1000m，这个取决于电路的设计，nrf24l01只是芯片 库使用方法 设置接收或发送模式 NRF24L01_RX_Mode(); 或 NRF24L01_TX_Mode(); 收发数据可以先定义一个 uint8_t 类型的数组，然后用 NRF24L01_RxPacket(rxdata) 或 NRF24L01_TxPacket(txdata) ，返回值为 0 表示成功；也可以用更底层的发送字节或发送位。 检查是否可用 while(NRF24L01_Check()); 不可用卡死 注意要打开DMA，不然不行 不知道定义接收或发送模式是啥意思 不知道咋配对 不知道咋跟遥控器对码 感想这是我第一次用别人写的代码库，感触良多。 ​ 首先我看的哔哩哔哩看了一个教程讲的很详细，他用的库是在正点原子讲解 nrf24l01 基础上改写的，还保留有多余的函数和正点原子的注释。而且他讲了半天寄存器也没说怎么用这个库。我直接搜索这个模块，甚至在正点原子的用户名下，都搜索不到。所以还是干货难找呀！还得是系统教程教的好，自媒体分享的不行，我直接查CSDN的资料，多数还都是直接复制数据手册呀，而且残缺不全，英语翻译蹩脚。 ​ 然后正点原子的代码也得改，还是不咋会啊，自己照着数据手册写寄存器也不咋会。 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"HAL库","slug":"HAL库","permalink":"https://zennnnnnnnnnnn.js.cool/tags/HAL%E5%BA%93/"},{"name":"stm","slug":"stm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/stm/"},{"name":"spi通信","slug":"spi通信","permalink":"https://zennnnnnnnnnnn.js.cool/tags/spi%E9%80%9A%E4%BF%A1/"},{"name":"nrf24l01","slug":"nrf24l01","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nrf24l01/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"}]},{"title":"modelsim的-novopt优化相关报错","slug":"solved/modelsim的-novopt优化相关报错","date":"2022-12-26T14:58:03.000Z","updated":"2022-12-26T15:01:37.383Z","comments":true,"path":"2022/solved/modelsim的-novopt优化相关报错/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/modelsim%E7%9A%84-novopt%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/","excerpt":"文章概览","text":"文章概览 找到 modelsim.ini 将 VoptFlow 参数修改为1，重新打开项目 http://t.csdn.cn/LOkwM 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"FPGA","slug":"FPGA","permalink":"https://zennnnnnnnnnnn.js.cool/tags/FPGA/"},{"name":"modelsim","slug":"modelsim","permalink":"https://zennnnnnnnnnnn.js.cool/tags/modelsim/"}]},{"title":"【FPGA】仿真和烧录","slug":"library/课内知识/【FPGA】仿真和烧录","date":"2022-12-26T13:42:48.000Z","updated":"2022-12-26T15:03:40.112Z","comments":true,"path":"2022/library/课内知识/【FPGA】仿真和烧录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90FPGA%E3%80%91%E4%BB%BF%E7%9C%9F%E5%92%8C%E7%83%A7%E5%BD%95/","excerpt":"文章概览","text":"文章概览 vivado 可以仿真和烧录，但是体积有 100G 大。 可以用 modelsim + 国产软件 TD 代替，分别负责仿真和烧录 modelsim 仿真参见视频教程 编写 .v 和 .vt 文件，其中 .vt 文件包含仿真参数 添加对应文件，编译，运行仿真 .vt 文件编写123456789101112131415161718192021222324252627282930313233// 结构说明`timescale 1 ps/ 1 ps //设定仿真步长module first_vt(); // module后面接文件名，比如此文件名为first_vt.vtreg clk; // .v文件里input对应regreg rst; wire clkout; // .v文件里output对应wir// 首先是.v文件名；后面i1不要改，是变量总名字；下面格式都那样first i1 ( .clk(clk), .clkout(clkout), .rst(rst));// 初始化变量值initial begin rst=1; //模拟复位信号按下 #20 rst=0; //#20 = 延迟50ns后按键松开 #20 rst=1; #8000 $stop; // 终止仿真 end// 设置时钟类型的always begin #50 clk=1; //生成时钟信号，#50 = 延迟50ns #50 clk=0; end endmodule 仿真操作 新建项目： file-&gt;new-&gt;project 新建或导入 .v 和 .vt 文件 编译：在project栏右键文件-&gt;compile-&gt;compile all 编译后，两文件身上有绿色对号，可以在 library 栏看到新出现了 work，点开有刚编译文件 仿真：在libary栏右键.vt文件-&gt;simulate 注意：.v 和 .vt 文件名不可一样 vivado烧录 写好 .v 文件 配置引脚Layout-&gt;I/O Planning 生成原理图 左侧Run Synthesis 生成电路图 左侧Run Implementation 生成.bit文件 Generate Bitstream 烧录 插上板子，连接 左侧与Generate Bitstream下面的Open Hardware Manager-&gt;open target-&gt;auto connect 选中 .bit 文件 Open Hardware Manager-&gt;Program Device（文件位置一般为 project/xxx.runs/impl/xxx.bit）点击 program 多想多做，发篇一作","categories":[],"tags":[{"name":"FPGA","slug":"FPGA","permalink":"https://zennnnnnnnnnnn.js.cool/tags/FPGA/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"课内知识","slug":"课内知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/"}]},{"title":"【pyinstaller】打包python文件为exe","slug":"library/python/【pyinstaller】打包python为exe","date":"2022-12-25T03:56:41.000Z","updated":"2022-12-25T04:27:42.965Z","comments":true,"path":"2022/library/python/【pyinstaller】打包python为exe/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90pyinstaller%E3%80%91%E6%89%93%E5%8C%85python%E4%B8%BAexe/","excerpt":"文章概览","text":"文章概览 比 nuitka 语法简单，方便导入第三方库，速度也不算慢，亲测2min以内 官网 打包语法在 cmd 中运行 pyinstaller -F -w main.py -F：输出单个exe文件，否则还有一堆 .dll 啥的，必须一起运行才行 -w：取消伴随打开的cmd窗口 运行后会生成一个 .spec 文件，以及 build和 dist 文件夹 添加第三方库多数第三方库能运行就能添加 若存在库没被识别到，可以在 .spec 文件里的 hiddenimport 添加第三方库名字 重新打包，运行pyinstaller xxx.spec 打包 pybluez 库时，发生奇怪报错，始终未能解决 打包多个 .py 文件在 .spec 文件里的 pathex 添加所有文件路径 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"打包","slug":"打包","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%89%93%E5%8C%85/"},{"name":"pyinstaller","slug":"pyinstaller","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pyinstaller/"}]},{"title":"【nuitka】打包python文件为exe","slug":"library/python/【nuitka】打包python为exe","date":"2022-12-25T03:43:47.000Z","updated":"2022-12-25T04:30:03.565Z","comments":true,"path":"2022/library/python/【nuitka】打包python为exe/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90nuitka%E3%80%91%E6%89%93%E5%8C%85python%E4%B8%BAexe/","excerpt":"文章概览","text":"文章概览 与 pyinstaller 不同，不能打包出单个exe文件，必须要在 .dll 等文件环境中运行 官网 知乎一大堆长篇大论，相互引用，云里雾里 打包语法nuitka --standalone --show-memory --show-progress --plugin-enable=pyqt5 --output-dir=out --windows-icon-from-ico=bitbug_favicon.ico mark.py standalone：生成独立exe --plugin-enable=pyqt5：导入pyqt5 好像有其他第三方库，也会自动导入 添加文件暂时不会 添加第三方库若有未自动导入的，可以观察运行报错，从环境中复制文件，手动添加 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"nuitka","slug":"nuitka","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nuitka/"},{"name":"打包","slug":"打包","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%89%93%E5%8C%85/"}]},{"title":"【pyqt】学习","slug":"library/python/【pyqt】学习","date":"2022-12-23T09:08:44.000Z","updated":"2023-01-01T04:16:54.471Z","comments":true,"path":"2022/library/python/【pyqt】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90pyqt%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"python 库 pyqt，方便地设计 GUI","text":"python 库 pyqt，方便地设计 GUI QT官网，里面找到python的，我还不是很会看官方文档 代码编写核心思路之前用过 pygame，再用 pyqt 感觉编程思路有很大不同 页面所有内容在一个 class 里，每项功能都要向上继承，进行修改 运行页面 123456if __name__ == &#x27;__main__&#x27;: import sys app = QApplication(sys.argv) demo = Demo() demo.show() sys.exit(app.exec_()) 入门示例123456789101112131415class Demo(QWidget): def __init__(self, parent=None): super(Demo, self).__init__(parent) self.setWindowTitle(&quot;first&quot;) self.resize(1600, 1400) # 设置窗口大小if __name__ == &#x27;__main__&#x27;: import sys app = QApplication(sys.argv) demo = Demo() demo.show() sys.exit(app.exec_()) 外观样式显示1234567891011# 设置：窗口无边框、窗口置顶、指定窗口类型为工具self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)# 设置窗口背景透明self.setAttribute(Qt.WA_TranslucentBackground)# 设置透明度(0~1)self.setWindowOpacity(0.9)# 设置鼠标为手状self.setCursor(Qt.PointingHandCursor) WindowFlags给窗口添加指定功能或属性 Qt::CustomizeWindowHint //关闭默认窗口标题提示 Qt::WindowTitleHint //为窗口修饰一个标题栏 Qt::WindowSystemMenuHint //为窗口修饰一个窗口菜单系统 Qt::WindowMinimizeButtonHint //为窗口添加最小化按钮 Qt::WindowMaximizeButtonHint //为窗口添加最大化按钮 Qt::WindowMinMaxButtonsHint //为窗口添加最大化和最小化按钮 Qt::WindowCloseButtonHint //窗口只有一个关闭按钮 Qt::WindowContextHelpButtonHint Qt::MacWindowToolBarButtonHint Qt::WindowFullscreenButtonHint Qt::BypassGraphicsProxyWidget Qt::WindowShadeButtonHint Qt::WindowStaysOnTopHint //总在最上面的窗口,置前 Qt::WindowStaysOnBottomHint Qt::WindowOkButtonHint Qt::WindowCancelButtonHint Qt::WindowTransparentForInput 多个之间用 | 连接 形状位置修改1234# (x,y)零点为左上角，方向为x右y下self.resize(w,h) # 设置大小self.move(x,y) # 设置位置self.setGeometry(x,y,w,h) 同时设置位置和大小 设置样式12self.setStyleSheet(&quot;QLabel&#123;font-size:25px;font-weight:normal;font-family:Microsoft JhengHei;&#125;\\ QWidget&#123;background-color:#d6e0f6;&#125;&quot;) 鼠标移动到组件上，显示悬浮提示框1self.setToolTip(&quot;1234&quot;) 添加右键菜单1234567891011121314151617181920212223 # 声明在groupBox创建右键菜单 self.setContextMenuPolicy(Qt.CustomContextMenu) self.customContextMenuRequested.connect(self.create_rightmenu) # 连接到菜单显示函数 self.contextMenu = QMenu(self) self.actionA = self.contextMenu.addAction(&#x27;关闭&#x27;) self.actionB = self.contextMenu.addAction(&#x27;设置&#x27;) # 将动作与处理函数相关联 # 这里为了简单，将所有action与同一个处理函数相关联， # 当然也可以将他们分别与不同函数关联，实现不同的功能 self.actionA.triggered.connect(self.actionHandlerA) self.actionB.triggered.connect(self.actionHandlerB) # 创建右键菜单函数 def create_rightmenu(self): # 菜单对象 self.contextMenu.move(QtGui.QCursor().pos()) self.contextMenu.show() def actionHandlerA(self): os._exit(0)def actionHandlerB(self): print(&#x27;设置&#x27;) 将窗口嵌到win下方任务栏1import win32gui 123456789m_hTaskbar = win32gui.FindWindow(&quot;Shell_TrayWnd&quot;, None)m_hBar = win32gui.FindWindowEx(m_hTaskbar, 0, &quot;ReBarWindow32&quot;, None)m_hMin = win32gui.FindWindowEx(m_hBar, 0, &quot;MSTaskSwWClass&quot;, None)b = win32gui.GetWindowRect(m_hBar) # 获取m_hBar窗口尺寸b为[左，上，右，下]的数组win32gui.MoveWindow(m_hMin, 0, 0, b[2] - b[0] - 200, b[3] - b[1], True)self.setGeometry(b[2] - b[0] - 200, 0, 200, b[3] - b[1])win32gui.SetParent(int(ui.winId()), m_hBar) # 设置任务栏为此窗口的父窗口 加入触发功能触发功能的函数输入都要加 event 鼠标点击1234def mousePressEvent(self, event): if event.buttons() == PyQt5.QtCore.Qt.LeftButton: # 左键按下 s = event.windowPos() print(s.x(), s.y()) 绘制事件1234567891011121314from PyQt5.QtCore import Qt, QRectfrom PyQt5.QtGui import * # QPainter QPixmap QPen...def paintEvent(self, event): painter = QPainter(self) # 开启绘图 img = QPixmap(&#x27;bitbug_favicon.ico&#x27;) painter.drawPixmap(0, 0, self.size, self.size, img) # 画图像 painter.setPen(QPen(Qt.red, 4)) painter.drawRect(QRect(0, 0, 200, 200)) self.update() # 不加这个不会更新 窗口关闭事件1234567891011def closeEvent(self, event): reply = QMessageBox.question(self, &#x27;quit&#x27;, &quot;是否要退出&quot;, QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes) if reply == QMessageBox.Yes: self.close() event.accept() else: event.ignore() 循环事件用这个整循环时间的定时器最好 流程为：定义一个类，把类连接到主类的触发函数 1from PyQt5.QtCore import pyqtSignal, QThread 12345678910111213class WorkThread(QThread): # 实例化一个信号对象，类变量，需要定义在函数体外 trigger = pyqtSignal(str) # ql 这里的str需要修改为指定类型 def __init__(self): super().__init__() def run(self): # 重写QThread 的run 函数 while True: # 信号发出通知面板更新 self.trigger.emit(&#x27;qwer&#x27;) # ql 传递数据 time.sleep(3) # ql 设置周期时间 123456 self.work = WorkThread() self.work.start() self.work.trigger.connect(self.display)def display(self, str): print(&#x27;str&#x27;) 其他强制关闭窗口只有这个最好用 1os._exit(0) ui编写pyqt 有一个附加软件 qt designer ，可以用拖块方法设计gui，并且可以导出.ui 文件，再通过PYUIC转成 .py文件，可以被引用。 组件QLabel标签12hello_label = QtWidgets.QLabel(hello_widget) # 添加一个标签hello_label.setText(&quot;hello wrold&quot;) # 设置标签文字 QTextEdit输入框1234self.textEdit = QTextEdit(&quot;请看这里&quot;, self) # 添加一个输入框self.textEdit.setText(&quot;请输入&quot;) # 设置输入框文字self.textEdit.setPlaceholderText(&#x27;你不输入就一直显示这个&#x27;) # 设置输入框背景文字get_num = int(self.textEdit.toPlainText()) # 获取输入框文字 QPushButton按钮12self.button = QPushButton(&#x27;请点点我&#x27;, self) # 添加按钮self.button.clicked.connect(lambda: my_func()) # 按下按钮，将会执行my_func函数 QMessageBox提示框12msg_box = QMessageBox(QMessageBox.Warning, &#x27;警告&#x27;, &#x27;请稍后再试&#x27;)msg_box.exec_() 12345reply = QMessageBox.question(self, &#x27;quit&#x27;, &quot;是否要保存&quot;, QMessageBox.Yes | QMessageBox.No, QMessageBox.No) QFileDialog对话框选择文件，注意分隔两种类型文件需要用 ；； 1self.filelist = QFileDialog.getOpenFileNames(self, &quot;多文件选择&quot;, &quot;/&quot;, &quot;所有文件 (*);;文本文件 (*.txt)&quot;)[0] QProgressbar进度条引用布局主要就是 QWidget 嵌进去，方法有很多 类初始化那部分全改掉 1234class Ui_Dialog(QWidget): def __init__(self,parent=None): super(Ui_Dialog, self).__init__(parent) self.setupUi(self) 引用类时直接 123456if __name__==&quot;__main__&quot;: import sys app = QtWidgets.QApplication(sys.argv) ui = Ui_Dialog() ui.show() sys.exit(app.exec_()) 新建文件 import 他 12345678910111213141516171819import sys#从转换的.py文件内调用类from FirstMainWin import Ui_MainWindowfrom PyQt5 import QtWidgets class myWin(QtWidgets.QWidget, Ui_MainWindow): def __init__(self): super(myWin, self).__init__() self.setupUi(self) if __name__==&quot;__main__&quot;: app=QtWidgets.QApplication(sys.argv) Widget=myWin() Widget.show() sys.exit(app.exec_()) 在底部这样引用类 12345678if __name__==&quot;__main__&quot;: import sys app = QtWidgets.QApplication(sys.argv) widget = QtWidgets.QWidget() ui = Ui_MainWindow() ui.setupUi(widget) widget.show() sys.exit(app.exec_()) 多想多做，发篇一作","categories":[],"tags":[{"name":"前端","slug":"前端","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%89%8D%E7%AB%AF/"},{"name":"pyqt","slug":"pyqt","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pyqt/"}]},{"title":"【pybluez】python控制PC蓝牙","slug":"library/python/【pybluez】python控制PC蓝牙","date":"2022-12-23T08:32:27.000Z","updated":"2022-12-25T16:11:23.950Z","comments":true,"path":"2022/library/python/【pybluez】python控制PC蓝牙/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/python/%E3%80%90pybluez%E3%80%91python%E6%8E%A7%E5%88%B6PC%E8%93%9D%E7%89%99/","excerpt":"pybluez库可以像操纵串口一样控制电脑自带蓝牙，可以搜索周围蓝牙、连接并收发数据。","text":"pybluez库可以像操纵串口一样控制电脑自带蓝牙，可以搜索周围蓝牙、连接并收发数据。 对我来说能用电脑蓝牙和 HC05 这样的蓝牙模块连接了，之前一直觉得很奇怪，因为用蓝牙通信都是两个蓝牙模块，一个插电脑并用串口调试助手连接，另一个连接小车或机器人。现在可以做一个蓝牙调试助手了。 安装过程略 搜索蓝牙​ 保证自己开启蓝牙后，nearby_devices = bluetooth.discover_devices(lookup_names=True)，返回附近可连接蓝牙的地址和名字（返回数组，里面是元组） 通过RFCOMM方式进行通信（客户端）操作方式类似 socket 连接蓝牙 实例化一个对象 sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM) 提供连接地址并连接 sock.connect((target_address, 1)) 收发数据 发送数据 sock.send(&quot;xxxxxxx&quot;.encode()) 接收数据 data = sock.recv(1024) 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980import datetimeimport time# win10 安装蓝牙依赖包 https://blog.csdn.net/weixin_38676276/article/details/113027104import bluetoothclass BluetoothConnection: def __init__(self): # 是否找到到设备 self.find = False # 附近蓝牙设备 self.nearby_devices = None def find_nearby_devices(self): print(&quot;Detecting nearby Bluetooth devices...&quot;) # 可传参数 duration--持续时间 lookup-name=true 显示设备名 # 大概查询10s左右 # 循环查找次数 loop_num = 3 i = 0 try: self.nearby_devices = bluetooth.discover_devices(lookup_names=True, duration=5) while self.nearby_devices.__len__() == 0 and i &lt; loop_num: self.nearby_devices = bluetooth.discover_devices(lookup_names=True, duration=5) if self.nearby_devices.__len__() &gt; 0: break i = i + 1 time.sleep(2) print(&quot;No Bluetooth device around here! trying again &#123;&#125;...&quot;.format(str(i))) if not self.nearby_devices: print(&quot;There&#x27;s no Bluetooth device around here. Program stop!&quot;) else: print(&quot;&#123;&#125; nearby Bluetooth device(s) has(have) been found:&quot;.format(self.nearby_devices.__len__()), self.nearby_devices) # 附近所有可连的蓝牙设备s except Exception as e: # print(traceback.format_exc()) # 不知是不是Windows的原因，当附近没有蓝牙设备时，bluetooth.discover_devices会报错。 print(&quot;There&#x27;s no Bluetooth device around here. Program stop(2)!&quot;) def find_target_device(self, target_name, target_address): self.find_nearby_devices() if self.nearby_devices: for addr, name in self.nearby_devices: if target_name == name and target_address == addr: print(&quot;Found target bluetooth device with address:&#123;&#125; name:&#123;&#125;&quot;.format(target_address, target_name)) self.find = True break if not self.find: print(&quot;could not find target bluetooth device nearby. &quot; &quot;Please turn on the Bluetooth of the target device.&quot;) def connect_target_device(self, target_name, target_address): self.find_target_device(target_name=target_name, target_address=target_address) if self.find: print(&quot;Ready to connect&quot;) sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM) try: sock.connect((target_address, 1)) print(&quot;Connection successful. Now ready to get the data&quot;) data_dtr = &quot;&quot; while True: # sock.send(&quot;qwer&quot;.encode()) # print(&quot;send qwer&quot;) data = sock.recv(1024) data_dtr += data.decode() if &#x27;\\n&#x27; in data.decode(): # data_dtr[:-2] 截断&quot;\\t\\n&quot;,只输出数据 print(datetime.datetime.now().strftime(&quot;%H:%M:%S&quot;) + &quot;-&gt;&quot; + data_dtr[:-2]) data_dtr = &quot;&quot; except Exception as e: print(&quot;connection fail\\n&quot;, e) sock.close()if __name__ == &#x27;__main__&#x27;: target_name = &quot;=car&quot; target_address = &#x27;18:A3:25:02:6B:B6&#x27; BluetoothConnection().connect_target_device(target_name=target_name, target_address=target_address) 其他不知怎么弄服务端，也不明白 此外还有通过L2CAP方式进行通信，不太清楚这两种都是啥，后续再补 我已制作了 “蓝牙调试助手” 可以使用，有些缺点： 连接未成功时，点击发送会因错闪退 连接失败或成功后都无法重新连接或连接其他蓝牙 程序开启要等好久才能搜索到蓝牙，且没有提示 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"pybluez","slug":"pybluez","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pybluez/"},{"name":"蓝牙","slug":"蓝牙","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%93%9D%E7%89%99/"}]},{"title":"【HAL库】pwm波","slug":"library/嵌入式/软件/【HAL库】笔记/【HAL库】pwm波","date":"2022-12-23T04:22:13.000Z","updated":"2022-12-28T07:06:17.388Z","comments":true,"path":"2022/library/嵌入式/软件/【HAL库】笔记/【HAL库】pwm波/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91pwm%E6%B3%A2/","excerpt":"文章概览","text":"文章概览 cubemx设置 ​ 左侧Timers里选择TIM设置输出PWM，中间选择channel点开选择PWM Generation CHx，右面对应引脚就会亮起。 ​ 设置PWM输出频率通过下面的Prescaler（PSC）和Counter Period（ARR） F_{pwm}=\\frac{主频}{(PSC+1)(ARR+1)}其中主频就是在Clock Configuration中设置的 控制舵机或电调设置频率若pwm波频率不匹配，相差过大，可能不被识别。 一般控制舵机或电调频率为 50Hz，主频为72MHz，用上述公式计算可取 PSC=7200-1，ARR=200-1 设置占空比__HAL_TIM_SetCompare(&amp;htim4,TIM_CHANNEL_1,[脉宽的绝对时长]); 注意最后一项是脉宽的绝对时长，并不是占空比，一般都是用 5~25 对应 0.5~2.5ms 的脉宽来控制舵机的角度 0~180°。 电调行程初始化pwm 频率为 50Hz 先不上电，给脉冲时长 2ms，一段时间后上电，然后改变脉冲时长为 1ms，电调会长滴，之后即可用 1.1~2ms的脉冲控制电机 控制蜂鸣器有源蜂鸣器只是用来警报的，即上电就叫；无源蜂鸣器才能控制音调 用周期控制音调，音调与占空比无关 音符 对应频率（Hz） 半周期时长（us） 1 523 956 2 587 851.5 3 659 758.5 4 698 716 5 784 637.5 6 880 568 7 988 506 对于这种频率不高的，用pwm改变频率就有另一种方法！——用延时手动控制 延时函数 123456789void delay_us(uint16_t time)&#123; uint16_t i=0; while(time--) &#123; i=10; while(i--) ; &#125;&#125; 怎么用蜂鸣器模仿人声，或者演奏和弦？怎么调pwm频率？皆不知 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"HAL库","slug":"HAL库","permalink":"https://zennnnnnnnnnnn.js.cool/tags/HAL%E5%BA%93/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"stm32cubemx","slug":"stm32cubemx","permalink":"https://zennnnnnnnnnnn.js.cool/tags/stm32cubemx/"}]},{"title":"【HAL库】串口通信","slug":"library/嵌入式/软件/【HAL库】笔记/【HAL库】串口通信","date":"2022-12-23T03:59:35.000Z","updated":"2023-01-07T13:44:38.322Z","comments":true,"path":"2022/library/嵌入式/软件/【HAL库】笔记/【HAL库】串口通信/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/","excerpt":"文章概览","text":"文章概览 cubemx配置点开异步通信，对应引脚会亮起，RXD和TXD 打印重定义 在usart.h对应位置添加#include&lt;stdio.h&gt; 123/* USER CODE BEGIN Includes */#include &lt;stdio.h&gt;/* USER CODE END Includes */ 在usart.c对应位置添加重定义 123456789/* USER CODE BEGIN 0 */int fputc(int ch, FILE *f)&#123; HAL_UART_Transmit(&amp;huart1, (uint8_t *)&amp;ch, 1, 0xffff); return ch;&#125;/* USER CODE END 0 */ 之后printf()就是在串口输出 千万别忘了开启 use MicroLIB 没开启这个，串口无反应 接收：中断回调 点开 NVIC 在``函数 存在问题，函数中执行命令会导致只能运行一次 DMA重新试一下 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"HAL库","slug":"HAL库","permalink":"https://zennnnnnnnnnnn.js.cool/tags/HAL%E5%BA%93/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"stm32cubemx","slug":"stm32cubemx","permalink":"https://zennnnnnnnnnnn.js.cool/tags/stm32cubemx/"}]},{"title":"【博客】搭建记录","slug":"library/frontend/【博客】搭建记录","date":"2022-12-21T06:34:23.000Z","updated":"2022-12-22T07:56:31.139Z","comments":true,"path":"2022/library/frontend/【博客】搭建记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/frontend/%E3%80%90%E5%8D%9A%E5%AE%A2%E3%80%91%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 github的cname将你的 用户名.github.io 指向你自己的域名 willin/js.cool: 为国人开源项目提供免费的子域名（自 2020 年 8 月起），现在支持 Vercel 啦！ (github.com) 将 vue 部署到 github pages 上设置步骤 安装 gh-pages : npm install 在本地 vue 项目的 vue.config.js 添加 publicPath: &#39;./&#39; 在 package.json 添加 &quot;deploy&quot;: &quot;npm run build &amp;&amp; gh-pages -d dist&quot; 和 &quot;homepage&quot;: &quot;https://你的账户名.github.io/你的项目名&quot; 部署步骤 npm run build ，生成dist文件夹 npm rum deploy ​ 这样就上传到 github 的对应项目中, 且会新创建一个分支 gh-pages , 在 pages 界面设置分支。 多想多做，发篇一作","categories":[],"tags":[{"name":"博客","slug":"博客","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"前端","slug":"前端","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"数据处理","slug":"library/数学建模/数据处理","date":"2022-12-20T14:44:17.000Z","updated":"2022-12-21T10:10:03.064Z","comments":true,"path":"2022/library/数学建模/数据处理/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/","excerpt":"文章概览","text":"文章概览 pandas处理excel1234567891011121314151617181920212223242526272829303132333435363738#------------------读取------------------------import pandas as pdfile_path = r&#x27;first.xlsx&#x27;data = pd.read_excel(file_path, sheet_name = &quot;Sheet1&quot;) # sheet_name不指定时默认返回全表数据# 打印表数据，如果数据太多，会略去中间部分print(data)# 打印头部数据，仅查看数据示例时常用print(data.head())# 打印列标题print(data.columns)# 打印行print(data.index)# 打印指定列print(data[&quot;name&quot;])#--------------------写入--------------------------from pandas import DataFramedata = &#123; &#x27;name&#x27;: [&#x27;zs&#x27;, &#x27;ls&#x27;, &#x27;ww&#x27;], &#x27;age&#x27;: [11, 12, 13], &#x27;gender&#x27;: [&#x27;man&#x27;, &#x27;man&#x27;, &#x27;woman&#x27;]&#125;df = DataFrame(data)# 修改df[&#x27;gender&#x27;][df[&#x27;gender&#x27;] == &#x27;girl&#x27;] = &#x27;female&#x27;df[&#x27;gender&#x27;][df[&#x27;gender&#x27;] == &#x27;boy&#x27;] = &#x27;male&#x27;# 新增一行df.loc[6] = [5, &#x27;Eric&#x27;, &#x27;male&#x27;, 20, &#x27;2021-5-18&#x27;]# 新增一列df[&#x27;favorite&#x27;] = Nonedf.to_excel(&#x27;new.xlsx&#x27;, sheet_name=&#x27;Sheet1&#x27;, index=False, header=True) 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"数学建模","slug":"数学建模","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"数据处理","slug":"数据处理","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"}]},{"title":"线性规划和整数规划","slug":"library/数学建模/线性规划和整数规划","date":"2022-12-20T06:08:56.000Z","updated":"2022-12-21T15:30:45.227Z","comments":true,"path":"2022/library/数学建模/线性规划和整数规划/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E5%92%8C%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/","excerpt":"文章概览","text":"文章概览 线性规划问题线性规划问题都可以建立如下方程 min ~ x = 70 x_1 + 50 x_2 + 60 x_3,\\\\ s.t.\\left \\{ \\begin{aligned} 2 x_1 + 4 x_2 + 3 x_3 \\leq 150,\\\\ 3 X_1 + X_2 + 5 x_3 \\leq 160,\\\\ 7 x_1 + 3 x_2 + 5 x_3 \\leq 200,\\\\ x_i \\geq 0, i=1,2,3. \\end{aligned} \\right.其中第一行的 x1、x2、x3 称为决策变量。 通过 python 求解，使用 scipy 的 optimize.linprog 函数，代码如下 123456789101112131415161718from scipy import optimize as opimport numpy as np# 定义决策变量范围x1=(0,None) x2=(0,None)x3=(0,None)# 定义目标函数系数c = np.array([70, 50, 60]) # 定义约束条件系数a = np.array([[-2, -4, -3], [-3, -1, -5], [-7, -3, -5]]) b = np.array([-150, -160, -200])res=op.linprog(c,a,b,bounds=(x1,x2,x3))print(res.x[0]) 注意 optimize 函数判定约束条件统一是大于号。 投资的收益与风险 问题：每种股票有收益率 r 和风险 q，合理分配资金，使收益尽可能大而风险尽可能小 模型：定义股票购买量 $x_i$ 整数规划背包问题 问题：每件物品有重量 a 和价值 c，限定重量 b 内任取物品，使价值总和最大 模型：定义某物品是否被选取 $x_i \\in {0,1}$ 指派问题 问题：某人完成某项任务的费用为 c，分配人员完成与人数同等的任务，使费用总和最小 模型：定义某人是否分配到某任务 $x_{ij} \\in {0,1}$ 旅行商问题 问题：从某城市到零一城市的费用为 c，安排旅行顺序，使费用总和最小 模型 c 变量表示费用，$x_{ij} \\in {0,1}$ 变量表示路径是否被选择 min z = \\sum_{i=1}^n\\sum_{j=1}^n c_{ij} x_{ij}, \\\\ s.t. \\left\\{ \\begin{aligned} \\sum_{i=1}^n x_{ij} = 1, j=1,2,...,n, \\\\ \\sum_{j=1}^n x_{ij} = 1, i=1,2,...,n, \\\\ u_i - u_j + n x_{ij} \\leq n - 1, i=1,...,n, j=2,...n, \\\\ u_1 = 0, 1 \\leq u_i \\leq n-1, i=2,...,n, \\\\ x_{ij} = 0或1, i,j=1,2,...,n. \\end{aligned} \\right.$u_i \\in {1,2,…,n}$ 变量保证只有 $i&lt;j$ 的 $x_{ij}$ 才可能为1，防止回路 比赛项目的排序问题 问题：每名运动员报名了比赛项目若干，安排比赛顺序，尽可能使运动员不连续参加两场比赛 模型：定义 $w_{ij}$ 同时参加两项目的人数和 $x_{ij} \\in {0,1}$ 变量表示路径是否被选择（用类似于旅行商的模型） 多想多做，发篇一作","categories":[],"tags":[{"name":"算法","slug":"算法","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%AE%97%E6%B3%95/"},{"name":"线性规划","slug":"线性规划","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"},{"name":"整数规划","slug":"整数规划","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/"}]},{"title":"name","slug":"solved/右键新建菜单管理","date":"2022-12-17T08:48:01.000Z","updated":"2022-12-17T09:05:14.094Z","comments":true,"path":"2022/solved/右键新建菜单管理/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86/","excerpt":"文章概览","text":"文章概览 删除项查找路径 HKEY_CURRENT_USER\\Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\ Discardable\\PostSetup\\ShellNew 的 classes，打开如下图 增加项（以 .md 为例）创建 md.reg 文件，保存一下内容，双击执行 1234567Windows Registry Editor Version 5.00[HKEY_CLASSES_ROOT\\.md]@=&quot;Typora.exe&quot;[HKEY_CLASSES_ROOT\\.md\\ShellNew]&quot;NullFile&quot;=&quot;&quot;[HKEY_CLASSES_ROOT\\Typora.exe]@=&quot;Markdown&quot; 无需重启电脑即可生效，之后可以删除该文件 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"npm install 报错","slug":"solved/npm install 报错","date":"2022-12-16T15:41:32.000Z","updated":"2022-12-16T15:44:50.010Z","comments":true,"path":"2022/solved/npm install 报错/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/npm%20install%20%E6%8A%A5%E9%94%99/","excerpt":"文章概览","text":"文章概览 未生成 package.json报错信息 先 npm init 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"网盘挂载Alist+RaiDrive","slug":"solved/网盘挂载Alist+RaiDrive","date":"2022-12-14T15:34:01.000Z","updated":"2022-12-17T05:14:50.356Z","comments":true,"path":"2022/solved/网盘挂载Alist+RaiDrive/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BDAlist+RaiDrive/","excerpt":"文章概览","text":"文章概览 http://t.csdn.cn/MLzXm http://127.0.0.1:5244/ 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"网盘","slug":"网盘","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BD%91%E7%9B%98/"}]},{"title":"树莓派配置python环境","slug":"solved/树莓派配置python环境","date":"2022-12-09T08:52:15.000Z","updated":"2022-12-09T08:54:00.157Z","comments":true,"path":"2022/solved/树莓派配置python环境/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83/","excerpt":"文章概览","text":"文章概览 配置正确的源，否则pip install报错hash找到自己版本：lsb_release -c手摸手教程之ubuntu20.04更改国内镜像源（附其他版本ubuntu换源教程，最新详细教程） - Lynn_z - 博客园 (cnblogs.com) 然后 Debian 11 (bullseye) 国内软件源 - Guanglin - 博客园 (cnblogs.com) 安装cv2：一开始pip install报错hash，按上面修改后 (96条消息) import cv2 ,提示ImportError: libcblas.so.3: cannot open shared object file: No such file or directory_纬领网络的博客-CSDN博客 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"树莓派","slug":"树莓派","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"}]},{"title":"树莓派域名解析暂时失败","slug":"solved/树莓派域名解析暂时失败","date":"2022-12-09T08:36:44.000Z","updated":"2022-12-17T09:23:49.282Z","comments":true,"path":"2022/solved/树莓派域名解析暂时失败/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%9A%82%E6%97%B6%E5%A4%B1%E8%B4%A5/","excerpt":"文章概览","text":"文章概览 树莓派ping: baidu.com: 域名解析暂时失败 (5条消息) 解决 树莓派ping: baidu.com: 域名解析暂时失败_闭关苦炼内功的博客-CSDN博客_树莓派域名解析暂时失败 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"树莓派","slug":"树莓派","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"}]},{"title":"【控制算法】学习","slug":"library/嵌入式/算法/【控制算法】学习","date":"2022-12-04T14:18:16.000Z","updated":"2022-12-04T14:34:18.656Z","comments":true,"path":"2022/library/嵌入式/算法/【控制算法】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%AE%97%E6%B3%95/%E3%80%90%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 PID 应用最广泛 分为P、I、D环，每环对应一个系数，也对应一个物理含义 P：偏差；D：变化速率；I：累计偏差 控制输出值 = 三环加权求和 举例二轮平衡小车，陀螺仪测量值：角度 θ；角速度 ω； 为了保持小车平衡在 $\\theta_0$ 角度，控制小车电机正反转，求解具体转速 X X = k_p (\\theta_0 - \\theta) + k_d \\omega + k_i \\sum_{i=0}^{\\text{当前}} (\\theta_0 - \\theta)其中 $\\omega$ 也可以用 $\\frac{ \\mathrm{d} \\theta}{ \\mathrm{d} t}$ 表示 MPC 善于控制多路，如机器人 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"算法","slug":"算法","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%AE%97%E6%B3%95/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"控制","slug":"控制","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%8E%A7%E5%88%B6/"}]},{"title":"【滤波算法】学习","slug":"library/嵌入式/算法/【滤波算法】学习","date":"2022-12-04T14:10:57.000Z","updated":"2022-12-04T14:18:11.053Z","comments":true,"path":"2022/library/嵌入式/算法/【滤波算法】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%AE%97%E6%B3%95/%E3%80%90%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 卡尔曼滤波将（多种方法测量或计算到的）状态值（按照设定的比例系数）加权求和 举例测量到运动物体物体：运动速度 v；位置 x；上一次测量位置 x0； 由于每个值都是测量得到的，不一定准确，要估计物体真实位置 x_{true} = k_1 x + k_2 (x_0 + v \\Delta t) 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"算法","slug":"算法","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%AE%97%E6%B3%95/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"滤波","slug":"滤波","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%BB%A4%E6%B3%A2/"}]},{"title":"【硬件知识】无刷电机和电调","slug":"library/嵌入式/硬件/【硬件知识】无刷电机和电调","date":"2022-12-04T05:18:47.000Z","updated":"2022-12-12T03:40:25.093Z","comments":true,"path":"2022/library/嵌入式/硬件/【硬件知识】无刷电机和电调/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E5%92%8C%E7%94%B5%E8%B0%83/","excerpt":"文章概览","text":"文章概览 https://www.bilibili.com/video/BV1LE411p7QB/ 无刷电机结构给同一组线圈反向的绕线方式（图中错误），保证两端磁性相同 三个线圈电压保持：一组为正；一组为负；一组为0； 则磁性保持：一组为 N；一组为 S；一组无磁性； 电压周期变化，转子旋转 将电路简化为三相电 电调的作用控制mos管通断 并通过霍尔传感器或反电动势，确定转子位置 增加线圈数，但控制还是三组，用三相电 线圈可以在内或在外 无刷电机的 KV 参数，可以用用来计算转速 RPM = KV \\times volt 型号命名规律 如2216、2814、A2212 等， 前两位是定子外径（mm）、后两位的是定子高度（mm）。数越大，电机的功率越大。同时，尺寸越大，重量也越大。 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"硬件知识","slug":"硬件知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"}]},{"title":"【祖传板子】记录","slug":"work/嵌入式项目/【祖传板子】记录","date":"2022-12-03T10:35:23.000Z","updated":"2022-12-04T14:08:37.691Z","comments":true,"path":"2022/work/嵌入式项目/【祖传板子】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E7%A5%96%E4%BC%A0%E6%9D%BF%E5%AD%90%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 目标 历程 2022.12.03理解了无刷电机和电调的控制原理，https://www.bilibili.com/video/BV1LE411p7QB/，才认识到无刷电机和有刷电机的区别。 2022.12.04走了选型芯片流程 STMicroelectronics: Our technology starts with you - STMicroelectronics ，确定了主控选型，学习了基础软件知识：time6是可以做时钟中断；配置PWM波；配置编码器 了解了一些接口：rs232没人用的老电脑串口；SDIO就是SD卡的；I2S就是音频的； 功能 外设 内需 4个电机驱动 tb6612 8个舵机，电调 无线通信 ==还没想好== 4个串口 1个显示屏 oled 或者 lcd；串口屏或者spi或者iic 3个按键 1个蜂鸣器 2个led灯 电源指示灯、状态指示灯 其他 内需 电源接口 xt60 xt30 焊盘（用于调试检测） 电源支持 2s 3s 4s 信号电源接口 st-link 安卓口 type-C stm32f103cBt6等 供电模块 LDO DCDC 防反接 防短路过流保护 还没想好 ADC can output input spi iic 编码器接口 各向电机 SD卡 主控选型——RCT6因为做成祖传板子，多余的引脚均不使用，因此选尽可能便宜的，尽可能小的 主要限制在 4个电机驱动 ，算上每个有刷电机对应一个AB向编码器，驱动外设就需要 7 个，加上内部时钟，至少 8 个。 简单查了一下，好像f103的虽然性能不是那么优秀（咱也不知道性能要求有多高），但是飞控还是有不少人用的，而且便宜，就选定f103的 c8t6肯定不行，就找再大一点的，直接再cubemx里搜索，看到他是按引脚分类的，发现了rct6，接着对应st型号说明图，发现c对应48引脚，比他多的就是r对应64引脚了，进去细看正好8个电机驱动。 淘宝查了，不到20块一个芯片，普通QFP封装 考虑到我之前也用过，应该是f103r系列比较出名的，就它了 多想多做，发篇一作","categories":[],"tags":[{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"pcb","slug":"pcb","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pcb/"}]},{"title":"name","slug":"library/frontend/【vue】学习","date":"2022-12-03T08:53:08.000Z","updated":"2022-12-17T01:16:37.194Z","comments":true,"path":"2022/library/frontend/【vue】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/frontend/%E3%80%90vue%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 https://developer.mozilla.org/zh-CN/ 上手vue 安装包管理器 npm install 创建vue项目 vue create name 本地运行看效果 npm run serve，打开 localhost:8081 语法 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"name","slug":"work/嵌入式项目/bard/【bard】记录","date":"2022-12-03T03:42:29.000Z","updated":"2022-12-03T03:42:29.653Z","comments":true,"path":"2022/work/嵌入式项目/bard/【bard】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/bard/%E3%80%90bard%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"【航模】记录","slug":"work/嵌入式项目/【航模】记录","date":"2022-12-03T03:35:59.000Z","updated":"2022-12-12T03:38:35.981Z","comments":true,"path":"2022/work/嵌入式项目/【航模】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E8%88%AA%E6%A8%A1%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 目标 搞到：碳棒，kt 泡沫板，小舵机，转向连接杆，空心杯 自己咋切泡沫板 批量祖传板子 超远程控制 超级祖传遥控器（无线遥控原理） 学习飞控原理（四轴和普通） 历程2022.12.02看了 魔界造物 造的飞机，超级喜欢 2022.12.03新西达，电机和电调，便宜 电机，2212，2800KV 快速调节器，拉杆，舵角 微风，练习机 2022.12.07了解到飞控的无线通信，发现好多人都用 nrf24l01 ，虽然还完全没理解。 官网链接： nRF24 Series - Nordic Semiconductor - nordicsemi.com 国产： LoRa/zigbee/WiFi/蓝牙模块/4G DTU网关/数传电台/串口服务器/遥控开关/无线通信模块-亿佰特电子科技有限公司 (ebyte.com) 2022.12.12大购物 航模电池 平衡充电器 电调 电机 遥控器 2s 35C 1500mAh B6 50W 新西达 30A（2S-3S） 无刷电机 A2212 140KV 富斯i6 https://m.tb.cn/h.Uis5PSO?tk=yfGfd3hL57z https://m.tb.cn/h.U8Sa5xa?tk=2ZWid3hMtMd https://m.tb.cn/h.U8hBohD?tk=0wBfd3hnV3j https://m.tb.cn/h.URmEGco?tk=axZvd3hmJ0O 闲鱼https://m.tb.cn/h.URmwbRr?tk=lYgxd3hNzqV 了解无刷电机参数，遥控器选型 多想多做，发篇一作","categories":[],"tags":[{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"航模","slug":"航模","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%88%AA%E6%A8%A1/"}]},{"title":"【nerf】记录","slug":"work/nerf/【nerf】记录","date":"2022-12-03T03:15:06.000Z","updated":"2022-12-03T03:20:45.701Z","comments":true,"path":"2022/work/nerf/【nerf】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/nerf/%E3%80%90nerf%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 目标 了解 cuda torch.compile() 读 instant-ngp 代码 历程好久以前改了 贝叶斯优化 采样点代码（主要改在库里），但是速度慢200倍，之后出来了自适应采样点，就放弃继续了。 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"【前端】记录","slug":"work/前端/【前端】记录","date":"2022-12-03T03:06:26.000Z","updated":"2022-12-03T03:14:57.532Z","comments":true,"path":"2022/work/前端/【前端】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 目标 应用 vue 到自己的博客 正经学会 html css js vue 创建各种样式，方便记录 历程2022.12.02查 Hexo 原理，知道了背后的 GitHub page，自己新建了一个，就可以随意编辑了 多想多做，发篇一作","categories":[],"tags":[{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"前端","slug":"前端","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%89%8D%E7%AB%AF/"}]},{"title":"【常用公式】总结","slug":"library/课内知识/【常用数学公式】总结","date":"2022-12-02T16:14:23.000Z","updated":"2022-12-03T08:46:41.777Z","comments":true,"path":"2022/library/课内知识/【常用数学公式】总结/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E3%80%91%E6%80%BB%E7%BB%93/","excerpt":"文章概览","text":"文章概览 三角函数和差化积sin(a)+sin(b) = 2sin[(a+b)/2]cos[(a-b)/2] sin(a)-sin(b) = 2cos[(a+b)/2]sin[(a-b)/2] cos(a)+cos(b) = 2cos[(a+b)/2]cos[(a-b)/2] cos(a)-cos(b) = -2sin[(a+b)/2]sin[(a-b)/2] tanA+tanB=sin(A+B)/cosAcosB 积化和差sin(a)sin(b) = -1/2*[cos(a+b)-cos(a-b)] cos(a)cos(b) = 1/2*[cos(a+b)+cos(a-b)] sin(a)cos(b) = 1/2*[sin(a+b)+sin(a-b)] cos(a)sin(b) = 1/2*[sin(a+b)-sin(a-b)] 滤波器RC低通滤波器 H(j \\omega)=\\frac{U_{o}}{U}_{i}=\\frac{X_{C}}{R+X_{C}}=\\frac{\\frac{1}{j \\omega C}}{R+\\frac{1}{j \\omega C}}=\\frac{1}{1 + R C j \\omega}截止频率 |H(j \\omega)|=\\sqrt{\\frac{1}{1+(\\omega RC)^{2}}}=\\frac{\\sqrt{2}}{2}\\\\ \\omega_0 = \\frac1{RC}\\\\ f_0 = \\frac1{2 \\pi R C}RLC带通滤波器 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"课内知识","slug":"课内知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/"},{"name":"公式","slug":"公式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%85%AC%E5%BC%8F/"}]},{"title":"从regedit改变键盘映射关系","slug":"solved/从regedit改变键盘映射关系","date":"2022-11-29T11:10:50.000Z","updated":"2022-11-29T12:22:06.672Z","comments":true,"path":"2022/solved/从regedit改变键盘映射关系/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E4%BB%8Eregedit%E6%94%B9%E5%8F%98%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/","excerpt":"`caps lock`不怎么用，一般用`shift+字母`代替；用鼠标操控时，经常左手够删除键`del`，就想直接调换过来","text":"`caps lock`不怎么用，一般用`shift+字母`代替；用鼠标操控时，经常左手够删除键`del`，就想直接调换过来 ​ 因为鼠标滚轮也坏了，想做一点更自由的改动，因此直接研究了，修改注册表设置按键映射。 两步设置按键映射 注册表定位到HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layout，新建一个二进制数值，命名为Scancode Map 输入按键映射代码，保存，重启电脑 除了图中画框的以外都是固定样式 按键映射代码规则 框一02：表示映射个数，如一组映射为02，两组映射为03，以此类推。 框二0E 00 3A 00：表示映射按键的扫描码（与其对应的还有ASCII码），将前者映射到后者，如0E 00表示backspace，3A 00表示caps lock。（具体映射表见后） 映射表 键盘按键的各种编码对照表_liuyukuan的博客-CSDN博客_键盘编码 键盘扫描码_Kiopler的博客-CSDN博客_键盘扫描码 （注意提供的多位的扫描码都是反的，如0e 53，其实应为53 0e） 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"regedit","slug":"regedit","permalink":"https://zennnnnnnnnnnn.js.cool/tags/regedit/"},{"name":"键盘","slug":"键盘","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%94%AE%E7%9B%98/"}]},{"title":"【k210】开发板上手","slug":"library/嵌入式/软件/开发板上手/【k210】开发板上手","date":"2022-11-18T00:28:28.000Z","updated":"2022-12-04T05:20:10.229Z","comments":true,"path":"2022/library/嵌入式/软件/开发板上手/【k210】开发板上手/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/%E3%80%90k210%E3%80%91%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/","excerpt":"文章概览","text":"文章概览 kflash烧录固件 maixpy直接连接编程 语法保存图片到SD卡1img.save(&quot;/sd/test.jpg&quot;, quality=95) 串口123456789from machine import UART# 选择引脚用于串口通信fm.register(board_info.PIN10,fm.fpioa.UART2_TX)fm.register(board_info.PIN11,fm.fpioa.UART2_RX)# 开启串口uart = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)uart.write(data) 神经网络12345import KPU as kputask = kpu.load(&quot;/sd/facedetect.kmodel&quot;) # 模型SD卡上fmap = kpu.forward(task, img) # 返回一个列表，列表值对应概率 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"k210","slug":"k210","permalink":"https://zennnnnnnnnnnn.js.cool/tags/k210/"},{"name":"开发板","slug":"开发板","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%8F%91%E6%9D%BF/"}]},{"title":"未整理","slug":"solved/未整理","date":"2022-11-17T13:33:58.000Z","updated":"2022-11-18T00:31:30.248Z","comments":true,"path":"2022/solved/未整理/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%9C%AA%E6%95%B4%E7%90%86/","excerpt":"help me a lot, heartfully thanks!!!","text":"help me a lot, heartfully thanks!!! (109条消息) 交叉编译错误make: arm-none-linux-gnueabi-gcc：命令未找到 /bin/sh: 1: arm-none-linux-gnueabi-gcc: not found问题解决_yhlvhl8487的博客-CSDN博客_arm-none-linux-gnueabi-gcc:命令未找到 (109条消息) 新版本gcc(gcc10.x)编译Linux内核，错误:multiple definition of `yylloc‘_Imagine Miracle的博客-CSDN博客 (109条消息) usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of ‘yylloc‘； scripts/dtc/d_梅尔文.古的博客-CSDN博客 (109条消息) 【问题解决】报错：unable to execute ‘swig‘: No such file or directory_丨匿名用户丨的博客-CSDN博客_unable to execute ‘swig’: no such file or director (109条消息) pycharm ModuleNotFoundError: No module named ‘distutils.core‘_柔于似水的博客-CSDN博客 技术|修复 Ubuntu Linux 中 “Command ‘python’ not found” 的错误 (109条消息) 编译U-Boot DTB 时报错 syntax error； FATAL ERROR: Unable to parse input tree_非攻墨门的博客-CSDN博客 (109条消息) linux安装库时报错error: command ‘x86_64-linux-gnu-gcc‘ failed with exit status 1_凤舞无夜的博客-CSDN博客 (109条消息) Linux下切换python版本（python2和python3版本切换）_丨匿名用户丨的博客-CSDN博客 (109条消息) 【问题解决】报错：scripts/dtc/pylibfdt/libfdt_wrap.c:149:11: fatal error: Python.h: 没有那个文件或目录_丨匿名用户丨的博客-CSDN博客 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"}]},{"title":"报错binsh 1 bc not found","slug":"solved/报错binsh 1 bc not found","date":"2022-11-16T02:00:06.000Z","updated":"2022-12-17T09:24:35.060Z","comments":true,"path":"2022/solved/报错binsh 1 bc not found/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%8A%A5%E9%94%99binsh%201%20bc%20not%20found/","excerpt":"kernel编译报错","text":"kernel编译报错 sudo apt-get install bc 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"linux","slug":"linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://zennnnnnnnnnnn.js.cool/tags/ubuntu/"}]},{"title":"报错binsh python not found","slug":"solved/报错binsh python not found","date":"2022-11-16T01:48:28.000Z","updated":"2022-12-17T09:25:17.532Z","comments":true,"path":"2022/solved/报错binsh python not found/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%8A%A5%E9%94%99binsh%20python%20not%20found/","excerpt":"文章概览","text":"文章概览 /bin/sh: python: not found 问题的解决_码农小胖哥的博客-程序员ITS301 - 程序员ITS301 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"linux","slug":"linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://zennnnnnnnnnnn.js.cool/tags/ubuntu/"}]},{"title":"报错binsh 1 cc not found","slug":"solved/报错binsh 1 cc not found","date":"2022-11-16T01:14:22.000Z","updated":"2022-12-17T09:24:29.463Z","comments":true,"path":"2022/solved/报错binsh 1 cc not found/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%8A%A5%E9%94%99binsh%201%20cc%20not%20found/","excerpt":"`sudo apt-get install gcc`","text":"`sudo apt-get install gcc` 表示缺gcc。 /bin/sh:1:***:not found类型的都是需要安装解决 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"linux","slug":"linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://zennnnnnnnnnnn.js.cool/tags/ubuntu/"}]},{"title":"执行make menuconfig时报错","slug":"solved/执行make menuconfig时报错","date":"2022-11-16T00:54:42.000Z","updated":"2022-12-17T09:18:09.862Z","comments":true,"path":"2022/solved/执行make menuconfig时报错/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/%E6%89%A7%E8%A1%8Cmake%20menuconfig%E6%97%B6%E6%8A%A5%E9%94%99/","excerpt":"在执行make menuconfig时出现报错","text":"在执行make menuconfig时出现报错 表示缺libncurses5-dev库 sudo apt-get install libncurses5-dev 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"linux","slug":"linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/linux/"},{"name":"make","slug":"make","permalink":"https://zennnnnnnnnnnn.js.cool/tags/make/"}]},{"title":"【linux】常用指令","slug":"library/嵌入式/【linux】常用指令","date":"2022-11-14T13:02:04.000Z","updated":"2022-11-15T05:59:54.631Z","comments":true,"path":"2022/library/嵌入式/【linux】常用指令/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E3%80%90linux%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"文章概览","text":"文章概览 文件操作tar压缩或解压压缩或解压***.tar，语句为tar [指令名]+f [文件名] 独立命令 c x t r u 压缩 解压 查看内容，列出所有文件 向压缩文件末尾追加指定文件 更新原压缩包指定文件 tar -cf all.tar *.jpg tar -xf all.tar tar -tf all.tar tar -rf all.tar *.gif tar -uf all.tar logo.gif 可选命令 z j Z v O 压缩或解压***.gz 压缩或解压***.bz2 压缩或解压.Z 显示所有过程 将所有文件解压到标准输出 使用示例（以***.gz为例）：压缩：tar –czf jpg.tar.gz *.jpg，解压：tar -xzvf file.tar.gz 必须要加f其他压缩或解压 ***.rar ***.zip rar a jpg.rar *.jpg zip jpg.zip *.jpg unrar e file.rar unzip file.zip 感谢链接 文件操作 新建文件夹 复制文件 mkdir cp 编辑文件nano，vi 撤销：M-U —&gt; alt+U 源报错Could not connect to archive.ubuntu.com:80 (109条消息) Ubuntu sudo apt update报错：无法连接上 cn.archive.ubuntu.com:80 (123.129.214.98)。 - connect (111: 拒绝连接)_weixin_40520161的博客-CSDN博客 ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror 无法发起与 cn.archive.ubuntu.com:80 (2001:67c:1562::18) 的连接 - connect (101: 网络不可达) - 嫖老板 - 博客园 (cnblogs.com) 其他 (109条消息) apt 和 apt-get的区别_御龙冀人的博客-CSDN博客_apt apt-get 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"理工方向","slug":"理工方向","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%90%86%E5%B7%A5%E6%96%B9%E5%90%91/"},{"name":"Linux","slug":"Linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Linux/"}]},{"title":"【numpy】语法基础","slug":"library/深度学习/代码/【numpy】语法基础","date":"2022-11-13T13:43:37.000Z","updated":"2022-11-13T13:46:05.231Z","comments":true,"path":"2022/library/深度学习/代码/【numpy】语法基础/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81/%E3%80%90numpy%E3%80%91%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/","excerpt":"文章概览","text":"文章概览 ravel()把数组拉成一维数组 asarray节省内存的复制数组 concatenate拼接数组 searchsorted搜索排序 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"numpy","slug":"numpy","permalink":"https://zennnnnnnnnnnn.js.cool/tags/numpy/"},{"name":"代码","slug":"代码","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E4%BB%A3%E7%A0%81/"}]},{"title":"【torch】语法基础","slug":"library/深度学习/代码/【torch】语法基础","date":"2022-11-13T13:37:28.000Z","updated":"2022-11-13T13:43:29.778Z","comments":true,"path":"2022/library/深度学习/代码/【torch】语法基础/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81/%E3%80%90torch%E3%80%91%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/","excerpt":"文章概览","text":"文章概览 tensor处理生成tensortorch.rand， torch.cat合并数组.tolist数组转list类型torch.cumsum累加形状改变sequeeze，[…,:,None] detach分离出来，不带梯度 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"代码","slug":"代码","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E4%BB%A3%E7%A0%81/"},{"name":"torch","slug":"torch","permalink":"https://zennnnnnnnnnnn.js.cool/tags/torch/"}]},{"title":"【python】进阶总结","slug":"library/嵌入式/语言/【python】进阶总结","date":"2022-11-13T13:35:22.000Z","updated":"2022-11-13T13:38:43.459Z","comments":true,"path":"2022/library/嵌入式/语言/【python】进阶总结/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%AF%AD%E8%A8%80/%E3%80%90python%E3%80%91%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/","excerpt":"文章概览","text":"文章概览 迭代器zip12a = [1,2,3]b map 多想多做，发篇一作","categories":[],"tags":[{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"理工方向","slug":"理工方向","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%90%86%E5%B7%A5%E6%96%B9%E5%90%91/"},{"name":"语言","slug":"语言","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%AD%E8%A8%80/"}]},{"title":"【V831】开发板上手","slug":"library/嵌入式/软件/开发板上手/【V831】开发板上手","date":"2022-11-13T02:02:43.000Z","updated":"2022-12-04T05:20:19.605Z","comments":true,"path":"2022/library/嵌入式/软件/开发板上手/【V831】开发板上手/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/%E3%80%90V831%E3%80%91%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/","excerpt":"V831是","text":"V831是 烧录系统 MaixII-Dock 烧录系统 - Sipeed Wiki 烧录过系统之后，把SD卡插上，type-C上电之后，屏幕就会显示图标了。 运行程序​ 上电后，自动运行main.py，修改main.py即可。运行代码与k210一致，传承自openmv。 ​ 文件构成： 12345678910graph TD. --&gt; b[root]. --&gt; c[home]b--&gt;d[模型等文件]b--&gt;e[wpa_supplicant.conf]b--&gt;f[app]c--&gt;g[main.py]c--&gt;h[run.py]c--&gt;i[smart] 控制方式一：命令行​ 可以用串口调试工具putty，把他当作Linux系统即可。 修改文本文件vim [文件名]打开编辑界面 重启或关机重启：reboot，关机：poweroff 导入文件​ 重新用读卡器插电脑上后，报错无法打开。 ​ 但是可以用V831的OTG口，连接电脑会显示U盘。可以直接复制文件进去。 控制方式二：maixpy3+jupyter 通过 IDE 连接 MaixII-Dock - Sipeed Wiki 使用 MaixPy3 IDE 连接 MaixSense - Sipeed Wiki 指令集见附件first.ipynb 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"开发板","slug":"开发板","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%8F%91%E6%9D%BF/"},{"name":"V831","slug":"V831","permalink":"https://zennnnnnnnnnnn.js.cool/tags/V831/"}]},{"title":"pycharm修改快捷键","slug":"solved/pycharm修改快捷键","date":"2022-11-13T01:50:01.000Z","updated":"2022-11-13T02:04:44.144Z","comments":true,"path":"2022/solved/pycharm修改快捷键/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/pycharm%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"在file --> settings -- keymap中![1668304724550](pycharm修改快捷键/1668304724550.png)","text":"在file --> settings -- keymap中![1668304724550](pycharm修改快捷键/1668304724550.png) 可以在里面关键词搜索，也可以找对应分类。 点击搜索栏同行的笔，可以进行修改。 我修改的包括 运行代码 —&gt; ctrl+shift+caps lock debug代码 —&gt; ctrl+shift+Q 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"pycharm","slug":"pycharm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pycharm/"}]},{"title":"【nerf】Point-NeRF笔记","slug":"work/nerf/【nerf】Point-NeRF笔记","date":"2022-11-01T13:40:31.000Z","updated":"2022-11-01T13:42:23.975Z","comments":true,"path":"2022/work/nerf/【nerf】Point-NeRF笔记/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/","excerpt":"用点云表示nerf","text":"用点云表示nerf point-nerf 继承Nerf和深度多视图立体方法的优点 比Nerf快30倍 可以与其他3D重建方法结合 用0.2秒从三个输入视图生成点云 用20-40min训练得到的效果与Nerf训练20+hour 的效果相当甚至更好 主要特点 基于点云 P点：p位置，f神经特征向量（ 局部3D场景信息 ），γ位于表面的可能性0-1 修剪和生长 可以对接各种获得稠密点云的方法，而不仅仅是MVSNet。 主要流程 输入照片 —&gt; MVS生成深度图 —&gt; 获得点云p、γ —&gt; 渲染新视角（point-nerf） —&gt; 更新点云 前置知识MVS MVSnet:从非结构化多视角立体中推断深度网络输入：1张参考图像+N张原图像（从其他视角观察同一物体的图像），每张图像对应的相机内参和外参网络输出：概率图+优化深度图，在后处理中使用概率图对优化深度图进行过滤 相关参考 (96条消息) 从照片的三维重建（3D Reconstruction）——MVS系列（１）_yuboona的博客-CSDN博客_mvs算法 (96条消息) SFM 与MVS的区别_weeeeeida的博客-CSDN博客_sfm和mvs (96条消息) 3D点云重建0-00：MVSNet(R-MVSNet)-目录-史上最新无死角讲解_江南才尽，年少无知！的博客-CSDN博客 总结 第一步获取稠密点云的方法不只MVS（6.4实验：用colmap点云转化到point-nerf，200k；提供极端示例，用非常稀疏的初始点云） 大规模3D场景的评估（ScanNet） 高效的临近神经点查询 高效的渲染方法 点云可能适合3D建模实体 问题 [x] 啥是MVS [ ] 咋生成初始点云的 [x] 为啥不能直接用，或者改进，或者用其他的（因为只有深度信息） [x] 篇尾总结 [ ] point-nerf渲染：自己对自己没有影响吗？ [ ] f到底是啥 [ ] colmap咋就有点云了呢 PointNerf体素渲染 c:像素点颜色，M:采样点个数，σ:体密度， τ:遮挡后剩余光， Δ:相邻样本距离，r:角度 输入输出 ​ 传统的NeRF模型直接利用MLP对光线上的采样点查询其辐射值r和体密度σ，而Point-NeRF对每个采样点，查询其在给定半径R（论文中没说取啥值）中的K个点，以采样点位置x，光线方向d以及K个点云作为输入，输出其辐射值和体密度。 1. 计算 :点云 对于采样点位置 x 的特征向量， : 点云特征向量，x: 采样点位置， 代表点云 到采样点 x 的相对位置 2. 计算 ：采样点的渲染后的特征向量，包括周围点的影响 3. 计算辐射值r ​ d是视角，R是多层感知器 4. 计算体密度σ T是mlp 初始点云获取图像深度 G是MVSnet，可以理解成 3D CNN模块 I是原图像，Φ是摄像机参数； additional neighboring views ( we use two additional views in most cases. ) 获取特征f 将点云投影到reference image的特征图上，将投影点对应的特征向量（不同尺度下特征的聚合）作为点云的特征向量 G是二维CNN（ 带有3个下采样层的VGG网络 ） 向量是56 （ 8 + 16 + 32 ）通道， 最终的每个点的神经特征是59 通道的向量。 剪枝和生长 初始的点云往往有空洞或离群点，这会影响到渲染质量， 文章发现直接优化现存点的位置会让训练不稳定并且并不能填补大空洞 。 剪枝γ：用sparsity loss优化，趋近于0或1 每10000次迭代就删去γ &lt;0.1的点 生长计算每条光线遮挡值最大的点 如果 作为该点到它最近的神经点的距离 保证离表面近，离其他点远。 损失函数Lrender： Lsparse： 论文中采取 a = 2e-3 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"Point-NeRF","slug":"Point-NeRF","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Point-NeRF/"}]},{"title":"【nerf】Block-NeRF笔记","slug":"work/nerf/【nerf】Block-NeRF笔记","date":"2022-11-01T10:06:43.000Z","updated":"2022-11-01T10:16:17.462Z","comments":true,"path":"2022/work/nerf/【nerf】Block-NeRF笔记/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/","excerpt":"把大场景分成多个小场景，分别训练，最后合成分块优点：方便**更新、扩展**，可以**节省内存**以训练超大规模nerf","text":"把大场景分成多个小场景，分别训练，最后合成分块优点：方便**更新、扩展**，可以**节省内存**以训练超大规模nerf 谷歌Waymo研究人员用280 万张图像中渲染了旧金山整个街区，分块共35个，是迄今为止规模最大的nerf （谷歌Waymo 是一家研发自动驾驶汽车的公司 ） 块的范围选择：每个十字路口作为圆心，均匀排列的球，半径满足覆盖街道的75%，保证任意两个Block-NeRF之间有50％的重叠。 创新点： 训练单独的block：Appearance Embeddings、Learned Pose Refinement、Exposure Input（还有Transient Objects、Visibility Prediction，没在实验表格中） block相关：Block-NeRF Selection、Block-NeRF Compositing、Appearance Matching 相关： mip-nerf、nerf-w、barfbackground早期工作通常侧重于small-scale或者object-centric（以对象为中心）的场景重建 一、训练单独的block是mip-NeRF中提出的模型的扩展 如果NeRF在每个pixel用single ray来采样，会出现模糊和锯齿 通过有效地渲染抗锯齿圆锥截头体而不是射线，mip-NeRF 减少了令人反感的锯齿伪影并显着提高了 NeRF 表示精细细节的能力，同时也比 NeRF 快 7% 和一半的大小。 与 NeRF 相比，mip-NeRF 在使用 NeRF 呈现的数据集上将平均错误率降低了 17%，在我们呈现的该数据集的具有挑战性的多尺度变体上降低了 60%。 Mip-NeRF 还能够在我们的多尺度数据集上匹配蛮力超采样 NeRF 的准确性，同时快 22 倍。 （翻译自mip-nerf摘要） 1. Appearance Embeddings借用nerf-W的外观编码，用Generative Latent Optimization优化外观嵌入向量 NeRF-W2. Learned Pose Refinement与nerf本身一起学习优化平移和旋转偏移量 barf、A-NeRF、NeRF-、iNeRF3. Exposure Input把相机的曝光参数作为输入，$\\gamma_{PE}=shutter \\quad speed \\times analog \\quad gain / t$ $\\gamma_{PE}$用的是四级正弦位置编码，$t$是一个系数，实验中取1000 4. Transient Objects运动物体用语义分割模型，忽略动态物体，例如汽车、行人 10 5. Visibility Prediction（实际上好像没用上）用于判断一个区域是否可见，网络很小，可以独立运行 用一个小MLP $f_{v}$ ，输入位置和角度，输出该点可见性，进入射线采样计算 用于选择Block-NeRF，和确定在两个 NeRF 之间执行外观匹配的位置 NeRV二、合并多个Block-NeRFBlock-NeRF筛选机制 只考虑目标视点半径范围内的Block-NeRFs 计算Block-NeRF的可见性（对应上面的Visibility Prediction），若平均可见性低于阈值，则舍弃 Block-NeRF合并把最终每个Block-NeRF渲染的图像，用反距离加权（IDW）——保证各个Block-NeRF间平滑过渡 他们还探索了相关的加权方法（没读懂，很拗口），但是会导致伪影和时间不连贯 We also explored a variant of IDW where the interpolation was performed over projected 3D points predicted by the expected Block-NeRF depth. This method suffers when the depth prediction is incorrect, leading to artifacts and temporal incoherence. 他们也尝试了用可见性（Visibility Prediction）加权，对远处重建更清晰，但是会导致时间的不连贯 Finally, we experiment with weighing the Block-NeRFs based on per-pixel and per-image predicted visibility. This produces sharper reconstructions of further-away areas but is prone to temporal inconsistency. Therefore, these methods are best used only when rendering still images. We provide further details in the supplement. Appearance Matching 外观匹配如果每个NeRF单独训练，同样的外观编码可能会对应不同的天气情况，导致块交界处无法正确合并。 对于有多个Block-NeRF覆盖的区域，用一小段时间（约100次迭代）单独训练外观编码，而完全停止NeRF网络的更新 Results and Experiments 采集数据方法：车顶装八个方向摄像头，行驶采集图像 Model Ablations | 方法 | 效果 || ————— | —————————————————————————————— || Appearance | 去掉伪影 || Pose Opt | 变清晰 || Exposure | 略微改善，便于改变结果的曝光度to change the exposure during inference | 块越小越好 插值方法 主要问题瞬态物体解决方法 学习瞬态对象learning transient objects ：NeRF-W 对瞬态对象建模directly modeling dynamic objects ：43、68 sampling unbounded volumetric representations解决方法NeRF++、Mip-NeRF 360 加速渲染 缓存NeRF caching techniques： Fastnerf、25、73 稀疏体素网格sparse voxel grids：34 其他：41、59、72","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"Block-NeRF","slug":"Block-NeRF","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Block-NeRF/"}]},{"title":"github的github.io项目打不开，显示404","slug":"solved/github的github.io项目打不开","date":"2022-11-01T01:26:23.000Z","updated":"2022-11-01T01:31:19.798Z","comments":true,"path":"2022/solved/github的github.io项目打不开/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/github%E7%9A%84github.io%E9%A1%B9%E7%9B%AE%E6%89%93%E4%B8%8D%E5%BC%80/","excerpt":"文章概览","text":"文章概览 问题出现先连接不到github，然后用steam++连接上了，然后出现这种情况。 解决方法通常直接把你的加速器关闭就行了 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"github","slug":"github","permalink":"https://zennnnnnnnnnnn.js.cool/tags/github/"}]},{"title":"【钢琴】织体类型","slug":"library/inte/【钢琴】织体类型","date":"2022-10-28T14:31:38.000Z","updated":"2022-11-08T15:53:57.682Z","comments":true,"path":"2022/library/inte/【钢琴】织体类型/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/inte/%E3%80%90%E9%92%A2%E7%90%B4%E3%80%91%E7%BB%87%E4%BD%93%E7%B1%BB%E5%9E%8B/","excerpt":"文章概览","text":"文章概览 2536嗨 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"},{"name":"钢琴","slug":"钢琴","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%92%A2%E7%90%B4/"}]},{"title":"【latex】学习","slug":"library/inte/【latex】学习","date":"2022-10-27T14:08:10.000Z","updated":"2022-12-02T16:13:44.390Z","comments":true,"path":"2022/library/inte/【latex】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/inte/%E3%80%90latex%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"汇总整理","text":"汇总整理 使用单$围住表达式，可以插入公式。 使用双$$$$围住表达式，可以居中显示。（typora快捷键 ctrl+shift+M） 在线LaTeX公式编辑器-编辑器 (latexlive.com) 常用符号二元运算符 公式 代码 $\\times$ \\times $\\cdot$ \\cd 二元关系符 箭头符号 其他符号 希腊字母空格需要使用 \\qquad,\\quad,a\\b,应该是占位符和变量之间需要有{}相隔。 123456$$ C_&#123;1&#125; \\qquad &#123;C_2&#125; $$$$ C_&#123;1&#125; \\quad &#123;C_2&#125; $$$$ C_&#123;1&#125; \\ &#123;C_2&#125; $$ 修饰符上下标下标符号_，上标符号^ 结果 公式 $C_{m,n}$ C_{m,n} $c_{1}^{2}=a^{2}+b^{2}$ c_{1}^{2}=a^{2}+b^{2} 上下标注上划线\\overline，下划线\\underline 上划线\\overline&#123;&#125;，下划线\\underline&#123;&#125; \\widetilde和\\widehat $\\overline{m}$ y'=3\\widetilde a 计算符号平方根符号\\sqrt 结果 公式 $\\sqrt{x+y}$ $\\sqrt&#123;x+y&#125;$ $\\sqrt[3]{x^{2}+y}$ \\sqrt[3]{x^{2}+y} 值比较符 $\\le$ $\\ge$ $\\ne$ \\le \\ge \\ne 水平括号\\overbrace 和 \\underbrace 12$$ \\underbrace&#123;a+b+\\cdots+z&#125;_&#123;26&#125;$$ 重音号\\widetilde 和 \\widehat 12$$y&#x27;=3\\widetilde a$$ 向量\\overrightarrow 和 \\overleftarrow 12$$\\overrightarrow &#123;AC&#125; = \\overrightarrow &#123;AB&#125; +\\overrightarrow &#123;BC&#125; $$ 圆点\\cdot, \\cdots,\\vdot,\\ddot 12$$ a=b \\cdot c $$ 函数名1234567\\arccos \\cos \\csc \\arcsin \\cosh \\deg \\arctan \\cot \\det \\arg \\coth \\dim \\sinh \\sup \\tan\\[\\lim_&#123;&lt;!-- --&gt;x \\rightarrow 0&#125; \\frac&#123;&lt;!-- --&gt;\\sin x&#125;&#123;&lt;!-- --&gt;x&#125;=1\\]\\exp \\ker \\limsup \\min \\gcd \\lg \\ln \\Pr \\hom \\lim \\log \\sec \\inf \\liminf \\max \\sin \\tanh 例如： 数学符\\mathbf 123$$ x^&#123;2&#125; \\geq 0\\qquad \\textrm&#123;for all &#125;x\\in\\mathbf&#123;R&#125; $$$$x^&#123;2&#125; \\geq 0\\qquad \\textrm&#123;for all &#125;x\\in\\mathbb&#123;R&#125; $$ 分数\\frac&#123;&#125;&#123;&#125; 或者硬写 123$$\\sin \\alpha = \\frac&#123;a&#125;&#123;c&#125; $$$$x^&#123;1/2&#125; $$ 二项系数&#123;... \\choose ...&#125; 或 &#123;... \\atop ...&#125;。第二个命令与第一个命令的输出相同,只是没有括号。 12$$&#123;n\\choose m&#125; \\qquad &#123;x\\atop y+2&#125;$$ 前缀符号\\int,\\sum,\\prod 1234$$ &#123;\\int_&#123;0&#125;^&#123;\\frac&#123;\\pi&#125;&#123;2&#125;&#125;&#125; $$$$ \\sum_&#123;i=1&#125;^&#123;n&#125;$$$$\\prod_\\epsilon$$ 转义符号有时保留字需要加入\\来进行转义 123$$&#123;a,b,c&#125;\\neq\\&#123;a,b,c\\&#125;$$ 括号层次正确的括号大小\\left和\\right。如果将命令 \\left 放在开分隔符前,TEX会自动决定分隔符的正确大 小。注意必须用对应的右分隔符 \\right 来关闭每一个左分隔符 \\left,并 且只有当这两个分隔符排在同一行时大小才会被正确确定。 123$$ 1+\\left(\\frac &#123;1&#125;&#123;1-x^2&#125;\\right) ^3 \\qquad 1+(\\frac &#123;1&#125;&#123;1-x^2&#125;) ^3$$ 1234567$$ \\Big( (x+y) (x-y) \\Big)^&#123;2&#125; $$$$\\big(\\Big(\\bigg(\\Bigg($$ $$\\big\\&#125;\\Big\\&#125;\\bigg\\&#125;\\Bigg\\&#125; $$$$\\big\\|\\Big\\|\\bigg\\|\\Bigg\\| $$ 垂直对齐使用array命令，并\\\\命令来分行。注意转义 1234567$$\\mathbf&#123;X&#125; = \\left( \\begin&#123;array&#125;&#123;ccc&#125; x\\_&#123;11&#125; &amp;amp; x\\_&#123;12&#125; &amp;amp; \\ldots \\\\\\ x\\_&#123;21&#125; &amp;amp; x\\_&#123;22&#125; &amp;amp; \\ldots \\\\\\ \\vdots &amp;amp; \\vdots &amp;amp; \\ddots \\end&#123;array&#125; \\right) $$ 层次大括号1234\\begin&#123;cases&#125; &amp;1234 &amp;qwer\\end&#123;cases&#125; f(x)= \\begin{cases} f_1(x) = a + b -3c EQ_1 \\\\ f_2(x) = 2a + 5b +c \\notag \\\\ f_3(x) = 4a + 2b -c \\label{EQ_3} \\end{cases} 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"},{"name":"latex","slug":"latex","permalink":"https://zennnnnnnnnnnn.js.cool/tags/latex/"}]},{"title":"【算法】贝叶斯优化","slug":"library/深度学习/算法/【算法】贝叶斯优化","date":"2022-10-27T13:48:26.000Z","updated":"2022-11-13T13:46:47.732Z","comments":true,"path":"2022/library/深度学习/算法/【算法】贝叶斯优化/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%98%E5%8C%96/","excerpt":"这篇blog参考github上一个基于高斯过程回归的贝叶斯优化开源项目(python)：https://github.com/fmfn/BayesianOptimization AutoML ⊃ BO ⊃ SMBO ⊃ {GPR, TPE}","text":"这篇blog参考github上一个基于高斯过程回归的贝叶斯优化开源项目(python)：https://github.com/fmfn/BayesianOptimization AutoML ⊃ BO ⊃ SMBO ⊃ {GPR, TPE} 贝叶斯优化器的介绍 贝叶斯优化在不知道目标函数（黑箱函数）长什么样子的情况下，通过猜测黑箱函数长什么样，来求一个可接受的最大值。和网格搜索相比，优点是迭代次数少(节省时间)，粒度可以到很小，缺点是不容易找到全局最优解。 贝叶斯优化流程图如下： 贝叶斯优化有两个核心过程，先验函数(Prior Function,PF)与采集函数(Acquisition Function,AC)，采集函数也可以叫效能函数(Utility Funtcion)，但一般还是称呼为采集函数，见下面引用论文A Tutorial on Bayesian Optimization of Expensive Cost Functions, with Application to Active User Modeling and Hierarchical Reinforcement Learning的话。PF主要利用高斯过程回归(GPR（高斯分布） vs. TPE（好成绩比坏成绩）)；AC主要包括EI，PI，UCB这几种方法，同时exploration与exploitation的平衡，也是通过AC来完成的。 采集函数(Acquisition Function,AC) 常见的采集函数有下面三种，UCB，PI，EI，先介绍最好理解的UCB。 UCB(Upper confidence bound) $UCB=\\mu (x)+k\\sigma (x)$，k为调节参数，直观地理解为上置信边界。 PI(probability of improvement)​ $P I(x)=P(f(x) \\geq f(x^{+})+U)=\\Phi(\\frac{\\mu(x)-f(x^{+})-v}{\\sigma(x)})$​ 超参数 $v$ 用于调节exploitation与exploitation，$v=0$ 更倾向于收敛到$f(x^{+})$附近，$\\Phi(\\cdot)$表示正态累计分布函数 ，$f(x^{+})$表示现有的最大值 。 其原理就是找到未知点的函数值比$f(x^{+})$大的概率，取这些点中概率最大的点，具体比$f(x^{+})$ 大多少不考虑，这里通过Z-scores标准化法，让每个未知点函数值大于$f(x^{+})$ 的概率可以进行比较。 ​ Z-scores标准化法，$ \\frac{x \\mu} \\sigma$，x为观察点，$\\mu$为所有观察点的均值，$\\sigma$为所有观察点标准差，$ \\frac{x \\mu} \\sigma$ 的概率密度函数符合标准正态分布。 EI(Expected improvement)​ 后续再补上 贝叶斯优化的一个模拟实验 假设我们想知道下面这个黑箱函数在(-2,10)的最大值，$f(x)=e^&#123;-(x-2)^&#123;2&#125;&#125;+e^&#123;\\frac&#123;-(x-6)^&#123;2&#125;&#125;&#123;10&#125;&#125;+\\frac&#123;1&#125;&#123;x^&#123;2&#125;+1&#125;$，最大值大概是14，我们假定找到一个点其函数值大于13，就已经可以接受了，返回该函数值。 探索(exploration)与利用(exploitation) 探索(exploration)：简单来说就是尽量选择远离已知点的点为下一次用于迭代的参考点，即尽量探索未知的区域，点的分布会尽可能的平均。 利用(exploitation)：简单来说就是尽量选择靠近已知点的点为下一次用于迭代的参考点，即尽量挖掘已知点周围的点，点的分布会出现一个密集区域，容易进入局部最大。 ​ 在上文提到的github项目中，通过kappa这个参数平衡探索和利用，如上，上面的图kappa=0.1，下面的图kappa=10，我们下面的代码取kappa等于1.96，即U C B = μ ( x ) + 1.96 σ ( x ) UCB=\\mu (x)+1.96\\sigma (x)UCB=μ(x)+1.96σ(x)，github示例中kappa取的是中间值5，这里取1.96是为了让下面演示贝叶斯优化过程中，UCB就是95%置信区间的上界，更好理解UCB是什么，详细请看下面的贝叶斯优化过程。 虚线表示高斯回归过程求得的未知点的均值$\\mu$ ，蓝色区域表示标准差$ \\sigma$ 贝叶斯优化的应用 贝叶斯优化器用于调参，可以很快找到一个可以接受的超参数值，和网格搜索相比，优点是迭代次数少(节省时间)，粒度可以到很小，缺点是不容易找到全局最优解。例如我们想调logistic回归的正则化超参数，就把黑箱函数设置成logistic回归，自变量为超参数，因变量为logistic回归在训练集准确度，设置一个可以接受的黑箱函数因变量取值，例如0.95，得到的超参数结果就是可以让logistic回归分类准确度超过0.95的一个超参数。 原文链接 通俗科普文：贝叶斯优化与SMBO、高斯过程回归、TPE - 知乎 (zhihu.com) Acquisition function / Expected Improvement (EI)python实现方法python有3个库支持，bayes_opt、hyperopt、optuna，以下详细介绍bayes_opt 12345678910111213141516171819from bayes_opt import BayesianOptimizationdef run(a, b, c): # 定义函数，可以输入多个数，输出保证一个 return a+b+c# 定义输入值范围（名称要与函数用的相同）inputs = &#123;&#x27;a&#x27;: (0,1), &#x27;b&#x27;: (2,3), &#x27;c&#x27;: (1,2)&#125;# 实例化贝叶斯对象opt = BayesianOptimization(run, inputs)# 优化器求解，返回# 只支持求最大值opt.maximize(init_points=5, n_iter=30, acq=init_bayes.get(&#x27;acq&#x27;)) # AC方法#优化完成，取出最佳参数与最佳分数params_best = opt.max[&quot;params&quot;]score_best = opt.max[&quot;target&quot;] 详细参考这篇 用sklearn高斯过程回归123456789101112from sklearn.gaussian_process import GaussianProcessRegressorimport numpy as npa=np.random.random(50).reshape(50,1)b=a*2+np.random.random(50).reshape(50,1)# 实例化高斯过程对象gaussian=GaussianProcessRegressor()# 高斯过程回归gaussian.fit(a,b)c=np.linspace(0.1,1,100)d=gaussian.predict(c.reshape(100,1)) 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"算法","slug":"算法","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%AE%97%E6%B3%95/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"贝叶斯","slug":"贝叶斯","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"}]},{"title":"【忆阻器】记录","slug":"work/忆阻器/【忆阻器】记录","date":"2022-10-23T15:18:25.000Z","updated":"2022-12-03T16:13:52.813Z","comments":true,"path":"2022/work/忆阻器/【忆阻器】记录/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%BF%86%E9%98%BB%E5%99%A8/%E3%80%90%E5%BF%86%E9%98%BB%E5%99%A8%E3%80%91%E8%AE%B0%E5%BD%95/","excerpt":"文章概览","text":"文章概览 目标 看看 mpc 具体算法 历程2022.12.03看到稚晖君的机器人，才知道 zmp 和 mpc，觉得 mpc 可能有忆阻器的用武之地。后来又简单了解了一下 ，一个模型预测控制（MPC）的简单实现 - 知乎 (zhihu.com) 没看完，mpc 和 pid 是同类东西，优势在于控制多条，简单思路了解，还不清楚具体。 多想多做，发篇一作","categories":[],"tags":[{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"忆阻器","slug":"忆阻器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%86%E9%98%BB%E5%99%A8/"}]},{"title":"【css】学习","slug":"library/inte/【css】学习","date":"2022-10-22T06:47:00.000Z","updated":"2022-10-22T06:48:47.539Z","comments":true,"path":"2022/library/inte/【css】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/inte/%E3%80%90css%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 插入点击跳转链接将同一类型元件的不同css区分开 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"},{"name":"css","slug":"css","permalink":"https://zennnnnnnnnnnn.js.cool/tags/css/"}]},{"title":"hexo部署报错spawn failed","slug":"solved/hexo部署报错spawn failed","date":"2022-10-20T01:17:17.000Z","updated":"2022-11-01T01:31:31.099Z","comments":true,"path":"2022/solved/hexo部署报错spawn failed/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99spawn%20failed/","excerpt":"","text":"报错内容12345err: Error: Spawn failed at ChildProcess.&lt;anonymous&gt; (D:\\Program Files\\blog\\node_modules\\hexo-util\\lib\\spawn.js:51:21) at ChildProcess.emit (node:events:526:28) at ChildProcess.cp.emit (D:\\Program Files\\blog\\node_modules\\cross-spawn\\lib\\enoent.js:34:29) at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) 原因分析 问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。 我觉得多数情况是github网络问题，但我没有证据 解决方法 把.deploy_git和public直接删除 多想多做，发篇一作","categories":[],"tags":[{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"hexo","slug":"hexo","permalink":"https://zennnnnnnnnnnn.js.cool/tags/hexo/"}]},{"title":"【深度学习工具】tensorboard学习","slug":"library/深度学习/工具/【深度学习工具】tensorboard学习","date":"2022-10-18T09:59:25.000Z","updated":"2022-10-22T02:34:15.318Z","comments":true,"path":"2022/library/深度学习/工具/【深度学习工具】tensorboard学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E3%80%91tensorboard%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 Tensorboard的工作流程： 代码运行中，保存数据在文件夹下 浏览器显示 自动保存数据123from torch.utils.tensorboard import SummaryWriter# 实例化writer = SummaryWriter(&#x27;./path/to/log&#x27;) 之后写入各类数据都是在这个文件夹中./path/to/log 针对数值writer.add_scalar(key, value, global_step=None, walltime=None) global_step可以理解为x轴坐标。实例如下： 123for epoch in range(100) mAP = eval(model) writer.add_scalar(&#x27;mAP&#x27;, mAP, epoch) 存储图像writer.add_image(tag, img_tensor, global_step=None, walltime=None, dataformats=&#39;CHW&#39;)，writer.add_images(tag, img_tensor, global_step=None, walltime=None, dataformats=&#39;NCHW&#39;) 数据可视化tensorboard --logdir=./path/to/the/folder --port 8123 其他 同时显示多组数据 将日志放到同一目录下，同样的语法执行就行。 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"深度学习工具","slug":"深度学习工具","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"},{"name":"tensorboard","slug":"tensorboard","permalink":"https://zennnnnnnnnnnn.js.cool/tags/tensorboard/"}]},{"title":"【verilog】学习","slug":"library/课内知识/【verilog】学习","date":"2022-10-18T09:33:15.000Z","updated":"2022-12-26T15:13:43.636Z","comments":true,"path":"2022/library/课内知识/【verilog】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90verilog%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"文章概览","text":"文章概览 verilog HDL（Hardware Description Language） 用代码写数字器件的连接 有两种实现方式 12345678module mux2_1(a, b, s, y); //模块名、模块接口名 input a, b, s; // 定义输入端口 output y; // 定义输出端口 /* s为0时，选择a输出； s为1时，选择b输出。*/ assign y = (s == 0) ? a : b; //输出信号endmodule 123456789101112131415module mux2_1(a, b, s, y); input a, b, s; output y; reg y; //reg 表示寄存器 always @(a, b, s) //当有a，b，s中任一值变化，将触发 begin if(!s) y = a; else y = b; end always @(*) //当有a，b，s中任一值变化，将触发 switch endmodule 实例代码解读module pwm_buzzer( input clk , //时钟输入 input rst_n , //复位按键输入 input key_in , //按键输入 output reg buzzer //驱动蜂鸣器 ); wire press ; //线，连接按键标志信号 //引用按键模块 key_debounce u_key_debounce( .clk (clk ), .rst_n (rst_n ), .key (key_in ), .press (press ) ); //定义音符时序周期数 localparam M0 = 98800, M1 = 95600, M2 = 85150, M3 = 75850, M4 = 71600, M5 = 63750, M6 = 56800, M7 = 50600; //信号定义 reg [16:0] cnt0 ; //计数每个音符对应的时序周期 reg [10:0] cnt1 ; //计数每个音符重复次数 reg [5 :0] cnt2 ; //计数曲谱中音符个数 reg [16:0] pre_set ; //预装载值 wire [16:0] pre_div ; //占空比 reg [10:0] cishu ; //定义不同音符重复不同次数 wire [10:0] cishu_div ; //音符重复次数占空比 reg flag ; //歌曲种类标志：0小星星，1两只老虎 reg [5 :0] YINFU ; //定义曲谱中音符个数 //歌曲种类标志位 always @(posedge clk or negedge rst_n) begin //每个时钟信号触发 if(!rst_n) begin flag &lt;= 1&#x27;b0; end else if(press) begin flag &lt;= ~flag; end end //重设音符的个数 always @(posedge clk or negedge rst_n) begin if(!rst_n) YINFU &lt;= 48; else if(flag == 1&#x27;b1) YINFU &lt;= 36; else YINFU &lt;= 48; end //计数每个音符的周期，也就是表示音符的一个周期 always @(posedge clk or negedge rst_n) begin if(!rst_n) begin cnt0 &lt;= 0; end else if(press) cnt0 &lt;= 0; else begin if(cnt0 == pre_set - 1) cnt0 &lt;= 0; else cnt0 &lt;= cnt0 + 1; end end //计数每个音符重复次数，也就是表示一个音符的响鸣持续时长 always @(posedge clk or negedge rst_n) begin if(!rst_n) begin cnt1 &lt;= 0; end else if(press) cnt1 &lt;= 0; else begin if(cnt0 == pre_set - 1)begin if(cnt1 == cishu) cnt1 &lt;= 0; else cnt1 &lt;= cnt1 + 1; end end end //计数有多少个音符，也就是曲谱中有共多少个音符 always @(posedge clk or negedge rst_n) begin if(!rst_n) begin cnt2 &lt;= 0; end else if(press) cnt2 &lt;= 0; else begin if(cnt1 == cishu &amp;&amp; cnt0 == pre_set - 1) begin if(cnt2 == YINFU - 1) begin cnt2 &lt;= 0; end else cnt2 &lt;= cnt2 + 1; end end end //定义音符重复次数 always @(*) begin //当pre_set值变化时触发 case(pre_set) M0:cishu = 242; M1:cishu = 250; M2:cishu = 281; M3:cishu = 315; M4:cishu = 334; M5:cishu = 375; M6:cishu = 421; M7:cishu = 472; endcase end //曲谱定义 always @(*) begin if(flag == 1&#x27;b0) begin case(cnt2) //小星星歌谱 0 : pre_set = M1; 1 : pre_set = M1; 2 : pre_set = M5; 3 : pre_set = M5; 4 : pre_set = M6; 5 : pre_set = M6; 6 : pre_set = M5; 7 : pre_set = M0; 8 : pre_set = M4; 9 : pre_set = M4; 10: pre_set = M3; 11: pre_set = M3; 12: pre_set = M2; 13: pre_set = M2; 14: pre_set = M1; 15: pre_set = M0; 16: pre_set = M5; 17: pre_set = M5; 18: pre_set = M4; 19: pre_set = M4; 20: pre_set = M3; 21: pre_set = M3; 22: pre_set = M2; 23: pre_set = M0; 24: pre_set = M5; 25: pre_set = M5; 26: pre_set = M4; 27: pre_set = M4; 28: pre_set = M3; 29: pre_set = M3; 30: pre_set = M2; 31: pre_set = M0; 32: pre_set = M1; 33: pre_set = M1; 34: pre_set = M5; 35: pre_set = M5; 36: pre_set = M6; 37: pre_set = M6; 38: pre_set = M5; 39: pre_set = M0; 40: pre_set = M4; 41: pre_set = M4; 42: pre_set = M3; 43: pre_set = M3; 44: pre_set = M2; 45: pre_set = M2; 46: pre_set = M1; 47: pre_set = M0; endcase end else begin case(cnt2) //两只老虎歌谱 0 : pre_set = M1; 1 : pre_set = M2; 2 : pre_set = M3; 3 : pre_set = M1; 4 : pre_set = M1; 5 : pre_set = M2; 6 : pre_set = M3; 7 : pre_set = M1; 8 : pre_set = M3; 9 : pre_set = M4; 10: pre_set = M5; 11: pre_set = M0; 12: pre_set = M3; 13: pre_set = M4; 14: pre_set = M5; 15: pre_set = M0; 16: pre_set = M5; 17: pre_set = M6; 18: pre_set = M5; 19: pre_set = M4; 20: pre_set = M3; 21: pre_set = M1; 22: pre_set = M5; 23: pre_set = M6; 24: pre_set = M5; 25: pre_set = M4; 26: pre_set = M3; 27: pre_set = M1; 28: pre_set = M2; 29: pre_set = M5; 30: pre_set = M1; 31: pre_set = M0; 32: pre_set = M2; 33: pre_set = M5; 34: pre_set = M1; 35: pre_set = M0; endcase end end assign pre_div = pre_set &gt;&gt; 1; //除以2 assign cishu_div = cishu * 4 / 5; //向蜂鸣器输出脉冲 always @(posedge clk or negedge rst_n) begin if(!rst_n) begin buzzer &lt;= 1&#x27;b1; end else if(pre_set != M0) begin if(cnt1 &lt; cishu_div) begin if(cnt0 &lt; pre_div) begin buzzer &lt;= 1&#x27;b1; end else begin buzzer &lt;= 1&#x27;b0; end end else begin buzzer &lt;= 1&#x27;b1; end end else buzzer &lt;= 1&#x27;b1; end endmodule 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"课内知识","slug":"课内知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/"},{"name":"verilog","slug":"verilog","permalink":"https://zennnnnnnnnnnn.js.cool/tags/verilog/"}]},{"title":"【硬件知识】选型","slug":"library/嵌入式/硬件/【硬件知识】选型","date":"2022-10-16T15:54:58.000Z","updated":"2022-12-04T05:21:10.633Z","comments":true,"path":"2022/library/嵌入式/硬件/【硬件知识】选型/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E9%80%89%E5%9E%8B/","excerpt":"文章概览","text":"文章概览 稳压电源LDO \\operatorname{PSRR}=20 \\times \\log \\left(\\frac{\\text { VOUT_Noise }_{-}}{\\text {VIN_Noise }_{-}}\\right) 确定输出电压VOUT，建议选择固定输出电压的，不要选有ADJ功能的，这样节省器件，降低干扰。 确定输出电流IOUT，至少留25%余量。 确定压差是否合适，一定要查看规格书上，对应最大电流的最小压差要求。 确认封装，手机上一般用1x1 CSP的LDO 确认PSRR，如果用在低噪声场合，一定要选择高PSRR（80dB以上）的LDO，建议在80dB以上。 如果是电池供电，对续航要求很高，一定要选择IQ低的LDO。 注意LDO的CIN和COUT要求，千万不要错。 如果要快速响应，可以选择带偏置电压的LDO。 常见的LDO品牌：TOSHIBA，NXP，ON，ADI，RICON，SGMICRO，ST，TI，WILLSEMI。 DCDC… mos 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"硬件","slug":"硬件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"选型","slug":"选型","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%80%89%E5%9E%8B/"}]},{"title":"【硬件知识】H桥驱动","slug":"library/嵌入式/硬件/【硬件知识】H桥驱动","date":"2022-10-15T03:16:41.000Z","updated":"2022-12-04T05:20:32.855Z","comments":true,"path":"2022/library/嵌入式/硬件/【硬件知识】H桥驱动/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91H%E6%A1%A5%E9%A9%B1%E5%8A%A8/","excerpt":"文章概览","text":"文章概览 ​ ​ 要使电机运转，必须使对角线上的一对三极管导通。当Q1管和Q4管导通时，电流就从电源正极经Q1从左至右穿过电机，然后再经Q4回到电源负极。该流向的电流将驱动电机顺时针转动。 当Q2管和Q3管导通时，电流就从电源正极经Q3从左至右穿过电机，然后再经Q2回到电源负极。该流向的电流将驱动电机顺时针转动。 栅极驱动驱动芯片——ir2104​ 自举二极管D使用与功率开关管相同耐压等级的肖特基二极管 自举电容的计算 ​ 其中为MOSFET的门极电荷 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"H桥","slug":"H桥","permalink":"https://zennnnnnnnnnnn.js.cool/tags/H%E6%A1%A5/"},{"name":"硬件","slug":"硬件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6/"}]},{"title":"【硬件知识】vco压控振荡器","slug":"library/嵌入式/硬件/【硬件知识】vco压控振荡器","date":"2022-10-15T01:05:28.000Z","updated":"2022-12-04T05:20:39.139Z","comments":true,"path":"2022/library/嵌入式/硬件/【硬件知识】vco压控振荡器/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91vco%E5%8E%8B%E6%8E%A7%E6%8C%AF%E8%8D%A1%E5%99%A8/","excerpt":"vco：用电压控制输出正弦波频率","text":"vco：用电压控制输出正弦波频率 反馈振荡器的分类 电容三端式 电感三端式 改进型电容三点式振荡器—-克拉泼Clapp振荡器 优点：提高了稳定度 缺点：高端不易起振在波段内输出幅度不均匀 改进型电容三点式振荡器——-西勒Seiler振荡器 从频率稳定的角度来看，西勒振荡器稳定性更好 从控制频率的范围来看，西勒振荡器的振荡频率更高 设计原理反馈振荡器设计原理 在谐振频率上，必有++=0 发射极上连接的两个电抗为同性质电抗，另一个为异性质电抗。 西勒振荡器C3改变成固定的小电容，L上并联可变电容 使得 振荡频率： 起振条件： 1、参数确定 从稳定度的角度来看，越小越好。即越小，由决定的频率调节范围就越宽。 但是为了保证起振，也不能过小。 确定了基本原则之后就可以依次确定原件的参数了。 1）振荡器中的电感选择常用的390nH型 2）据此计算 可得 在158~720p之间 3）根据计算，最终选取=100p 4）因此可变电容应取值应包含58~620p。 2、元件选择 1）变容二极管选择1SV149二极管 可以满足在1~8V电压下，电容30~435p，可以满足需求。 ​ 三极管选用9018 电路设计一、电路设计1、电源部分 2、振荡部分 3、射极跟随器 4、高频放大器 二、完整电路图及PCB设计 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"硬件","slug":"硬件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"vco","slug":"vco","permalink":"https://zennnnnnnnnnnn.js.cool/tags/vco/"},{"name":"压控振荡器","slug":"压控振荡器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%8E%8B%E6%8E%A7%E6%8C%AF%E8%8D%A1%E5%99%A8/"}]},{"title":"【硬件知识】芯片熟悉","slug":"library/嵌入式/硬件/【硬件知识】芯片熟悉","date":"2022-10-12T09:58:07.000Z","updated":"2022-12-04T05:20:46.212Z","comments":true,"path":"2022/library/嵌入式/硬件/【硬件知识】芯片熟悉/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E8%8A%AF%E7%89%87%E7%86%9F%E6%82%89/","excerpt":"文章概览","text":"文章概览 IRFB3207：IRF开头的多数都是mos，如 IRFZ44NPbF 、 IRFB4321PbF 、 IRF3205PbF ，当然像irf2104是栅极驱动芯片 MBR20100CT ：mos管形状的肖特基二极管 l7805、6、9，l79xx：79输出负电压 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"硬件","slug":"硬件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"芯片","slug":"芯片","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%8A%AF%E7%89%87/"}]},{"title":"【经验积累】网址整理","slug":"library/经验积累/【经验积累】网址整理","date":"2022-10-12T09:44:55.000Z","updated":"2022-10-12T09:47:59.290Z","comments":true,"path":"2022/library/经验积累/【经验积累】网址整理/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E3%80%90%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF%E3%80%91%E7%BD%91%E5%9D%80%E6%95%B4%E7%90%86/","excerpt":"文章概览","text":"文章概览 论文 Sci-Hub: 将知识带给每个人 直接下载，搜得很全 电影美剧下载 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"经验积累","slug":"经验积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"},{"name":"网址整理","slug":"网址整理","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BD%91%E5%9D%80%E6%95%B4%E7%90%86/"}]},{"title":"【经验积累】论文搜集","slug":"library/经验积累/【经验积累】论文搜集","date":"2022-10-12T09:39:45.000Z","updated":"2023-01-06T15:06:06.465Z","comments":true,"path":"2022/library/经验积累/【经验积累】论文搜集/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E3%80%90%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF%E3%80%91%E8%AE%BA%E6%96%87%E6%90%9C%E9%9B%86/","excerpt":"文章概览","text":"文章概览 已整理 Sci-Hub: 将知识带给每个人 真滴好，免费能下载 待整理如何收集论文 学会翻墙，善用搜索引擎 google scholar: 全部论文都可以看到，但不一定能下载 Arxiv+高级搜索 Github 以老师及其团队为目标搜索 通过google scholar或者通过百度上找到他的主页 知乎和微信的各大公众号 如我爱计算机视觉等等，可以看以前发群里的链接都是来自于哪个平台或者学术机构发的 会议图书馆 IJCAI: https://ijcai-22.org/main-track-accepted-papers AAAI:https://www.aaai.org/Library/library.php CVPR/ICCV/ECCV: https://openaccess.thecvf.com/menu IEEE: https://ieeexplore.ieee.org/Xplore/home.jsp ACM: https://dl.acm.org/ SIAM: https://epubs.siam.org/ 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"经验积累","slug":"经验积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"},{"name":"论文搜集","slug":"论文搜集","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AE%BA%E6%96%87%E6%90%9C%E9%9B%86/"}]},{"title":"【深度学习基础知识】×NN都有些啥","slug":"library/深度学习/【深度学习】基础知识：×NN都有些啥","date":"2022-10-12T09:29:47.000Z","updated":"2022-10-22T02:33:33.447Z","comments":true,"path":"2022/library/深度学习/【深度学习】基础知识：×NN都有些啥/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%9A%C3%97NN%E9%83%BD%E6%9C%89%E4%BA%9B%E5%95%A5/","excerpt":"文章概览","text":"文章概览 名称 结构 应用 我的理解 DNN 多层MLP全连接层，输入层，隐藏层和输出层 所有 最基础的那个 CNN 卷积核卷积 图像处理 匹配特征，突出重点 RNN SNN GNN 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"}]},{"title":"pycharm内无法打开cmd","slug":"solved/pycharm内无法打开cmd","date":"2022-10-09T00:32:16.000Z","updated":"2022-11-01T01:31:44.867Z","comments":true,"path":"2022/solved/pycharm内无法打开cmd/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/solved/pycharm%E5%86%85%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80cmd/","excerpt":"","text":"setting -&gt; tools -&gt; terminal -&gt; shellpath从powershell改成cmd 多想多做，发篇一作","categories":[],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pycharm/"}]},{"title":"能力年表","slug":"others/能力年表","date":"2022-10-05T02:40:21.000Z","updated":"2022-10-05T02:43:02.216Z","comments":true,"path":"2022/others/能力年表/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/others/%E8%83%BD%E5%8A%9B%E5%B9%B4%E8%A1%A8/","excerpt":"用纪年法总结记录大学期间学会了什么，干了什么","text":"用纪年法总结记录大学期间学会了什么，干了什么 大一上年夜饭游戏设计 机械加工制图 大一下 typora git pil、cv2 dqn嵌入式AI 虚拟机 烟雾识别的——yolo模型训练、tf和torch的模型转换 pytq serial读取串口 TextureNet 一些创意 人体姿态识别 树莓派的图传等入门 最小系统板 PCB拼图 hexo博客 大二上 多想多做，发篇一作","categories":[],"tags":[{"name":"like","slug":"like","permalink":"https://zennnnnnnnnnnn.js.cool/tags/like/"}]},{"title":"name","slug":"others/古诗/古诗","date":"2022-10-04T12:56:59.000Z","updated":"2022-10-04T14:44:44.124Z","comments":true,"path":"2022/others/古诗/古诗/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/others/%E5%8F%A4%E8%AF%97/%E5%8F%A4%E8%AF%97/","excerpt":"","text":"总有些古诗触动我，又总会被遗忘， 这里留作纪念。 小松杜荀鹤 自小刺头深草里，而今渐觉出蓬蒿。时人不识凌云木，直待凌云始道高。 绝句志南 古木阴中系短篷，杖藜扶我过桥东。 沾衣欲湿杏花雨，吹面不寒杨柳风。 滕王阁序王勃 豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。(豫章故郡 一作：南昌故郡；青霜 一作：清霜) 时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。（天人 一作：仙人；层峦 一作：层台；即冈 一作：列冈；飞阁流丹 一作：飞阁翔丹） 披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。(轴 通：舳；迷津 一作：弥津；云销雨霁，彩彻区明 一作：虹销雨霁，彩彻云衢) 遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？(遥襟甫畅 一作：遥吟俯畅) 嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！(见机 一作：安贫；以犹欢 一作：而相欢) 勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？ 呜呼！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。 滕王高阁临江渚，佩玉鸣鸾罢歌舞。 画栋朝飞南浦云，珠帘暮卷西山雨。 闲云潭影日悠悠，物换星移几度秋。 阁中帝子今何在？槛外长江空自流。 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"【nerf】nerf-pytorch","slug":"work/nerf/【nerf】nerf-pytorch","date":"2022-09-29T05:09:41.000Z","updated":"2022-11-13T13:47:34.294Z","comments":true,"path":"2022/work/nerf/【nerf】nerf-pytorch/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/nerf/%E3%80%90nerf%E3%80%91nerf-pytorch/","excerpt":"最初的nerf，论文以及代码解读","text":"最初的nerf，论文以及代码解读 假设前提 体素在不同方向的自发光颜色是不一样的 NeRF 源码分析解读（五）_面里多加汤的博客-CSDN博客_nerf代码 多想多做，发篇一作","categories":[],"tags":[{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"【pip】【conda】常用指令","slug":"library/快捷键和常用指令/【pip】【conda】常用指令","date":"2022-09-27T03:48:19.000Z","updated":"2023-01-05T09:03:23.890Z","comments":true,"path":"2022/library/快捷键和常用指令/【pip】【conda】常用指令/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90pip%E3%80%91%E3%80%90conda%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"文章概览","text":"文章概览 pip 咱这个不知道为啥新建虚拟环境后pip版本都过低，需要先python -m pip install --upgrade pip 安装指定版本：pip install xxx==1.15 源 https://pypi.doubanio.com/simple/，https://pypi.mirrors.ustc.edu.cn/simple/，https://pypi.tuna.tsinghua.edu.cn/simple 安装torchpip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html pip install -r requirements.txt (103条消息) cuda和pytorch的关系 - CSDN (103条消息) torch_scatter安装_dream__1的博客-CSDN博客_torch_scatter conda(92条消息) Anaconda conda常用命令：从入门到精通_笨牛慢耕的博客-CSDN博客_anaconda conda命令怎么用 删除虚拟环境 conda remove —name env_name —all 查看虚拟环境列表 conda info —envs 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"快捷键和常用指令","slug":"快捷键和常用指令","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"},{"name":"pip","slug":"pip","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pip/"},{"name":"conda","slug":"conda","permalink":"https://zennnnnnnnnnnn.js.cool/tags/conda/"}]},{"title":"【win】快捷键","slug":"library/快捷键和常用指令/【win】快捷键","date":"2022-09-23T01:20:57.000Z","updated":"2022-12-06T13:47:31.198Z","comments":true,"path":"2022/library/快捷键和常用指令/【win】快捷键/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90win%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"","text":"多用多记 打字 切换中英文标点：ctrl + . 桌面管理 新建窗口：ctrl+win+D 切换窗口：ctrl+win+方向键 关闭窗口：ctrl+win+f4 可视化管理：win+tab 窗口管理 控制窗口：win + 方向键 浏览器内切换：ctrl + alt 关闭当前应用：alt + f4 录屏 xbox功能贼多：win + G 系统辅助 打开设置：win + I 打开任务栏应用：win + 数字 放大镜：win + (+ =) 其他everything我自己设置的 打开（若没有就新建）一个搜索窗口：alt + s 关闭：alt + a 语法和技巧 官方中文帮助文档 限制关键词出现顺序：*stm*data*（无空格） 左下角有找到的文件数 或：|（无空格）；非：! ? 占位，表示一个字符；* 占位，表示一个字符串 不常用同时按fn和esc可以打开键盘音量、亮度等功能 熟知的 切换窗口：alt + tab 返回桌面：win + D 锁屏：win + L 2022.12.6 win + v打开剪切板 win + shift + s截屏 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"快捷键和常用指令","slug":"快捷键和常用指令","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"},{"name":"windows","slug":"windows","permalink":"https://zennnnnnnnnnnn.js.cool/tags/windows/"}]},{"title":"【cmd】常用指令","slug":"library/快捷键和常用指令/【cmd】常用指令","date":"2022-09-23T01:14:55.000Z","updated":"2022-10-22T02:29:52.124Z","comments":true,"path":"2022/library/快捷键和常用指令/【cmd】常用指令/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90cmd%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/","excerpt":"文章概览","text":"文章概览 基础 nvidia-smi 查看显卡使用情况 cd cd到别的盘用cd /d D….. cd .. 返回上一级 cd \\ 返回到根目录 linux cd到windows的盘用cd /mnt/d ...（指windows的linuxi子系统中） cd之后接一个空格，其余没有 路径用右斜杠，与windows不同！ 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"cmd","slug":"cmd","permalink":"https://zennnnnnnnnnnn.js.cool/tags/cmd/"},{"name":"快捷键和常用指令","slug":"快捷键和常用指令","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"}]},{"title":"【pycharm】快捷键","slug":"library/快捷键和常用指令/【pycharm】快捷键","date":"2022-09-23T01:13:23.000Z","updated":"2022-12-06T14:03:01.673Z","comments":true,"path":"2022/library/快捷键和常用指令/【pycharm】快捷键/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90pycharm%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/","excerpt":"多用多记","text":"多用多记 ctrl Q 查看提示 ctrl shift A 全project查找 alt+⬆向上切换函数 收放代码块 展开ctrl + shift + + 收起ctrl + shift + - 折叠某一点：ctrl + - 展开某一层：ctrl + + 基本我自己设置的 run：alt + shift + Q debug：ctrl + shift + Q 多想多做，发篇一作","categories":[],"tags":[{"name":"pycharm","slug":"pycharm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pycharm/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"快捷键和常用指令","slug":"快捷键和常用指令","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"}]},{"title":"【typora】学习","slug":"library/frontend/【typora】学习","date":"2022-09-21T08:31:51.000Z","updated":"2022-10-26T13:51:49.946Z","comments":true,"path":"2022/library/frontend/【typora】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/frontend/%E3%80%90typora%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"typora做笔记","text":"typora做笔记 基础语法进阶表达希腊字母 $\\alpha$ $\\alpha$ 绘图 输入 ```mermaid 然后敲击回车 12345678graph TD %% RL LRa[qwer] --&gt; bb&#123;asdf&#125;a --说明--&gt; c(zxcv)a .-&gt; ba --&gt; db ==&gt; d((asdf)) 123456789101112131415161718192021222324252627gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section A section Completed task :done, des1, 2014-01-06,2014-01-08 Active task :active, des2, 2014-01-09, 3d Future task : des3, after des2, 5d Future task2 : des4, after des3, 5d section Critical tasks Completed task in the critical line :crit, done, 2014-01-06,24h Implement parser and jison :crit, done, after des1, 2d Create tests for parser :crit, active, 3d Future task in critical line :crit, 5d Create tests for renderer :2d Add to mermaid :1d section Documentation Describe gantt syntax :active, a1, after des1, 3d Add gantt diagram to demo page :after a1 , 20h Add another diagram to demo page :doc1, after a1 , 48h section Last section Describe gantt syntax :after doc1, 3d Add gantt diagram to demo page : 20h Add another diagram to demo page : 48h 参考链接： Mermaid从入门到入土——Markdown进阶语法 - 知乎 (zhihu.com) 收起菜单 每日时间安排 8：30 - 规划今天任务 - 9：00 9：00 - 做瑜伽 - 9：30 9：30 - 任务一 - 12：00 2：30 - 任务二 - 17：00 18：00 - 任务三 - 20：00 20：00 - 整理总结md - 快捷方式 ctrl + shift + m打开公式编辑 ctrl + t插入表格 ctrl + b将当前句子用双*包围 | ctrl + i单包围 ctrl + n新建md文件 ctrl + p查询最近的md文件并打开 上下标高亮在偏好设置中有 下标：H~2~O：H~2~O 上标：x^2^：x^2^ 高亮：==key==：==key== 博客专用 &lt;!-- more --&gt; 阅读全文按钮 编辑tags:和top:，保证文章便于查询 &lt;div align = center&gt;文本居中&lt;/div&gt; 植物 陆生植物 标签引用 标签 更多详见 基于 Hexo 的 Markdown 博文语法简介 | EisenHao’s Note 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"},{"name":"typora","slug":"typora","permalink":"https://zennnnnnnnnnnn.js.cool/tags/typora/"}]},{"title":"【开关电源】学习3 —— buck-boost","slug":"learning/开关电源/【开关电源】学习3——buck-boost","date":"2022-09-19T14:42:25.000Z","updated":"2022-09-29T02:56:13.321Z","comments":true,"path":"2022/learning/开关电源/【开关电源】学习3——buck-boost/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A03%E2%80%94%E2%80%94buck-boost/","excerpt":"文章概览","text":"文章概览 演变过程建议看定名芳老师讲的！！ 多想多做，发篇一作","categories":[],"tags":[{"name":"开关电源","slug":"开关电源","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"learning","slug":"learning","permalink":"https://zennnnnnnnnnnn.js.cool/tags/learning/"}]},{"title":"【开关电源】进阶1 —— 稳定性判断","slug":"learning/开关电源/【开关电源】进阶1——稳定性判断","date":"2022-09-19T14:42:25.000Z","updated":"2022-09-29T02:55:38.086Z","comments":true,"path":"2022/learning/开关电源/【开关电源】进阶1——稳定性判断/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E8%BF%9B%E9%98%B61%E2%80%94%E2%80%94%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%A4%E6%96%AD/","excerpt":"定名芳老师讲的真好，爱了爱了！","text":"定名芳老师讲的真好，爱了爱了！ 辐角原理 多想多做，发篇一作","categories":[],"tags":[{"name":"开关电源","slug":"开关电源","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"learning","slug":"learning","permalink":"https://zennnnnnnnnnnn.js.cool/tags/learning/"}]},{"title":"以下都是top0","slug":"一下都是0","date":"2022-09-19T14:42:25.000Z","updated":"2022-09-19T15:31:31.242Z","comments":false,"path":"2022/一下都是0/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/%E4%B8%80%E4%B8%8B%E9%83%BD%E6%98%AF0/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"","slug":"learning/开关电源/【开关电源】理解","date":"2022-09-19T14:24:20.799Z","updated":"2022-10-05T02:54:57.590Z","comments":true,"path":"2022/learning/开关电源/【开关电源】理解/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E7%90%86%E8%A7%A3/","excerpt":"文章概览","text":"文章概览 电感：不降低效率的限流，储能元件 串联电阻：防止功率过大 分析步骤 先把非线性元件拆分 假设和条件 稳定性分析 幅值？？ 看输出电压——准不准，稳不稳 输入动态特性分析——输入电压突变 负载动态性分析——负载电阻突变（2V就算小了） 起动特性分析——1ms左右算很快了 其他 发热情况 效率 未整理 在开关电源中，供电端的电源，经过一个开关管，在开关管导通期，把矩形波加在一次绕组上，使变压器的一次绕组流过锯齿波，变压器磁芯的磁通量也是按锯齿波增长，此时，在变压器的二次绕组将有矩形波输出，把此矩形波输出经整流二极管和滤波电路输出，这就是单端正激。如果不是在开关管导通期输出能量，而是在开关管的导通期积存磁能，在开关管的截止期磁通量下降，在磁通量下降的过程中，变压器二次绕组感生的电压，经整流二管和滤波电路输出，就是单端反激。 加强读图能力，发现相同相似 1mm ~ 1A 纹波——开关电源噪声大！！ 负载变化的影响？ 开关产生毛刺？ lm298n和mp1584不能工作在2A以上？分别是什么？ 有过热保护和短路保护？ 封装 封装名称 封装说明 DIP PQFP QFN BGA PGA mos管选型 开启电压 开启电阻 寄生电容：有一段 多想多做，发篇一作","categories":[],"tags":[]},{"title":"【开关电源】学习2——boost","slug":"learning/开关电源/【开关电源】学习2——boost","date":"2022-09-19T14:20:16.000Z","updated":"2022-09-29T02:56:08.274Z","comments":true,"path":"2022/learning/开关电源/【开关电源】学习2——boost/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A02%E2%80%94%E2%80%94boost/","excerpt":"文章概览","text":"文章概览 多想多做，发篇一作","categories":[],"tags":[{"name":"开关电源","slug":"开关电源","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"learning","slug":"learning","permalink":"https://zennnnnnnnnnnn.js.cool/tags/learning/"}]},{"title":"【开关电源】学习1 —— buck","slug":"learning/开关电源/【开关电源】学习1——buck","date":"2022-09-18T12:18:56.000Z","updated":"2022-09-29T02:56:01.124Z","comments":true,"path":"2022/learning/开关电源/【开关电源】学习1——buck/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A01%E2%80%94%E2%80%94buck/","excerpt":"全部参考 [开关电源入门微视频_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV13K4y1t7ET?spm_id_from=333.337.search-card.all.click&vd_source=1d44e083acfbac7f1e1a9da4097482dc) 同时推荐 [定明芳老师的个人空间_哔哩哔哩_bilibili](https://space.bilibili.com/594893946/video)","text":"全部参考 [开关电源入门微视频_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV13K4y1t7ET?spm_id_from=333.337.search-card.all.click&vd_source=1d44e083acfbac7f1e1a9da4097482dc) 同时推荐 [定明芳老师的个人空间_哔哩哔哩_bilibili](https://space.bilibili.com/594893946/video) 1. 初识开关电源1.1. 开关电源的优点功耗小，体积小 1.2. 开关电源简单版 避免关断时高电流 避免耗费功率 避免顺势高压（二极管续流） 2. 计算 ▲I是电流纹波 补充buck电路的其他形式 多想多做，发篇一作","categories":[],"tags":[{"name":"开关电源","slug":"开关电源","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"learning","slug":"learning","permalink":"https://zennnnnnnnnnnn.js.cool/tags/learning/"}]},{"title":"【深度学习工具】onnx学习","slug":"library/深度学习/工具/【深度学习工具】onnx学习","date":"2022-09-17T14:36:20.000Z","updated":"2022-10-22T02:34:00.815Z","comments":true,"path":"2022/library/深度学习/工具/【深度学习工具】onnx学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E3%80%91onnx%E5%AD%A6%E4%B9%A0/","excerpt":"onnx的pytorch模型部署方法","text":"onnx的pytorch模型部署方法 torch模型转onnx在model.eval()和output = modle(input)后面添加一句话： torch.onnx.export(model, input, &#39;modelname.onnx&#39;)即可导出 onnx支持的算子，可以在 算子文档 中查看 如果不支持报错，怎么查看具体是哪个算子不支持呢？我也不知道。 在 PyTorch 中支持更多 ONNX 算子 onnx模型的使用​ 不知。。 ​ 有空看看部署在安卓设备的方法。（我们新生项目小组已经做好了，用的是maui+onnx ） (105条消息) 在Android设备部署PyTorch模型_紫芝的博客-CSDN博客_android pytorch (105条消息) 将Pytorch模型部署到Android端_YDDUONG的博客-CSDN博客_pytorch模型部署到安卓 mauielectrononnx模型的优点不知。。 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"onnx","slug":"onnx","permalink":"https://zennnnnnnnnnnn.js.cool/tags/onnx/"},{"name":"深度学习工具","slug":"深度学习工具","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"}]},{"title":"【matlab】学习","slug":"library/课内知识/【matlab】学习","date":"2022-09-17T08:31:51.000Z","updated":"2022-12-13T02:33:21.448Z","comments":true,"path":"2022/library/课内知识/【matlab】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90matlab%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"matlab语句，随用随记","text":"matlab语句，随用随记 matlab官网 数据类型cell 创建 123% 有两种方式a=&#123;&#x27;winter&#x27;,123,&#x27;coming&#x27;,&#x27;哈哈&#x27;&#125;; a=cell(1,4); a=&#123;&#x27;winter&#x27;,123,&#x27;coming&#x27;,&#x27;哈哈&#x27;&#125;; 访问 1a&#123;1&#125;; 相关函数 cell2mat：转化为数组，要求 cell 内变量数据类型相同 cellplot：用彩图显示内容 cellfun：A = cellfun(func,C) 将函数 func 应用于元胞数组 C 的每个元胞的内容 函数tf函数：创建传递函数tf创建实值或复值传递函数模型，或转换动态系统模型传递函数形式。 语法 用法 sys = tf(numerator,denominator) 创建连续时间传递函数模型 sys = tf(numerator,denominator,ts) 创建离散时间传递函数模型 例如$sys(s)=\\frac1{2s^2+3s+4}$可以由下面的sys表示 123numerator = 1;denominator = [2,3,4];sys = tf(numerator,denominator) 绘制传递函数的波特图用margin(sys);一句话搞定 若想用该传递函数处理信号，可以用这个方法 z变换 --&gt; 提取分子分母系数 --&gt; 数据类型转换 --&gt; 进行滤波 1234567rc = tf(1, [R*C,1]); % 生成传递函数% margin(rc); % 显示传递函数波特图drc = c2d(rc, 1/Fs); % 进行z变换[a ,b] = tfdata(drc); % 得到分子分母系数a=cell2mat(a(1,1)); % 数据类型转换b=cell2mat(b(1,1));x = filter(a, b, x); % 进行滤波 拟合 p = polyfit(x, y, 2)：输入两组数 x，y 拟合；2 表示用二次函数拟合；返回 p 是对应系数，如 p(1) 对应 x^2 的系数，p(2) 对应 x 的系数 yi = polyval(p,xi)：输入拟合次方系数和输入数组，得到输出值 方程求解：solve 函数1234syms ipi = 0.5*i^2 + 3*i + 1;s = solve(pi == 0.8602,i); 得到方程的解 绘图stem绘制离散信号stem(y)orstem(x,y) square绘制方波信号12T=0:0.01:8*pi;y=square(T); 调整画面 title(‘文字’,’position’,[5,1], ‘Fontsize’,16 ) 3D动画1234567891011121314151617181920212223242526w = pi;z=0:0.01:3;pic_num=1; for t=0:0.05:5 Ex=sin(2*pi*t-k*z)+2; %螺旋线 Ey=cos(2*pi*t-k*z)+2; Lx=Ex(1):0.01:4; %直线辅助线 Ly=0:0.01:Ey(1); plot3(z,Ex,Ey, z,Ex,Ey*0, z,Ex*0+4,Ey, Lx*0,Lx,Lx*0+Ey(1), Ly*0,Ly*0+Ex(1),Ly); %画3维图 hold on quiver3(0,2,2,z(1),Ex(1)-2,Ey(1)-2); %矢量箭头 axis([-1 4 0 4 0 4]); hold off F=getframe; %抓取当前图像 I=frame2im(F); [I,map]=rgb2ind(I,256);%因gif不支持三维数据，所以应调用 rgb2ind，将rgb图像转为关联256种色彩的索引图像 if t==0 imwrite(I,map,&#x27;复指数信号.gif&#x27;,&#x27;gif&#x27;); %创建一个.gif文件，将索引图像数组和其关联的颜色图写入 else imwrite(I,map,&#x27;复指数信号.gif&#x27;,&#x27;gif&#x27;,&#x27;WriteMode&#x27;,&#x27;append&#x27;,&#x27;DelayTime&#x27;,0.01);%将多个图像并入第一个，帧间加入0.01s的延时 end pic_num=pic_num+1;end 绘制3D曲线：plot3函数 可以依次写多组xyz，绘制多条曲线 曲线的取0的维度，用正常维度的数组*0得到 保存gif语句 完全参考： (105条消息) MATLAB：绘制三维偏振光动画_qq_43208092的博客-CSDN博客 音频处理 读取音频audioread，getaudiodata [y,Fs] = audioread(filename) y = getaudiodata(recObj) 播放音频sound，getaudiodata sound(y,Fs) play(recObj) 生成音频文件audiowrite audiowrite(filename,y,Fs) 录制音频audiorecorder，recordblocking 1234recObj = audiorecorder; % audiorecorder(Fs,16,1);disp(&#x27;Start speaking.&#x27;) recordblocking(recObj, 3); %录制 3s 的数据disp(&#x27;End of Recording.&#x27;); 多想多做，发篇一作","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"matlab","slug":"matlab","permalink":"https://zennnnnnnnnnnn.js.cool/tags/matlab/"},{"name":"课内知识","slug":"课内知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/"}]},{"title":"【bard】Linux迷你电脑","slug":"work/嵌入式项目/bard/【bard】Linux迷你电脑","date":"2022-09-16T09:34:35.000Z","updated":"2022-10-14T01:47:52.950Z","comments":true,"path":"2022/work/嵌入式项目/bard/【bard】Linux迷你电脑/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/bard/%E3%80%90bard%E3%80%91Linux%E8%BF%B7%E4%BD%A0%E7%94%B5%E8%84%91/","excerpt":"基于全志 F1C200s，从瞎抄乱画开始","text":"基于全志 F1C200s，从瞎抄乱画开始 理解开发流程了解 F1C200s 开发步骤 小白自制Linux开发板 一. 瞎抄原理图与乱画PCB - 淡墨青云 - 博客园 (cnblogs.com) 机器人的虚拟形象使用了Cortana的模型;NLP功能主要是使用讯飞开放平台实现;CV部分基于OpenCV和JNI开发;视频中语音有两种唤醒方式，关键词唤醒和利用手机额头的距离传感器唤醒;智能家居的网关是自己设计的，基于ESP系列的WiFi芯片… Android Native 常用接口 接口 功能 SDIO SD卡等 OTG TYPE-C、安卓口等 CSI 摄像头（为啥不用USB） SPI、I2C、I2S、RGB、LCD、USB 一切从偶然捡到一块树莓派开始，直到不知为啥把它弄坏了。 于是准备从头做一个小电脑。","categories":[],"tags":[{"name":"like","slug":"like","permalink":"https://zennnnnnnnnnnn.js.cool/tags/like/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"Linux","slug":"Linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Linux/"},{"name":"bard","slug":"bard","permalink":"https://zennnnnnnnnnnn.js.cool/tags/bard/"},{"name":"PCB","slug":"PCB","permalink":"https://zennnnnnnnnnnn.js.cool/tags/PCB/"},{"name":"全志F1C200s","slug":"全志F1C200s","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%85%A8%E5%BF%97F1C200s/"}]},{"title":"【git】学习","slug":"library/嵌入式/【git】学习","date":"2022-09-15T14:51:45.000Z","updated":"2022-12-03T09:13:27.467Z","comments":true,"path":"2022/library/嵌入式/【git】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E3%80%90git%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"git常用语法","text":"git常用语法 常用语句12345678910111213141516# 原封不动复制下来git clone https://github.com/zennnnnnnnnnnn/dqn.git# 新建git initgit add . # 有新文件需要addgit commit -m &quot;上传说明&quot; # 只有内容改动可以直接git commit -agit remote add origin https://github.com/zennnnnnnnnnnn/dqn.gitgit push -u origin main # 首次上传需要-u origin [branch]，以后直接push# 中途参与: init -&gt; remote -&gt; git pull origin main# 强制覆盖：git push -f origin master# 其他git status # 查看提交状态git rm # 删除文件 高级语句12345# 1. 查看历史版本 git log --oneline # 简洁版本git reflog # 查看包括撤回、删除在内的操作以及版本git reset --hard [HEAD] # 回滚到指定版本 gitignore 创建一个.gitignore文件，按照https://blog.csdn.net/ThinkWon/article/details/101447866写入不需要上传的文件。 分支 12345678git branch [name] # 创建分支git checkout [name] # 切换分支git branch # 查看所有分支git checkout -b [name] # 创建并切换到分支git branch -d [name] # 删除分支 其他123# 把目录添加到信任列表git config --global --add safe.directory /media/data/users/jhu3szh/serialize","categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"git","slug":"git","permalink":"https://zennnnnnnnnnnn.js.cool/tags/git/"},{"name":"理工方向","slug":"理工方向","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%90%86%E5%B7%A5%E6%96%B9%E5%90%91/"}]},{"title":"【nerf】汇总笔记","slug":"work/nerf/【nerf】汇总笔记","date":"2022-09-15T12:58:00.000Z","updated":"2022-11-20T14:17:14.241Z","comments":true,"path":"2022/work/nerf/【nerf】汇总笔记/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/work/nerf/%E3%80%90nerf%E3%80%91%E6%B1%87%E6%80%BB%E7%AC%94%E8%AE%B0/","excerpt":"NeRF（Neural Radiance Fields）是指用神经辐射场隐式重建三维场景的方法，一下包括论文、代码、创新和突破点","text":"NeRF（Neural Radiance Fields）是指用神经辐射场隐式重建三维场景的方法，一下包括论文、代码、创新和突破点 应用方法位置编码 nerfnerf-pytorch的Positional Encoding \\gamma(p)=\\left(\\sin \\left(2^{0} \\pi p\\right), \\cos \\left(2^{0} \\pi p\\right), \\cdots, \\sin \\left(2^{L-1} \\pi p\\right), \\cos \\left(2^{L-1} \\pi p\\right)\\right)instant-ngp的 多分辨率哈希编码 volume rendering 方式 nerf mipnerf离散的体素渲染方程： \\hat{C}(\\mathbf{r})=\\sum_{i=1}^{N} T_{i}\\left(1-\\exp \\left(-\\sigma_{i} \\delta_{i}\\right)\\right) \\mathbf{c}_{i}分层取样（Hierarchical volume sampling） nerf 多想多做，发篇一作","categories":[],"tags":[{"name":"like","slug":"like","permalink":"https://zennnnnnnnnnnn.js.cool/tags/like/"},{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"}]},{"title":"【hexo】学习","slug":"library/frontend/【hexo】学习","date":"2022-09-14T07:14:49.000Z","updated":"2023-01-09T03:20:01.737Z","comments":true,"path":"2022/library/frontend/【hexo】学习/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/library/frontend/%E3%80%90hexo%E3%80%91%E5%AD%A6%E4%B9%A0/","excerpt":"hexo补给站，内涵大量链接，萌新还是大佬统统进来看！","text":"hexo补给站，内涵大量链接，萌新还是大佬统统进来看！ hexo日常使用 新建文章hexo new articlename 编辑文章 &lt;!-- more --&gt; 阅读全文按钮 编辑tags:和top:，保证文章便于查询 &lt;div align = center&gt;文本居中&lt;/div&gt; 植物 陆生植物 标签引用 标签 更多详见 基于 Hexo 的 Markdown 博文语法简介 | EisenHao’s Note 上传文章 1234hexo clhexo ghexo d # 地址为https://zennnnnnnnnnnn.github.io。# 本地测试可以用hexo s，并在http://localhost:4000/上看到结果 统计评论 评论由 LeanCloud 管理，在 LeanCloud 查看。 从零开始hexo搭建hexo环境 (105条消息) hexo史上最全搭建教程_zjufangzh的博客-CSDN博客_hexo Hexo系列 | Hexo的基本使用 - 知乎 (zhihu.com) 文件夹说明 source hexo的文章位于source/_posts文件夹中，可以自己新建文件夹存放，没区别。 可通过hexo new page name新建tags、categories、about等文件，存放于此。 _config.yml编辑文章标题等基础元素。 scaffolds文件夹存放新建文章的模板。 themes存放主题，一般留一个就行了。 public：存放生成的页面 其余的都在主题文件夹中。 更换hexo主题一开始就找了一个好看的主题，结果发现功能不能自己开发，最后还是选择了比较常用的next主题。开发新主题——新的支线任务。 next主题使用说明 (105条消息) Next主题美化_蜗牛非牛的博客-CSDN博客_next主题美化 现在的主题包括： ​ 菜单栏、搜索功能、网页图标、联系方式、文章结束标志、文章版权信息、访问统计（ (105条消息) hexo笔记十二：next主题统计网站与文章的浏览人数及次数_小镇攻城狮的博客-CSDN博客 ）、github绑带、修改块间距 （(105条消息) Hexo博客NexT主题下添加文章边框阴影效果_野猿新一的博客-CSDN博客 ）、添加圆角（ (105条消息) next主题美化——背景图片、页面透明化、阴影、圆角、动画_Oath丶forever的博客-CSDN博客_next主题美化 ）、文章排序（ (105条消息) hexo博客文章置顶功能实现的两种方法_玖涯的博客-CSDN博客_hexo置顶 ） 此外还有： ​ 代码复制、修改背景颜色、修改字体 插入图片修改typora的偏好设置，之后从网页复制图片会自动下载图片到对应文件夹。 我用的配置： hexo引用本地图片无法显示 ！！！⬆帮大忙了！感谢⬆！！！ 注意还是要存放图片的文件夹名与 md文件名 一致才行 最后的解决办法： 删除node_modules的hexo-asset-image文件夹，npm install https://github.com/CodeFalling/hexo-asset-image --save，设置配置文件post_asset_folder: true(最后一步很重要，我是看了public文件夹发现没有他，hexo g之后不会打包图片文件) 此外github不太稳定，有时很奇怪的只是打不开.github.io的项目 2022.12.17 改成用图床了，picgo + smms，图床设置如下 （老版本 typora 没有这个选项） 选择 smms 一部分原因是，配置方便，只需要在官网注册账号，下面链接获取 token，填到 picgo 中就行了 smms 存储空间只有 5GB Releases · Molunerfinn/PicGo (github.com) API Access - SM.MS | Dashboard 获取token 遇到的问题 picgo本地导不进去 参考新版本方法 图片上传和显示速度都比较慢（偶尔有快了） 考虑不用smms 博客管理 在_post文件夹中自己新建文件夹，每组文件夹添加模板文档 网页端管理： 在线尝试：Hexon 网站和安装：gitee | github 进一步electron封装 一键部署 bat相关知识 创建`.bat`文件，里面写入正常cmd命令，即可双击运行。 12cd D:\\MyData\\hexoData\\first\\firsthexo cl &amp;&amp; hexo g &amp;&amp; hexo d 我还创建了一键上传和新建博客，放在存放 md 文件的文件夹中。 隐藏部分文章npm install hexo-hide-posts --save安装，并在站点_config.yml下添加如下配置 12345678910# hexo-hide-postshide_posts:# 可以改成其他你喜欢的名字 filter: hidden# 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见# 常见的位置有：index, tag, category, archive, sitemap, feed, etc.# 留空则默认全部隐藏 public_generators: []# 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录 noindex: true 添加版本更新通知 真没想到成功了，以为寄了，有生之年！ ​ npm i hexo-offline-popup --save安装后就有了。 ​ 他主要是一个提升访问速度的插件，只不过配置后好像不增反降，就索性关掉了配置。 百度、谷歌收录​ 完全参考 hexo-submit-urls-to-search-engine 中文文档 | 峡州仙士之页 (cjh0613.com) ，以后更新也得靠他！ ​ 谷歌的上传和搜索都需要翻墙，暂时没弄。 ​ 可以配合 hexo搭建博客系列(六)百度，必应，谷歌收录 食用，里面有些具体操作。 github表 手把手教你在Hexo中使用Github贡献日历（以Next主题为例） 提升访问速度静态资源压缩常规做法用gulp，不过我尝试失败了，同时每次压缩还要输入额外的命令，个人不喜欢 图片压缩：hexo-neat 安装 npm install hexo-neat --save 在配置文件中添加 12345678910111213141516171819202122# hexo-neat# 博文压缩neat_enable: true# 压缩htmlneat_html: enable: true exclude:# 压缩css neat_css: enable: true exclude: - &#x27;**/*.min.css&#x27;# 压缩jsneat_js: enable: true mangle: true output: compress: exclude: - &#x27;**/*.min.js&#x27; - &#x27;**/jquery.fancybox.pack.js&#x27; - &#x27;**/index.js&#x27; GitHub项目地址 Hexo文件压缩：使用hexo-neat插件压缩页面静态资源 完全新建界面 hexo n page mypage创建界面 在新界面中新建index.html文件 在主题配置文档中添加mypage: /mypage/ || fa fa-th 插入数学公式 (106条消息) hexo博客next主题添加对数学公式的支持_阳光洒在杨树上的博客-CSDN博客_hexo公式 代码自动折叠hexo博客代码折叠功能 | Coding World (toimc.com) 完全按照他的改就可以！不用管下面评论。 梦寐以求的样式！！ 内容折叠用html语法写markdown的折叠很容易误判，导致只折叠一部分内容，其他内容乱识别 可以用这样的语句包裹内容，效果还凑合 123&#123;% spoiler &quot;隐藏内容的标题&quot; %&#125;markdown内容&#123;% endspoiler %&#125; 需要先安装 npm install hexo-sliding-spoiler --save 修改样式在 hexo\\node_modules\\hexo-sliding-spoiler\\assetsspoiler.css 这里改提示符 1234567.spoiler.collapsed .spoiler-title:before &#123; content: &quot;Show: &quot;;&#125;.spoiler.expanded .spoiler-title:before &#123; content: &quot;Hide: &quot;;&#125; 缺点： 标题级别间差别不大 hexo + github 速度太慢！ 注意 开steam++加速器会导致不能deploy","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://zennnnnnnnnnnn.js.cool/tags/hexo/"},{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"}]},{"title":"Write blog using markdown","slug":"others/Write-blog-using-markdown","date":"2022-09-12T13:39:44.000Z","updated":"2022-09-29T02:53:56.978Z","comments":true,"path":"2022/others/Write-blog-using-markdown/","link":"","permalink":"https://zennnnnnnnnnnn.js.cool/2022/others/Write-blog-using-markdown/","excerpt":"this is my first try！","text":"this is my first try！ qwerqwer","categories":[],"tags":[{"name":"like","slug":"like","permalink":"https://zennnnnnnnnnnn.js.cool/tags/like/"}]}],"categories":[],"tags":[{"name":"library","slug":"library","permalink":"https://zennnnnnnnnnnn.js.cool/tags/library/"},{"name":"模块","slug":"模块","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A8%A1%E5%9D%97/"},{"name":"嵌入式","slug":"嵌入式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"},{"name":"编码器","slug":"编码器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BC%96%E7%A0%81%E5%99%A8/"},{"name":"amg8833","slug":"amg8833","permalink":"https://zennnnnnnnnnnn.js.cool/tags/amg8833/"},{"name":"work","slug":"work","permalink":"https://zennnnnnnnnnnn.js.cool/tags/work/"},{"name":"忆阻器","slug":"忆阻器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%86%E9%98%BB%E5%99%A8/"},{"name":"chatgpt","slug":"chatgpt","permalink":"https://zennnnnnnnnnnn.js.cool/tags/chatgpt/"},{"name":"solved","slug":"solved","permalink":"https://zennnnnnnnnnnn.js.cool/tags/solved/"},{"name":"数码管","slug":"数码管","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E7%A0%81%E7%AE%A1/"},{"name":"测距","slug":"测距","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B5%8B%E8%B7%9D/"},{"name":"超声波","slug":"超声波","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%B6%85%E5%A3%B0%E6%B3%A2/"},{"name":"嵌入式积累","slug":"嵌入式积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF/"},{"name":"控制","slug":"控制","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%8E%A7%E5%88%B6/"},{"name":"python","slug":"python","permalink":"https://zennnnnnnnnnnn.js.cool/tags/python/"},{"name":"win32gui","slug":"win32gui","permalink":"https://zennnnnnnnnnnn.js.cool/tags/win32gui/"},{"name":"psutil","slug":"psutil","permalink":"https://zennnnnnnnnnnn.js.cool/tags/psutil/"},{"name":"OLED","slug":"OLED","permalink":"https://zennnnnnnnnnnn.js.cool/tags/OLED/"},{"name":"积累","slug":"积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A7%AF%E7%B4%AF/"},{"name":"寄存器","slug":"寄存器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%AF%84%E5%AD%98%E5%99%A8/"},{"name":"陀螺仪","slug":"陀螺仪","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%99%80%E8%9E%BA%E4%BB%AA/"},{"name":"HAL库","slug":"HAL库","permalink":"https://zennnnnnnnnnnn.js.cool/tags/HAL%E5%BA%93/"},{"name":"软件","slug":"软件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%BD%AF%E4%BB%B6/"},{"name":"i2c","slug":"i2c","permalink":"https://zennnnnnnnnnnn.js.cool/tags/i2c/"},{"name":"通信","slug":"通信","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%80%9A%E4%BF%A1/"},{"name":"下载视频","slug":"下载视频","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/"},{"name":"stm","slug":"stm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/stm/"},{"name":"spi通信","slug":"spi通信","permalink":"https://zennnnnnnnnnnn.js.cool/tags/spi%E9%80%9A%E4%BF%A1/"},{"name":"nrf24l01","slug":"nrf24l01","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nrf24l01/"},{"name":"FPGA","slug":"FPGA","permalink":"https://zennnnnnnnnnnn.js.cool/tags/FPGA/"},{"name":"modelsim","slug":"modelsim","permalink":"https://zennnnnnnnnnnn.js.cool/tags/modelsim/"},{"name":"课内知识","slug":"课内知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/"},{"name":"打包","slug":"打包","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%89%93%E5%8C%85/"},{"name":"pyinstaller","slug":"pyinstaller","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pyinstaller/"},{"name":"nuitka","slug":"nuitka","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nuitka/"},{"name":"前端","slug":"前端","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%89%8D%E7%AB%AF/"},{"name":"pyqt","slug":"pyqt","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pyqt/"},{"name":"pybluez","slug":"pybluez","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pybluez/"},{"name":"蓝牙","slug":"蓝牙","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%93%9D%E7%89%99/"},{"name":"stm32cubemx","slug":"stm32cubemx","permalink":"https://zennnnnnnnnnnn.js.cool/tags/stm32cubemx/"},{"name":"博客","slug":"博客","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"数学建模","slug":"数学建模","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1/"},{"name":"数据处理","slug":"数据处理","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"},{"name":"算法","slug":"算法","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%AE%97%E6%B3%95/"},{"name":"线性规划","slug":"线性规划","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92/"},{"name":"整数规划","slug":"整数规划","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/"},{"name":"nerf","slug":"nerf","permalink":"https://zennnnnnnnnnnn.js.cool/tags/nerf/"},{"name":"网盘","slug":"网盘","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BD%91%E7%9B%98/"},{"name":"树莓派","slug":"树莓派","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"滤波","slug":"滤波","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%BB%A4%E6%B3%A2/"},{"name":"硬件知识","slug":"硬件知识","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86/"},{"name":"pcb","slug":"pcb","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pcb/"},{"name":"航模","slug":"航模","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%88%AA%E6%A8%A1/"},{"name":"公式","slug":"公式","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%85%AC%E5%BC%8F/"},{"name":"regedit","slug":"regedit","permalink":"https://zennnnnnnnnnnn.js.cool/tags/regedit/"},{"name":"键盘","slug":"键盘","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%94%AE%E7%9B%98/"},{"name":"k210","slug":"k210","permalink":"https://zennnnnnnnnnnn.js.cool/tags/k210/"},{"name":"开发板","slug":"开发板","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%8F%91%E6%9D%BF/"},{"name":"linux","slug":"linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/linux/"},{"name":"ubuntu","slug":"ubuntu","permalink":"https://zennnnnnnnnnnn.js.cool/tags/ubuntu/"},{"name":"make","slug":"make","permalink":"https://zennnnnnnnnnnn.js.cool/tags/make/"},{"name":"理工方向","slug":"理工方向","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%90%86%E5%B7%A5%E6%96%B9%E5%90%91/"},{"name":"Linux","slug":"Linux","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Linux/"},{"name":"深度学习","slug":"深度学习","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/"},{"name":"numpy","slug":"numpy","permalink":"https://zennnnnnnnnnnn.js.cool/tags/numpy/"},{"name":"代码","slug":"代码","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E4%BB%A3%E7%A0%81/"},{"name":"torch","slug":"torch","permalink":"https://zennnnnnnnnnnn.js.cool/tags/torch/"},{"name":"语言","slug":"语言","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AF%AD%E8%A8%80/"},{"name":"V831","slug":"V831","permalink":"https://zennnnnnnnnnnn.js.cool/tags/V831/"},{"name":"pycharm","slug":"pycharm","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pycharm/"},{"name":"Point-NeRF","slug":"Point-NeRF","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Point-NeRF/"},{"name":"Block-NeRF","slug":"Block-NeRF","permalink":"https://zennnnnnnnnnnn.js.cool/tags/Block-NeRF/"},{"name":"github","slug":"github","permalink":"https://zennnnnnnnnnnn.js.cool/tags/github/"},{"name":"inte","slug":"inte","permalink":"https://zennnnnnnnnnnn.js.cool/tags/inte/"},{"name":"钢琴","slug":"钢琴","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%92%A2%E7%90%B4/"},{"name":"latex","slug":"latex","permalink":"https://zennnnnnnnnnnn.js.cool/tags/latex/"},{"name":"贝叶斯","slug":"贝叶斯","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%B4%9D%E5%8F%B6%E6%96%AF/"},{"name":"css","slug":"css","permalink":"https://zennnnnnnnnnnn.js.cool/tags/css/"},{"name":"hexo","slug":"hexo","permalink":"https://zennnnnnnnnnnn.js.cool/tags/hexo/"},{"name":"深度学习工具","slug":"深度学习工具","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"},{"name":"tensorboard","slug":"tensorboard","permalink":"https://zennnnnnnnnnnn.js.cool/tags/tensorboard/"},{"name":"verilog","slug":"verilog","permalink":"https://zennnnnnnnnnnn.js.cool/tags/verilog/"},{"name":"硬件","slug":"硬件","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%A1%AC%E4%BB%B6/"},{"name":"选型","slug":"选型","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E9%80%89%E5%9E%8B/"},{"name":"H桥","slug":"H桥","permalink":"https://zennnnnnnnnnnn.js.cool/tags/H%E6%A1%A5/"},{"name":"vco","slug":"vco","permalink":"https://zennnnnnnnnnnn.js.cool/tags/vco/"},{"name":"压控振荡器","slug":"压控振荡器","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%8E%8B%E6%8E%A7%E6%8C%AF%E8%8D%A1%E5%99%A8/"},{"name":"芯片","slug":"芯片","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%8A%AF%E7%89%87/"},{"name":"经验积累","slug":"经验积累","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/"},{"name":"网址整理","slug":"网址整理","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E7%BD%91%E5%9D%80%E6%95%B4%E7%90%86/"},{"name":"论文搜集","slug":"论文搜集","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E8%AE%BA%E6%96%87%E6%90%9C%E9%9B%86/"},{"name":"like","slug":"like","permalink":"https://zennnnnnnnnnnn.js.cool/tags/like/"},{"name":"快捷键和常用指令","slug":"快捷键和常用指令","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"},{"name":"pip","slug":"pip","permalink":"https://zennnnnnnnnnnn.js.cool/tags/pip/"},{"name":"conda","slug":"conda","permalink":"https://zennnnnnnnnnnn.js.cool/tags/conda/"},{"name":"windows","slug":"windows","permalink":"https://zennnnnnnnnnnn.js.cool/tags/windows/"},{"name":"cmd","slug":"cmd","permalink":"https://zennnnnnnnnnnn.js.cool/tags/cmd/"},{"name":"typora","slug":"typora","permalink":"https://zennnnnnnnnnnn.js.cool/tags/typora/"},{"name":"开关电源","slug":"开关电源","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/"},{"name":"learning","slug":"learning","permalink":"https://zennnnnnnnnnnn.js.cool/tags/learning/"},{"name":"onnx","slug":"onnx","permalink":"https://zennnnnnnnnnnn.js.cool/tags/onnx/"},{"name":"matlab","slug":"matlab","permalink":"https://zennnnnnnnnnnn.js.cool/tags/matlab/"},{"name":"bard","slug":"bard","permalink":"https://zennnnnnnnnnnn.js.cool/tags/bard/"},{"name":"PCB","slug":"PCB","permalink":"https://zennnnnnnnnnnn.js.cool/tags/PCB/"},{"name":"全志F1C200s","slug":"全志F1C200s","permalink":"https://zennnnnnnnnnnn.js.cool/tags/%E5%85%A8%E5%BF%97F1C200s/"},{"name":"git","slug":"git","permalink":"https://zennnnnnnnnnnn.js.cool/tags/git/"}]}