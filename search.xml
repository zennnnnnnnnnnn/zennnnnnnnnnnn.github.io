<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>【nerf】汇总笔记</title>
    <url>/2022/work/nerf/%E3%80%90nerf%E3%80%91%E6%B1%87%E6%80%BB%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">NeRF（Neural Radiance Fields）是指用神经辐射场隐式重建三维场景的方法，一下包括论文、代码、创新和突破点</div>
          </div>
<span id="more"></span>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e1d4d54a.png" alt="MLP 网络的创建 "></p>
<h2 id="应用方法"><a href="#应用方法" class="headerlink" title="应用方法"></a>应用方法</h2><h3 id="位置编码"><a href="#位置编码" class="headerlink" title="位置编码     "></a>位置编码     <span class="label info">nerf</span></h3><h4 id="nerf-pytorch的Positional-Encoding"><a href="#nerf-pytorch的Positional-Encoding" class="headerlink" title="nerf-pytorch的Positional Encoding"></a>nerf-pytorch的<strong>Positional Encoding</strong></h4><script type="math/tex; mode=display">
\gamma(p)=\left(\sin \left(2^{0} \pi p\right), \cos \left(2^{0} \pi p\right), \cdots, \sin \left(2^{L-1} \pi p\right), \cos \left(2^{L-1} \pi p\right)\right)</script><h4 id="instant-ngp的-多分辨率哈希编码"><a href="#instant-ngp的-多分辨率哈希编码" class="headerlink" title="instant-ngp的 多分辨率哈希编码"></a>instant-ngp的 <strong>多分辨率哈希编码</strong></h4><p><img src="https://s1.xptou.com/2023/01/19/63c91e2143889.png" alt="1664429458270"></p>
<h3 id="volume-rendering-方式"><a href="#volume-rendering-方式" class="headerlink" title="volume rendering 方式        "></a>volume rendering 方式    <span class="label info">nerf</span>    <span class="label primary">mipnerf</span></h3><h4 id="离散的体素渲染方程："><a href="#离散的体素渲染方程：" class="headerlink" title="离散的体素渲染方程："></a>离散的体素渲染方程：</h4><script type="math/tex; mode=display">
\hat{C}(\mathbf{r})=\sum_{i=1}^{N} T_{i}\left(1-\exp \left(-\sigma_{i} \delta_{i}\right)\right) \mathbf{c}_{i}</script><h3 id="分层取样（Hierarchical-volume-sampling）"><a href="#分层取样（Hierarchical-volume-sampling）" class="headerlink" title="分层取样（Hierarchical volume sampling） "></a>分层取样（Hierarchical volume sampling） <span class="label info">nerf</span></h3><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
        <tag>like</tag>
      </tags>
  </entry>
  <entry>
    <title>【nerf】Block-NeRF笔记</title>
    <url>/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="note warning">
            <div align="center">把大场景分成多个小场景，分别训练，最后合成分块优点：方便**更新、扩展**，可以**节省内存**以训练超大规模nerf</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<ul>
<li><p>谷歌Waymo研究人员用<strong>280 万张</strong>图像中渲染了<strong>旧金山整个街区</strong>，分块共<strong>35个</strong>，是<strong>迄今为止规模最大</strong>的nerf</p>
<p>（谷歌Waymo 是一家研发自动驾驶汽车的公司 ）<img src="https://s1.xptou.com/2023/01/19/63c91be279583.png" alt="1667226872521"></p>
</li>
<li><p><strong>块的范围选择</strong>：每个十字路口作为圆心，均匀排列的球，半径满足覆盖街道的75%，保证任意两个Block-NeRF之间有50％的重叠。</p>
</li>
<li><p>创新点：</p>
<ol>
<li>训练单独的block：<strong>Appearance</strong> Embeddings、Learned <strong>Pose</strong> Refinement、<strong>Exposure</strong> Input（还有Transient Objects、Visibility Prediction，没在实验表格中）</li>
</ol>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dc3e3a18.png" alt="1667118074452"></p>
<ol>
<li>block相关：Block-NeRF Selection、Block-NeRF Compositing、Appearance Matching</li>
</ol>
</li>
</ul>
<h4 id="相关：-mip-nerf、nerf-w、barf"><a href="#相关：-mip-nerf、nerf-w、barf" class="headerlink" title="相关： mip-nerf、nerf-w、barf"></a>相关： <strong>mip-nerf</strong>、<strong>nerf-w</strong>、<strong>barf</strong></h4><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><p>早期工作通常侧重于<strong>small-scale</strong>或者<strong>object-centric（以对象为中心）</strong>的场景重建</p>
<h2 id="一、训练单独的block"><a href="#一、训练单独的block" class="headerlink" title="一、训练单独的block"></a>一、训练单独的block</h2><p>是<strong>mip-NeRF</strong>中提出的模型的扩展</p>
<blockquote>
<p>如果NeRF在每个<strong>pixel</strong>用<strong>single ray</strong>来采样，会出现模糊和锯齿</p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/新建文件夹/暂时/nerf/Block-nerf汇报/讲解Block-nerf/1667295256779.png" alt="1667295256779" style="zoom: 50%;"></p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/新建文件夹/暂时/nerf/Block-nerf汇报/讲解Block-nerf/1667296893078.png" alt="1667296893078" style="zoom: 50%;"></p>
<p>通过有效地渲染抗锯齿圆锥截头体而不是射线，mip-NeRF 减少了令人反感的锯齿伪影并显着提高了 NeRF 表示精细细节的能力，同时也比 NeRF <strong>快 7%</strong> 和<strong>一半的大小</strong>。 与 NeRF 相比，mip-NeRF 在使用 NeRF 呈现的数据集上将平均错误率降低了 <strong>17%</strong>，在我们呈现的该数据集的具有挑战性的多尺度变体上降低了 <strong>60%</strong>。  Mip-NeRF 还能够在我们的多尺度数据集上匹配蛮力超采样 NeRF 的准确性，同时<strong>快 22 倍</strong>。 （翻译自mip-nerf摘要）</p>
</blockquote>
<h3 id="1-Appearance-Embeddings"><a href="#1-Appearance-Embeddings" class="headerlink" title="1. Appearance Embeddings"></a>1. <strong>Appearance</strong> Embeddings</h3><p>借用<strong>nerf-W</strong>的外观编码，用<strong>Generative Latent Optimization</strong>优化外观嵌入向量</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dc7ef7b5.png" alt="1667264387582"></p>
<h4 id="NeRF-W"><a href="#NeRF-W" class="headerlink" title="NeRF-W"></a>NeRF-W</h4><h3 id="2-Learned-Pose-Refinement"><a href="#2-Learned-Pose-Refinement" class="headerlink" title="2. Learned Pose Refinement"></a>2. Learned <strong>Pose</strong> Refinement</h3><p>与nerf本身一起学习优化<strong>平移</strong>和<strong>旋转</strong>偏移量</p>
<h4 id="barf、A-NeRF、NeRF-、iNeRF"><a href="#barf、A-NeRF、NeRF-、iNeRF" class="headerlink" title="barf、A-NeRF、NeRF-、iNeRF"></a><strong>barf</strong>、A-NeRF、NeRF-、iNeRF</h4><h3 id="3-Exposure-Input"><a href="#3-Exposure-Input" class="headerlink" title="3. Exposure Input"></a>3. <strong>Exposure</strong> Input</h3><p>把相机的曝光参数作为输入，$\gamma_{PE}=shutter \quad speed  \times analog \quad gain / t$</p>
<p>$\gamma_{PE}$用的是四级正弦位置编码，$t$是一个系数，实验中取1000</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dcb7c248.png" alt="1667265226170"></p>
<h3 id="4-Transient-Objects运动物体"><a href="#4-Transient-Objects运动物体" class="headerlink" title="4. Transient Objects运动物体"></a>4. Transient Objects运动物体</h3><p>用语义分割模型，<strong>忽略动态物体</strong>，例如汽车、行人</p>
<p>10</p>
<h3 id="5-Visibility-Prediction（实际上好像没用上）"><a href="#5-Visibility-Prediction（实际上好像没用上）" class="headerlink" title="5. Visibility Prediction（实际上好像没用上）"></a>5. Visibility Prediction（实际上好像没用上）</h3><p>用于判断一个区域是否可见，网络很小，可以独立运行</p>
<p>用一个小MLP $f_{v}$ ，输入<strong>位置</strong>和<strong>角度</strong>，输出该点<strong>可见性</strong>，进入射线采样计算</p>
<p>用于<strong>选择Block-NeRF</strong>，和<strong>确定在两个 NeRF 之间执行外观匹配的位置</strong></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dceaee94.png" alt="1667293450480"></p>
<h4 id="NeRV"><a href="#NeRV" class="headerlink" title="NeRV"></a>NeRV</h4><h2 id="二、合并多个Block-NeRF"><a href="#二、合并多个Block-NeRF" class="headerlink" title="二、合并多个Block-NeRF"></a>二、合并多个Block-NeRF</h2><h3 id="Block-NeRF筛选机制"><a href="#Block-NeRF筛选机制" class="headerlink" title="Block-NeRF筛选机制"></a>Block-NeRF筛选机制</h3><ul>
<li>只考虑目标视点半径范围内的Block-NeRFs</li>
<li>计算Block-NeRF的<strong>可见性</strong>（对应上面的Visibility Prediction），若<strong>平均可见性</strong>低于阈值，则舍弃</li>
</ul>
<h3 id="Block-NeRF合并"><a href="#Block-NeRF合并" class="headerlink" title="Block-NeRF合并"></a>Block-NeRF合并</h3><p>把最终每个Block-NeRF渲染的图像，用<strong>反距离加权</strong>（IDW）——保证各个Block-NeRF间平滑过渡</p>
<blockquote>
<p>他们还探索了相关的加权方法（没读懂，很拗口），但是会导致伪影和时间不连贯</p>
<p>We also explored a variant of IDW where the interpolation was performed over projected 3D points predicted by the expected Block-NeRF depth. This method suffers when the depth prediction is incorrect, leading to artifacts and temporal incoherence.</p>
<p>他们也尝试了用可见性（Visibility Prediction）加权，对远处重建更清晰，但是会导致时间的不连贯</p>
<p>Finally, we experiment with weighing the Block-NeRFs based on per-pixel and per-image predicted visibility. This produces sharper reconstructions of further-away areas but is prone to <strong>temporal inconsistency</strong>. Therefore, these methods are best used only when rendering still images. We provide further details in the supplement.</p>
</blockquote>
<h3 id="Appearance-Matching-外观匹配"><a href="#Appearance-Matching-外观匹配" class="headerlink" title="Appearance Matching 外观匹配"></a><strong>Appearance</strong> Matching 外观匹配</h3><p>如果每个NeRF单独训练，<strong>同样的外观编码可能会对应不同的天气情况</strong>，导致块交界处无法正确合并。</p>
<p>对于有多个Block-NeRF覆盖的区域，用一小段时间（约100次迭代）<strong>单独训练外观编码</strong>，而完全停止NeRF网络的更新    </p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dd2972a6.png" alt="1667292838757"></p>
<h2 id="Results-and-Experiments"><a href="#Results-and-Experiments" class="headerlink" title="Results and Experiments"></a>Results and Experiments</h2><ol>
<li><p><strong>采集数据</strong>方法：车顶装八个方向摄像头，行驶采集图像</p>
</li>
<li><p><strong>Model Ablations</strong></p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/新建文件夹/暂时/nerf/Block-nerf汇报/讲解Block-nerf/1667118074452.png" alt="1667118074452" style="zoom:67%;"></p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Block-NeRF%E7%AC%94%E8%AE%B0/新建文件夹/暂时/nerf/Block-nerf汇报/讲解Block-nerf/1667293581197.png" alt="1667293581197" style="zoom: 50%;"></p>
<p>| 方法       | 效果                                                         |<br>| ————— | —————————————————————————————— |<br>| Appearance | 去掉伪影                                                     |<br>| Pose Opt   | 变清晰                                                       |<br>| Exposure   | 略微改善，便于改变结果的曝光度to change the exposure during inference |</p>
</li>
<li><p>块<strong>越小越好</strong><img src="https://s1.xptou.com/2023/01/19/63c91dd6474be.png" alt="1667118457009"></p>
</li>
<li><p>插值方法</p>
</li>
</ol>
<h2 id="主要问题"><a href="#主要问题" class="headerlink" title="主要问题"></a>主要问题</h2><h3 id="瞬态物体解决方法"><a href="#瞬态物体解决方法" class="headerlink" title="瞬态物体解决方法"></a>瞬态物体解决方法</h3><ul>
<li><p><strong>学习瞬态对象</strong>learning transient objects ：<strong>NeRF-W</strong></p>
</li>
<li><p><strong>对瞬态对象建模</strong>directly modeling dynamic objects ：43、68</p>
</li>
</ul>
<h3 id="sampling-unbounded-volumetric-representations解决方法"><a href="#sampling-unbounded-volumetric-representations解决方法" class="headerlink" title="sampling unbounded volumetric representations解决方法"></a>sampling unbounded volumetric representations解决方法</h3><p><strong>NeRF++</strong>、<strong>Mip-NeRF 360</strong></p>
<h3 id="加速渲染"><a href="#加速渲染" class="headerlink" title="加速渲染"></a>加速渲染</h3><ul>
<li><strong>缓存</strong>NeRF caching techniques： <strong>Fastnerf</strong>、25、73</li>
<li><strong>稀疏体素网格</strong>sparse voxel grids：34</li>
<li>其他：41、59、72</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
        <tag>Block-NeRF</tag>
      </tags>
  </entry>
  <entry>
    <title>【开关电源】学习3——buck-boost</title>
    <url>/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A03%E2%80%94%E2%80%94buck-boost/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><img src="https://s1.xptou.com/2023/01/18/63c80f82f3f8c.png" alt="1663599045317"></p>
<ul>
<li>演变过程建议看定名芳老师讲的！！</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>开关电源</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>【开关电源】进阶1——稳定性判断</title>
    <url>/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E8%BF%9B%E9%98%B61%E2%80%94%E2%80%94%E7%A8%B3%E5%AE%9A%E6%80%A7%E5%88%A4%E6%96%AD/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">定名芳老师讲的真好，爱了爱了！</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="辐角原理"><a href="#辐角原理" class="headerlink" title="辐角原理"></a>辐角原理</h2><p><img src="https://s1.xptou.com/2023/01/19/63c9082517b1a.png" alt="1663599708816"></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>开关电源</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>【开关电源】学习2——boost</title>
    <url>/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A02%E2%80%94%E2%80%94boost/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  <img src="https://s1.xptou.com/2023/01/18/63c80f7ebd6b3.png" alt="1663597318714"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9080c0cfcd.png" alt="1663598269759"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c908113e645.png" alt="1663598343134"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c90816d6918.png" alt="1663597764124"></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>开关电源</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>【开关电源】学习1——buck</title>
    <url>/2022/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E5%AD%A6%E4%B9%A01%E2%80%94%E2%80%94buck/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">全部参考 [开关电源入门微视频_哔哩哔哩_bilibili](https://www.bilibili.com/video/BV13K4y1t7ET?spm_id_from=333.337.search-card.all.click&vd_source=1d44e083acfbac7f1e1a9da4097482dc) 同时推荐 [定明芳老师的个人空间_哔哩哔哩_bilibili](https://space.bilibili.com/594893946/video) </div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="1-初识开关电源"><a href="#1-初识开关电源" class="headerlink" title="1. 初识开关电源"></a>1. 初识开关电源</h2><h4 id="1-1-开关电源的优点"><a href="#1-1-开关电源的优点" class="headerlink" title="1.1. 开关电源的优点"></a>1.1. 开关电源的优点</h4><p>功耗小，体积小</p>
<h4 id="1-2-开关电源简单版"><a href="#1-2-开关电源简单版" class="headerlink" title="1.2. 开关电源简单版"></a>1.2. 开关电源简单版</h4><p><img src="https://s1.xptou.com/2023/01/18/63c80dcf6ae7d.png" alt="1663507058896"></p>
<ol>
<li><p>避免关断时高电流</p>
</li>
<li><p>避免耗费功率</p>
</li>
<li><p>避免顺势高压（二极管续流）</p>
</li>
</ol>
<h2 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算"></a>2. 计算</h2><p><img src="https://s1.xptou.com/2023/01/18/63c80edec0525.png" alt="1663582916508"></p>
<p><img src="https://s1.xptou.com/2023/01/18/63c80ee8746ad.png" alt="1663583123696"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c907f06432d.png" alt="1663596608307"></p>
<p>▲I是电流纹波</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c907f5d9804.png" alt="1663596664682"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c907fb6e941.png" alt="1663596760690"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9080112a10.png" alt="1663632762752"></p>
<h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>buck电路的其他形式</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c90804b7847.png" alt="1663760481426"></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>开关电源</tag>
        <tag>learning</tag>
      </tags>
  </entry>
  <entry>
    <title>【bard】Linux迷你电脑</title>
    <url>/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/bard/%E3%80%90bard%E3%80%91Linux%E8%BF%B7%E4%BD%A0%E7%94%B5%E8%84%91/</url>
    <content><![CDATA[<div class="note info">
            <div align="center">基于全志 F1C200s，从瞎抄乱画开始</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="理解开发流程"><a href="#理解开发流程" class="headerlink" title="理解开发流程"></a>理解开发流程</h2><h4 id="了解-F1C200s-开发步骤"><a href="#了解-F1C200s-开发步骤" class="headerlink" title="了解 F1C200s 开发步骤"></a>了解 F1C200s 开发步骤</h4><p>   <a href="https://www.cnblogs.com/twzy/p/14714651.html">小白自制Linux开发板 一. 瞎抄原理图与乱画PCB - 淡墨青云 - 博客园 (cnblogs.com)</a> </p>
<p>机器人的虚拟形象使用了Cortana的模型;NLP功能主要是使用讯飞开放平台实现;CV部分基于OpenCV和JNI开发;视频中语音有两种唤醒方式，关键词唤醒和利用手机额头的距离传感器唤醒;智能家居的网关是自己设计的，基于ESP系列的WiFi芯片…</p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e39716be.jpg" alt="img">   </p>
<p> Android Native </p>
<h2 id="常用接口"><a href="#常用接口" class="headerlink" title="常用接口"></a>常用接口</h2><div class="table-container">
<table>
<thead>
<tr>
<th>接口</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td>SDIO</td>
<td>SD卡等</td>
</tr>
<tr>
<td>OTG</td>
<td>TYPE-C、安卓口等</td>
</tr>
<tr>
<td>CSI</td>
<td>摄像头（为啥不用USB）</td>
</tr>
<tr>
<td>SPI、I2C、I2S、RGB、LCD、USB</td>
</tr>
</tbody>
</table>
</div>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>一切从偶然捡到一块树莓派开始，直到不知为啥把它弄坏了。</p>
<p>于是准备从头做一个小电脑。</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>like</tag>
        <tag>Linux</tag>
        <tag>bard</tag>
        <tag>PCB</tag>
        <tag>全志F1C200s</tag>
      </tags>
  </entry>
  <entry>
    <title>一下都是0</title>
    <url>/2022/%E4%B8%80%E4%B8%8B%E9%83%BD%E6%98%AF0/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>【自制无刷电调】原理</title>
    <url>/2023/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E8%87%AA%E5%88%B6%E6%97%A0%E5%88%B7%E7%94%B5%E8%B0%83%E3%80%91%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="无刷电调"><a href="#无刷电调" class="headerlink" title="无刷电调"></a>无刷电调</h2><p>控制无刷电机旋转，需要电调（Electronic Speed Control）生成这样的三向信号，-1,1,0交替</p>
<p><img src="https://s2.loli.net/2023/08/08/JY9fiXnmdrICLFu.png" alt="1280px-Storm-Moment-und-Drehwinkel.svg"></p>
<p>技术核心在于：根据转子转速，控制三相电频率。</p>
<p>一般方法有两种：直接用霍尔传感器检测转子；反电势法（BEMF）。咱主要研究第二种。</p>
<h2 id="反电势法"><a href="#反电势法" class="headerlink" title="反电势法"></a>反电势法</h2><p>电调输出时，总有一路不通电。于是可以利用这一路，检测其电压，进而推断转子位置。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>【math】高斯积分(Gaussian Quadrature)</title>
    <url>/2023/library/math/%E3%80%90math%E3%80%91%E9%AB%98%E6%96%AF%E7%A7%AF%E5%88%86(Gaussian%20Quadrature)/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="数值积分核心思想"><a href="#数值积分核心思想" class="headerlink" title="数值积分核心思想"></a>数值积分核心思想</h2><p>对所有积分做如下变换，即，用有限的点求积分</p>
<script type="math/tex; mode=display">
\int_{a}^{b}f(x)dx\approx\sum_{i=1}^{n}w_{i}f\left(x_{i}\right)</script><ol>
<li>把函数泰勒展开，近似成有限阶的多项式</li>
<li>对于固定的阶数，有固定的 $w_i$ 和 $x_i$ 的选取方法，直接取值求和就行</li>
</ol>
<p>阶数对应的 $w_i$ 和 $x_i$ 求法，以及这么做的原理详见<a href="https://zhuanlan.zhihu.com/p/521630645">有限元中的高斯积分 - 知乎</a></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>math</tag>
      </tags>
  </entry>
  <entry>
    <title>windows的linux子系统wsl</title>
    <url>/2023/library/inte/windows%E7%9A%84linux%E5%AD%90%E7%B3%BB%E7%BB%9Fwsl/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>wsl（Windows Subsystem for Linux）：在windows系统内分出一块区域，作为Linux。你可以直接打开wsl命令窗口执行Linux命令。也可以直接打开Linux分区内的文件。</p>
<h2 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h2><h2 id="配置python环境"><a href="#配置python环境" class="headerlink" title="配置python环境"></a>配置python环境</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>inte</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】有趣外部库</title>
    <url>/2023/library/python/%E3%80%90python%E3%80%91%E6%9C%89%E8%B6%A3%E5%A4%96%E9%83%A8%E5%BA%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>heartrate: 显示哪行代码运行最耗时间</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>name</title>
    <url>/2023/little/name/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>【生日贺卡板】记录</title>
    <url>/2023/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E7%94%9F%E6%97%A5%E8%B4%BA%E5%8D%A1%E6%9D%BF%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>【加热台】记录</title>
    <url>/2023/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E5%8A%A0%E7%83%AD%E5%8F%B0%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="加热台原理"><a href="#加热台原理" class="headerlink" title="加热台原理"></a>加热台原理</h2><p>PCB画导线，短接220V，直接发热。关键在于打板投铝热板（立创免费）导热好！</p>
<h2 id="导线画法"><a href="#导线画法" class="headerlink" title="导线画法"></a>导线画法</h2><h4 id="形状"><a href="#形状" class="headerlink" title="形状"></a>形状</h4><p>形状不知道有啥要求，咱是按着希尔伯特曲线画的。连接复制翻转，直接画就行，挺快的。</p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><p>按理说保证电阻值就行，不过实际上还有些别的考量</p>
<ul>
<li><p>功率计算</p>
<p>第一版目标：加热300度，面积 90*90</p>
<p>预计10min把100ml水烧开，水的比热是4210J/(kg·℃)</p>
<p>需要能量 </p>
<script type="math/tex; mode=display">
W = 70℃ \times 0.1kg \times 4210J/(kg·℃) = 29470J</script><p>功率为</p>
<script type="math/tex; mode=display">
P = \frac{29470J}{600s} \approx 50w</script><p>考虑能量损耗，暂定功率为 <strong>100w</strong></p>
</li>
<li><p>阻值计算</p>
<p>采用市电220V</p>
<script type="math/tex; mode=display">
R = \frac{220V^2}{100w} = 484\Omega</script></li>
<li><p>电阻定律计算对应PCB导线长度</p>
<p>铜箔面电阻率 $1.7×10^-8Ωm$，厚度大于30um，宽度暂定10mil（0.254mm）</p>
<script type="math/tex; mode=display">
R = \frac{\rho l}{S} = \frac{1.7×10^-8Ωm × l}{0.254mm × 30um} = 484\Omega\\
l = 216.9m</script><p>简单画了一下，也才5m多</p>
<p><img src="https://s2.loli.net/2023/08/05/k6SbHlhGTgA1nRd.png" alt="image-20230805000737373"></p>
</li>
</ul>
<p>​    试了一通，最后减小单位长度为27mil（保证总大小在100mm以内），总长度11.235m，长度已经很极限了，界面卡的不行。</p>
<p>​    虽然改宽度可以增大电阻，但宽度没敢改小，怕大电流细导线受不了（听说）</p>
<p>​    最后电阻为25Ω，所以为了保证不把板子烧坏，必须加温控。</p>
<p><img src="https://s2.loli.net/2023/08/05/9wl2NYWLjvxm6PZ.png" alt="image-20230805004901268"></p>
<ul>
<li><p>附加条件：</p>
<ol>
<li>保证温度：不知道大致能承受多少</li>
<li><p>宽度：别小电阻，大电流，过细导线</p>
</li>
<li><p>长度：主要受面积限制（立创可以直接点导线查看）</p>
</li>
<li>希尔伯特曲线最小单位长度：与面积一起决定长度</li>
<li>其它形状：不好看</li>
</ol>
</li>
</ul>
<h2 id="温控"><a href="#温控" class="headerlink" title="温控"></a>温控</h2><p>用最朴素的方法：生成三角波，与可调电压比较生成pwm波，继电器控制通断时长。</p>
<h4 id="三角波生成"><a href="#三角波生成" class="headerlink" title="三角波生成"></a>三角波生成</h4><p><img src="https://s2.loli.net/2023/08/05/p1WCbxZROGz9vw5.png" alt="image-20230805223912485"></p>
<p>但是继电器不太能快速通断<img src="https://s2.loli.net/2023/08/05/rE6UZvb18w4hSRM.png" alt="image-20230805120302419"></p>
<p>基本上一秒一次通断就到顶了，准备先试试，一点一点往上加</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>温控咋做，想做机械的，不用单片机</p>
</li>
<li></li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>窗口互连游戏</title>
    <url>/2023/work/python/%E7%AA%97%E5%8F%A3%E4%BA%92%E8%81%94%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
        <tag>游戏</tag>
      </tags>
  </entry>
  <entry>
    <title>游戏AI</title>
    <url>/2023/work/python/%E6%B8%B8%E6%88%8FAI/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【四旋翼飞行器】记录</title>
    <url>/2023/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E5%9B%9B%E6%97%8B%E7%BF%BC%E9%A3%9E%E8%A1%8C%E5%99%A8%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><h4 id="机架"><a href="#机架" class="headerlink" title="机架"></a>机架</h4><p>先列一下预期效果</p>
<ol>
<li>不能太大，能在屋里飞</li>
<li>不能太小，要能称重，可以帮取小快递</li>
<li>装摄像头，1km内远程遥控</li>
<li>可折叠，易携带，能和笔记本一起装书包里</li>
<li>为了美观或重量轻，可以做的脆弱些，但是贵重的东西用耐摔，机架要方便修理</li>
<li>可以加装饰，比如加个海盗船的壳子，或者外卖的盒子，或者棉花糖云朵</li>
</ol>
<p>考虑上述因素，有以下限制条件</p>
<ol>
<li><p>承重：500g</p>
</li>
<li><p>大小：200mm</p>
</li>
</ol>
<h4 id="螺旋桨和电机"><a href="#螺旋桨和电机" class="headerlink" title="螺旋桨和电机"></a>螺旋桨和电机</h4><ol>
<li><p>型号</p>
<p>螺旋桨：前两位螺旋桨的直径（英寸），后两位螺旋桨螺距（倾斜程度），如1045</p>
<p>电机：前两位定子直径（mm），后两位定子高度（mm）（不是转子，是里面的）</p>
</li>
<li><p>选型表</p>
<p><a href="https://zhuanlan.zhihu.com/p/127020965">参考知乎</a>，具体我有经验了再调整</p>
<p>| 机架尺寸 | 螺旋桨   | 电机                  | 电机KV         |<br>| ———— | ———— | ——————————- | ——————— |<br>| 150mm    | 2寸或3寸 | 1104~1306             | 3000kv~10000kv |<br>| 180mm    | 4寸      | 1806~2204             | 2600kv~3000kv  |<br>| 210mm    | 5寸      | 2205~2208，2305~2306 | 2300kv~2600kv  |<br>| 250mm    | 6寸      | 2206~2208，2306~     | 2000kv~2300kv  |<br>| 350mm    | 7寸      | 2506~2508             | 1200kv~1600kv  |<br>| 450mm    | 8寸      | 26xx                  | 1200kv         |</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】基础语法</title>
    <url>/2023/library/python/%E3%80%90python%E3%80%91%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h4 id="assert"><a href="#assert" class="headerlink" title="assert"></a>assert</h4><p>主动判断条件是否成立，若不成立直接报错结束程序，并返回指定报错语句</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># assert 判断条件, 报错语句</span></span><br><span class="line"><span class="keyword">assert</span> _weight.shape == num_embeddings, embedding_dim], \</span><br><span class="line">                <span class="string">&#x27;Shape of weight does not match num_embeddings and embedding_dim&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【python基础】有趣外部库2——游戏</title>
    <url>/2023/library/python/%E3%80%90python%E5%9F%BA%E7%A1%80%E3%80%91%E6%9C%89%E8%B6%A3%E5%A4%96%E9%83%A8%E5%BA%932%E2%80%94%E2%80%94%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>大一尝试过的开源项目</title>
    <url>/2023/work/%E7%8E%A9%E5%88%AB%E4%BA%BA%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/%E5%A4%A7%E4%B8%80%E5%B0%9D%E8%AF%95%E8%BF%87%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">暂时很乱，有空补全</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>ncc compile first.tflite frist.kmodel -i tflite -o kmodel —dataset images</p>
<h2 id="模型转换"><a href="#模型转换" class="headerlink" title="模型转换"></a>模型转换</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /mnt/d/MyProgram/aworking/kz/t2k/tools-master/tools-master/pt2pb</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">onnx-tf convert -i my_resnet.onnx -o my_resnet.pb</span><br></pre></td></tr></table></figure>
<h2 id="yolo"><a href="#yolo" class="headerlink" title="yolo"></a>yolo</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\MyData\pythonData\machine_learning\yolov5-master\yolov5-master</span><br><span class="line">myolo环境</span><br><span class="line"></span><br><span class="line">python train.py --img 640 --batch 16 --epochs 300 --data smoke7.11.yaml --weights yolov5s.pt</span><br></pre></td></tr></table></figure>
<h2 id="人体姿态估计"><a href="#人体姿态估计" class="headerlink" title="人体姿态估计"></a>人体姿态估计</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D:\MyData\pythonData\machine_learning\人体姿态估计\20k+\openpose-1.7.0-binaries-win64-gpu-python3.7-flir-3d_recommended\openpose</span><br><span class="line"></span><br><span class="line">bin\OpenPoseDemo.exe --camera 0 --hand --face --net_resolution 320x176</span><br><span class="line">--disable_blending : 不显示背景</span><br></pre></td></tr></table></figure>
<h2 id="nerf"><a href="#nerf" class="headerlink" title="nerf"></a>nerf</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.\build\testbed --scene data\nerf\fox\transforms.json</span><br><span class="line"></span><br><span class="line">1. 运行COLMAP.bat，获取text</span><br><span class="line">2. 运行colmap2nerf，python colmap2nerf.py --text 【text】 --images 【images】，获取json</span><br><span class="line">3. 运行最上面那个</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】运放运算电路</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E8%BF%90%E6%94%BE%E8%BF%90%E7%AE%97%E7%94%B5%E8%B7%AF/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">运放运算电路其实就那几种（简单常用的）</div>
          </div>
<h2 id="缩放"><a href="#缩放" class="headerlink" title="缩放"></a>缩放</h2><h4 id="反相放大"><a href="#反相放大" class="headerlink" title="反相放大"></a>反相放大</h4><p><img src="https://s2.loli.net/2023/04/27/fQ6FIc1P2Vj37mY.png" alt="image-20230427150956644"></p>
<script type="math/tex; mode=display">
V_o = -\frac{R_f}{R_0} V_i</script><h4 id="同相放大"><a href="#同相放大" class="headerlink" title="同相放大"></a>同相放大</h4><p><img src="https://s2.loli.net/2023/04/27/UlhFZPDRdjO5vz6.png" alt="image-20230427153435894"></p>
<script type="math/tex; mode=display">
V_o = \frac{R_f}{R_1} V_i</script><h2 id="正向加法"><a href="#正向加法" class="headerlink" title="正向加法"></a>正向加法</h2><h2 id="反向加法"><a href="#反向加法" class="headerlink" title="反向加法"></a>反向加法</h2><h2 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h2><p><img src="https://s2.loli.net/2023/04/27/cUrgE7bCzFwnVmi.png" alt="image-20230427153820270"></p>
<script type="math/tex; mode=display">
V_o = \frac{R_3}{R_2+R_3}\frac{R_1+R_f}{R_1} V_{i2} - \frac{R_f}{R_1} V_{i1}</script><p>当取值所有R相等时</p>
<script type="math/tex; mode=display">
V_o = V_{i2} - V_{i1}</script><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>硬件</tag>
        <tag>运放</tag>
      </tags>
  </entry>
  <entry>
    <title>留学小计</title>
    <url>/2023/little/%E7%95%99%E5%AD%A6%E5%B0%8F%E8%AE%B0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="成功入选"><a href="#成功入选" class="headerlink" title="成功入选"></a>成功入选</h2><h2 id="旅游行程"><a href="#旅游行程" class="headerlink" title="旅游行程"></a>旅游行程</h2><p>Chinatown，西海岸，小印度，marinara bay，动物园，图书馆，植物园，芽笼，环球影城，海洋馆，巴拉望海滩游泳，台球，攀岩，钢琴，chinatown（2），东海岸，ntu，灯塔，vivocity，台球（2），总统府，电影，酒吧，小印度（2），武吉士，东海岸（2），小组摆摊，marinara bay（2），晚宴，樟宜机场</p>
<h4 id="Chinatown（牛车水）"><a href="#Chinatown（牛车水）" class="headerlink" title="Chinatown（牛车水）"></a>Chinatown（牛车水）</h4><p>下南洋的热潮，给新加坡带去了大批大批的中国人。国人聚集处，常用牛车拉水，因此得名牛车水。</p>
<p>街边很繁华，两侧小楼颜色鲜艳。</p>
<h4 id="回家"><a href="#回家" class="headerlink" title="回家"></a>回家</h4><p>去东海岸时，公交车从地下隧道穿过 Marina Bay，我和同伴望向窗外，是重复的无尽的车道。他说，真像梦境啊。那一幕，那一句话，在我返程途中反复出现。经历的种种，汗流浃背，焦头烂额，疲惫不堪，如释重负，认识的那么多人，新奇的设施，奇葩的事，随着我回到出发的机场，回到校园，回到寝室睡觉，就慢慢的消逝。真他妈像梦境啊。</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>little</tag>
        <tag>新加坡</tag>
      </tags>
  </entry>
  <entry>
    <title>【python常用】常用库的pip安装</title>
    <url>/2023/library/python/%E3%80%90python%E5%B8%B8%E7%94%A8%E3%80%91%E5%B8%B8%E7%94%A8%E5%BA%93%E7%9A%84pip%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">pip install opencv-contrib-python</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>pip提供的opencv的包</th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>opencv-python</td>
<td>只包含opencv库的主要模块. 一般不推荐安装</td>
</tr>
<tr>
<td>opencv-contrib-python</td>
<td>包含主要模块和contrib模块, 功能基本完整, 推荐安装</td>
</tr>
<tr>
<td>opencv-python-headless</td>
<td>和opencv-python一样, 但是没有GUI功能, 无外设系统可用</td>
</tr>
<tr>
<td>opencv-contrib-python-headless</td>
<td>和opencv-contrib-python一样但是没有GUI功能，无外设系统可用</td>
</tr>
</tbody>
</table>
</div>
<h2 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h2><p><a href="https://pytorch.org/get-started/locally/">官网</a></p>
<p>在官网得到相应语句，注意，可以对应修改命令中cuda的版本</p>
<p>查看自己的cuda版本 <code>nvcc --version</code></p>
<p>这样可以检查是否成功安装</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import torch</span><br><span class="line">print(torch.version.cuda)</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【python基础】机器学习库</title>
    <url>/2023/library/python/%E3%80%90python%E5%9F%BA%E7%A1%80%E3%80%91%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%BA%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>常用词典</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">std: 标准差</span><br><span class="line">eps: 防止除零	可取1e-8</span><br></pre></td></tr></table></figure>
<h2 id="torch"><a href="#torch" class="headerlink" title="torch"></a>torch</h2><p><a href="https://pytorch.org/docs/stable/index.html">PyTorch documentation — PyTorch 2.0 documentation</a></p>
<p><code>.permute(2, 0, 1)</code>：改变维度位置</p>
<p><code>.unsqueeze(0)</code>：去除空余维度    <code>torch.squeeze(tensor)</code> 是同样的效果</p>
<p><code>.expand(b, 2, h, w)</code>：用重复填充</p>
<p><code>.view(B, N, -1)</code>：resize</p>
<p><code>.contiguous()</code>: 深拷贝</p>
<h4 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成随机数</span></span><br><span class="line">torch.rand([<span class="number">2</span>, <span class="number">3</span>])	<span class="comment"># 生成shape为2, 3的随机矩阵</span></span><br><span class="line">torch.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">1</span>)	<span class="comment"># 生成一维等间隔张量</span></span><br></pre></td></tr></table></figure>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 点乘 @	对应位置相乘 *</span></span><br></pre></td></tr></table></figure>
<h4 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自己模型的结构</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">yourModel</span>(nn.Module):</span><br><span class="line">        <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(yourModel, self).__init__()</span><br></pre></td></tr></table></figure>
<h2 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h2><h4 id="torch-optim-Adam-model-parameters-lr-3e-4"><a href="#torch-optim-Adam-model-parameters-lr-3e-4" class="headerlink" title="torch.optim.Adam(model.parameters(), lr=3e-4)"></a><code>torch.optim.Adam(model.parameters(), lr=3e-4)</code></h4><p>生成优化器optimizer</p>
<ul>
<li>params (iterable) – 待优化参数，一般用<code>model.parameters()</code>，其中model是待优化模型</li>
<li>lr (float, 可选) – 学习率（默认：1e-3）</li>
<li>betas (Tuple[float, float], 可选) – 用于计算梯度以及梯度平方的运行平均值的系数（默认：0.9，0.999）（不懂）</li>
<li>eps (float, 可选) – 防止零作为分母报错（默认：1e-8）</li>
<li>weight_decay (float, 可选) – 权重衰减（L2惩罚）（默认: 0）（UDL中用1e-8）</li>
</ul>
<h4 id="torch-nn-Dropout-p-0-1-inplace-False"><a href="#torch-nn-Dropout-p-0-1-inplace-False" class="headerlink" title="torch.nn.Dropout(p=0.1, inplace=False)"></a><code>torch.nn.Dropout(p=0.1, inplace=False)</code></h4><p>dropout防止过拟合，随机元素置零。</p>
<p>数据要相应放大为 $\frac{1}{1-p}$ 倍</p>
<ul>
<li>p - 元素归零的占比</li>
<li>inplace - 是否补充0元素</li>
</ul>
<h2 id="函数字典"><a href="#函数字典" class="headerlink" title="函数字典"></a>函数字典</h2><h4 id="torch-nn-functional"><a href="#torch-nn-functional" class="headerlink" title="torch.nn.functional"></a>torch.nn.functional</h4><ol>
<li><p>embedding编码</p>
<p>类似于按索引找列表的值，编码矩阵存储不同特征，输入是特征的索引，输出特征向量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">F.embedding(<span class="built_in">input</span>, embedding_matrix)	<span class="comment"># 返回embedding_matrix中input对应的特征向量</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="常用运算单元"><a href="#常用运算单元" class="headerlink" title="常用运算单元"></a>常用运算单元</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 归一化</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Norm</span>(nn.Module):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, shape</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># create two learnable parameters to calibrate normalisation</span></span><br><span class="line">        self.alpha = nn.Parameter(torch.ones(shape))</span><br><span class="line">        self.bias = nn.Parameter(torch.zeros(shape))</span><br><span class="line"></span><br><span class="line">        self.eps = <span class="number">1e-8</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self, x</span>):</span><br><span class="line">        norm_x = self.alpha * (x - x.mean(dim=-<span class="number">1</span>)) / (x.std(dim=-<span class="number">1</span>) + self.eps) + self.bias</span><br><span class="line">        <span class="keyword">return</span> norm_x</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>【JIIF】多光谱融合</title>
    <url>/2023/work/JIIF/%E3%80%90JIIF%E3%80%91%E5%A4%9A%E5%85%89%E8%B0%B1%E8%9E%8D%E5%90%88/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="师兄思路"><a href="#师兄思路" class="headerlink" title="师兄思路"></a>师兄思路</h2><ol>
<li>H*W*C -&gt; H/2*W\2*4C<ol>
<li>具体怎么排序</li>
<li>为啥这样有用</li>
</ol>
</li>
</ol>
<h2 id="实验过程"><a href="#实验过程" class="headerlink" title="实验过程"></a>实验过程</h2><ol>
<li>下采样图片到C通道用pixel_shuffle(space_to_depth)，numpy数组操作可模拟，最后把相邻颜色</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol>
<li>卷积是怎么改变通道数的</li>
</ol>
<h2 id="解决了的"><a href="#解决了的" class="headerlink" title="解决了的"></a>解决了的</h2><ol>
<li>coord：一组组的xy坐标，覆盖-1~1全图</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>JIIF</tag>
        <tag>多光谱</tag>
      </tags>
  </entry>
  <entry>
    <title>【沁恒】样品试用</title>
    <url>/2023/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E6%B2%81%E6%81%92%E3%80%91%E6%A0%B7%E5%93%81%E8%AF%95%E7%94%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>在沁恒索取样品成功！收到了 CH9329-EVT，CH32F103C8T6-EVT-R0，CH34F203C8T6-EVT-R1开发板和CH32F103C8T6*2，CH32F203C8T6*2， CH552G*2，CH9329*2，沁恒大气！</p>
<h2 id="试用记录"><a href="#试用记录" class="headerlink" title="试用记录"></a>试用记录</h2><h4 id="f103"><a href="#f103" class="headerlink" title="f103"></a>f103</h4><ol>
<li><p>点灯成功，开发板上的LED不连接引脚，要单独用杜邦线连接。</p>
</li>
<li><p>pwm使用成功，直接读例程，找ch32f10x文件函数，就行，很清晰！</p>
</li>
<li><p>uart使用成功一半，能print</p>
</li>
</ol>
<h4 id="rs-232"><a href="#rs-232" class="headerlink" title="rs-232"></a>rs-232</h4><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
        <tag>沁恒</tag>
        <tag>国产</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title>name</title>
    <url>/2023/others/chatgpt/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="https://www.bilibili.com/video/BV1384y1H7kS">https://www.bilibili.com/video/BV1384y1H7kS</a></p>
<p>People ask me what do i think of ChatGPT, am i excited？</p>
<p>As a scienctist, i’m pretty interested in the technological breakthroughs</p>
<p>As a human being i’m not excited. And this video I’m going to tell you why. Fundamentally, my point is that a lot of these technologies feel to me like an improve means to an unimproved end. (点错了科技树)in other words, tools that get faster to  where we do not want to go. And the reason for that is we believe more powerful the technology, the more developed we have to be, the more unlighted humanity have to be, the more clear humanity have to be about what contribute to the good life. If they are to be used for net XXX. Good and I don’t believe humanity is in that spot. So I believe that tools like AI and other associate technology will just get us faster to where we do not want to be. Nuclear technology is a parallelse I’d use. it can be used for fantastic clean renewable energy source or can be used to destroy the entire world. We did both. Let me give you five points in particular and they’re gonna be in ascending order of importance. We point four and five being really for me the most core points. But let’s start with the first most obvious one that you know it will cause a lot of disruption and this day in modern culture disruption is spoken of as if it is in and of irself a good thing. But some time i think it is a little bit like the English expression <strong>Turkeys voting for Christmas</strong>. Disruption is all very well, until you’re the one being disrupted. I think we always have to accept that in disruption there’s a lot of human miseries caused by it. Now you may say overall for society it’s good. But it doesn’t mean it have to be excited about people losing there jobs. I do think there’s a huge potential for people to lose their job with this, not just the job that people expected, there are a lot people sitting out there, lawers, financiers, doctors, writers, creatives, who would’ve thought that their job was pretty safe and it’s not gonna be safe in the near future. And that’s tough on psychological on people. You may not feel sympathetic about those people whoe hold these classically quite good jobs. But more or less it will cause a lot of human misery. Will more jobs be created? That’s a usual argument, right? Maybe, maybe not. That’s why i reserve my opinion. But the key this it’s not just aggregate jobs being created is meaningful jobs being created. Will more enough meaningful jobs be created to replace? The jury’s out I think</p>
<p>My second point related is who is gonna to stand benifit most. I suspect to be the owners of capital that invest behind these AI algorithms. In other words, as usual with a lot of technological progress it’s likely to be rigged such that it benefits the one percent rather than ninety nine percent. Again, you may say this is the price we pay to live in progress society comfortable… But again, was the benefits really aggregate? The jury’s out. So can I be excited today before I’ve seen actually how people will use it? Can I be excited today before i see whether it will benefit humanity as a whole? In particular those people who are struggling? No I can’t, because I haven’t seen any evidence for that yet. All I’ve seen is propsitions. A number of which propsitions such as the one above, removing jobs do not seem to me to be necesserily conducive to aggregate human happiness.</p>
<p>My third point, I guess is more in the way it operates</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>羊了个羊自动化</title>
    <url>/2023/work/python/%E7%BE%8A%E4%BA%86%E4%B8%AA%E7%BE%8A%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>adb 控制手机，python 处理数据</p>
<p>读取屏幕 -&gt; 接收存储块信息 -&gt; 选择消除组</p>
<p>读取屏幕：识别块方法为颜色匹配</p>
<p>块信息包括：1. 底下压着的块，2. 消除需要的次数</p>
<p>选择消除块：点击得分最高的</p>
<h2 id="问题记录"><a href="#问题记录" class="headerlink" title="问题记录"></a>问题记录</h2><ol>
<li>有时点不上</li>
<li>fork 的颜色</li>
<li>交叉背面格子全是问题~~</li>
</ol>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>羊了个羊自动化基本完结，一直在解决问题，最终也留下了一些问题。其最终结果不太可适用，因为颜色识别不好调，费时间。</p>
<p>核心技术难点，及解决方法：</p>
<ol>
<li>用赋值比较选出最优解，赋值应该有层次的，可以用多个值分级比较</li>
<li>识别简单图片，颜色识别更优，模板匹配几乎不可用。复杂图片可能模板匹配好些。现实图片用神经网络。</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>【忆阻器】python平衡车</title>
    <url>/2023/work/%E5%BF%86%E9%98%BB%E5%99%A8/%E3%80%90%E5%BF%86%E9%98%BB%E5%99%A8%E3%80%91python%E5%B9%B3%E8%A1%A1%E8%BD%A6/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>​    为了检验用随机梯度下降算法，pid调参的可行性，要跑一下仿真</p>
<p>​    用 pygame 搭建环境</p>
<p>​    仿真方法是把平衡车车身与轮子，想象成两个靠弹力绳连接的弹力球，通过直接控制位置，假装控制力或加速度</p>
<p>​    用pid控制小车平衡，参数很好调，很大范围都可以平衡住</p>
<p>​    小车平衡后一动不动，看不出是不是卡住了，加随机噪声，效果自然</p>
<p>​    判断小车平衡条件：角度波动在一定值内，连续一段时间</p>
<p>​    判断小车平衡效果：让小车从倾斜状态平衡住，记录平衡前每刻角度值累加</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>如果一开始没平衡，无法收敛</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>忆阻器</tag>
      </tags>
  </entry>
  <entry>
    <title>【nerf】最新阅读记录</title>
    <url>/2023/work/nerf/%E3%80%90nerf%E3%80%91%E6%9C%80%E6%96%B0%E9%98%85%E8%AF%BB%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="B-spline-Texture-Coefficients-Estimator-for-Screen-Content-Image-Super-Resolution"><a href="#B-spline-Texture-Coefficients-Estimator-for-Screen-Content-Image-Super-Resolution" class="headerlink" title="B-spline Texture Coefficients Estimator for Screen Content Image Super-Resolution"></a>B-spline Texture Coefficients Estimator for Screen Content Image Super-Resolution</h2><p>super-resolution（SR）超分辨率</p>
<p>Screen content images（SCI）与 natural images（NI）有不同的图像信息密度，为了让有文字信息的图像，能够类似于矢量图的缩放，而不失真，本文采用隐式表达。</p>
<p>由多层感知器（MLP）实现的隐式神经函数将坐标作为输入并返回相应的信号值</p>
<h4 id="相关工作"><a href="#相关工作" class="headerlink" title="相关工作"></a>相关工作</h4><p>ITSRN：</p>
<p>使用低分辨率和高分辨率 SCI 之间的相对坐标推断像素值（没懂）</p>
<p>使用隐式位置编码，聚合相邻像素值</p>
<p>耗时耗内存</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>【python基础】常用外部库</title>
    <url>/2023/library/python/%E3%80%90python%E5%9F%BA%E7%A1%80%E3%80%91%E5%B8%B8%E7%94%A8%E5%A4%96%E9%83%A8%E5%BA%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="cv2"><a href="#cv2" class="headerlink" title="cv2"></a>cv2</h2><p>opencv库用于图像处理，包含很多常用算法。此外更可以读取图片，控制摄像头外设</p>
<h4 id="摄像头"><a href="#摄像头" class="headerlink" title="摄像头"></a>摄像头</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">capture = cv2.VideoCapture(<span class="number">0</span>)	<span class="comment"># 声明摄像头对象</span></span><br><span class="line">ret, frame = capture.read()		<span class="comment"># 读取摄像头，ret是bool型表示成功与否，frame是图像</span></span><br><span class="line"><span class="comment"># 第一次读取图像很慢会，用0.5s左右，之后每次3ms左右</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 摄像头设置</span></span><br><span class="line">self.capture.<span class="built_in">set</span>(cv2.CAP_PROP_EXPOSURE, value)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">设置的参数				含义		值</span></span><br><span class="line"><span class="string">CV_CAP_PROP_FPS			帧数		30</span></span><br><span class="line"><span class="string">CV_CAP_PROP_BRIGHTNESS	亮度		-64 ~ 64</span></span><br><span class="line"><span class="string">CV_CAP_PROP_CONTRAST	对比度		0 ~ 95</span></span><br><span class="line"><span class="string">CV_CAP_PROP_SATURATION	饱和度		0 ~ 100</span></span><br><span class="line"><span class="string">CV_CAP_PROP_HUE			色调		-2000 ~ 2000</span></span><br><span class="line"><span class="string">CV_CAP_PROP_EXPOSURE	曝光度		-10 ~ -4</span></span><br><span class="line"><span class="string">CAP_PROP_AUTO_EXPOSURE	自动曝光	1 or 0</span></span><br><span class="line"><span class="string">自动曝光会调整曝光时间和曝光度, 很重要</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<h4 id="读取保存"><a href="#读取保存" class="headerlink" title="读取保存"></a>读取保存</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">img = cv2.imread(<span class="string">&#x27;qwer.png&#x27;</span>)	<span class="comment"># 读取</span></span><br><span class="line">cv2.imwrite(<span class="string">&#x27;asdf.png&#x27;</span>, img)	<span class="comment"># 保存</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;asdf.png&#x27;</span>, img)		<span class="comment"># 显示</span></span><br><span class="line">cv2.waitKey(<span class="number">0</span>)					<span class="comment"># 保持图片显示状态</span></span><br></pre></td></tr></table></figure>
<h4 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到一组数中最值，相应位置</span></span><br><span class="line">min_val,max_val,min_loc,max_loc = cv2.minMaxLoc(result)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到二值化图像的色块</span></span><br><span class="line">cnts, hierarchy = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)     <span class="comment"># 寻找白块</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 求色块面积</span></span><br><span class="line">S = cv2.contourArea(cnt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到包围色块的矩形</span></span><br><span class="line">x, y, w, h = cv2.boundingRect(cnt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到包围色块的最小矩形，可能是歪着的</span></span><br><span class="line">cv2.minAreaRec</span><br></pre></td></tr></table></figure>
<h4 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 模板匹配</span></span><br><span class="line"><span class="comment"># 把img在template中所有位置匹配，返回一个黑白图像，图像的值表示该位置的匹配相似度</span></span><br><span class="line">result = cv2.matchTemplate(img, template, <span class="number">1</span>)	<span class="comment"># 数字 1 表示匹配方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br></pre></td></tr></table></figure>
<h4 id="信号处理"><a href="#信号处理" class="headerlink" title="信号处理"></a>信号处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 均值滤波（均值）</span></span><br><span class="line">img_mean = cv2.blur(img, (<span class="number">11</span>,<span class="number">11</span>))</span><br><span class="line"><span class="comment"># 高斯滤波（反距离权重）</span></span><br><span class="line">img_guass = cv2.GaussianBlur(img, (<span class="number">11</span>,<span class="number">11</span>), <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 中值滤波（统计中值）（去除椒盐噪声，保持物体边界）</span></span><br><span class="line">img_mid = cv2.medianBlur(img, <span class="number">11</span>)</span><br><span class="line"><span class="comment"># 高通低通滤波（高通锐化、低通模糊）（不清楚卷积核怎么确定）</span></span><br><span class="line">kernel_3x3 = np.array([[-<span class="number">1</span>/<span class="number">9</span>, -<span class="number">1</span>/<span class="number">9</span>, -<span class="number">1</span>/<span class="number">9</span>],</span><br><span class="line">                       [-<span class="number">1</span>/<span class="number">9</span>, <span class="number">8</span>/<span class="number">2</span>, -<span class="number">1</span>/<span class="number">9</span>],</span><br><span class="line">                       [-<span class="number">1</span>/<span class="number">9</span>, -<span class="number">1</span>/<span class="number">9</span>, -<span class="number">1</span>/<span class="number">9</span>]])</span><br><span class="line">img_high = cv2.filter2D(img, <span class="number">3</span>, kernel_3x3)</span><br><span class="line"><span class="comment"># 傅里叶变换</span></span><br><span class="line">img_gray = cv2.imread(<span class="string">&quot;1.jpg&quot;</span>, <span class="number">0</span>)</span><br><span class="line">dft = cv2.dft(np.float32(img_gray), flags=cv2.DFT_COMPLEX_OUTPUT)</span><br><span class="line">dft_shift = np.fft.fftshift(dft)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">magnitude</span>(<span class="params">x, y</span>):</span><br><span class="line">    x_m = x * x</span><br><span class="line">    y_m = y * y</span><br><span class="line">    z_m = x_m + y_m</span><br><span class="line">    <span class="keyword">return</span> np.sqrt(z_m)</span><br><span class="line">magnitude_spectrum2 = <span class="number">20</span> * np.log10(magnitude(dft_shift[:, :, <span class="number">0</span>], dft_shift[:, :, <span class="number">1</span>]))</span><br><span class="line">plt.imshow(magnitude_spectrum2, cmap=<span class="string">&quot;gray&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="图像处理"><a href="#图像处理" class="headerlink" title="图像处理"></a>图像处理</h4><p>坐标值必须是整数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绘制矩形框</span></span><br><span class="line">cv2.rectangle(img,left_top,right_bottom, <span class="number">0</span>, <span class="number">3</span>)	<span class="comment"># 0 表示颜色黑色；3 表示线粗细，若为负数，实心填充</span></span><br></pre></td></tr></table></figure>
<h4 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建窗口</span></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>, cv2.WINDOW_AUTOSIZE)</span><br><span class="line"><span class="comment"># 滑动条</span></span><br><span class="line"><span class="comment"># 1.滑动条名 2.窗口名 3、4.函数传值范围 5.函数（函数要有传值）</span></span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;H low&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, h_low)</span><br><span class="line"><span class="comment">##########举例############</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">h_low</span>(<span class="params">value</span>):</span><br><span class="line">    <span class="built_in">print</span>(value)</span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;image&#x27;</span>, cv2.WINDOW_AUTOSIZE)</span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;H low&#x27;</span>, <span class="string">&#x27;image&#x27;</span>, <span class="number">0</span>, <span class="number">179</span>, h_low)</span><br><span class="line">cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h2 id="numpy"><a href="#numpy" class="headerlink" title="numpy"></a>numpy</h2><p>用于数据处理</p>
<h4 id="生成数据"><a href="#生成数据" class="headerlink" title="生成数据"></a>生成数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 等差数组</span></span><br><span class="line">x1 = np.linspace(<span class="number">2.0</span>, <span class="number">3.0</span>, num=<span class="number">5</span>)	<span class="comment"># 通过个数</span></span><br><span class="line">a = np.arange(<span class="number">0</span>,<span class="number">100</span>,<span class="number">10</span>)				<span class="comment"># 通过差值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机数</span></span><br><span class="line">c = np.random.uniform(-<span class="number">1</span>, <span class="number">1</span>, (<span class="number">2</span>, <span class="number">2</span>))	<span class="comment"># 最小值, 最大值, 数据形状</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 改变</span></span><br><span class="line"><span class="comment"># 改变形状</span></span><br><span class="line">a = a.reshape(<span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line"><span class="comment"># 复制</span></span><br><span class="line">a = np.tile(a, <span class="number">2</span>)		<span class="comment"># 第二个可以是元组</span></span><br><span class="line"><span class="comment"># 拼接</span></span><br><span class="line">np.concatenate([a,b],axis=<span class="number">0</span>)</span><br><span class="line">np.vstack([a,b])</span><br><span class="line">np.hstack([a,b])</span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>函数</th>
<th>用途</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>new_list = np.append(old_list, [1,2,3])</code></td>
<td>添加</td>
</tr>
<tr>
<td><code>new_list = np.insert(old_list, 2， [1,2,3])</code></td>
<td>插入</td>
</tr>
<tr>
<td><code>new_list = np.delate(old_list, [1,2,3])</code></td>
<td>删除</td>
</tr>
<tr>
<td></td>
</tr>
</tbody>
</table>
</div>
<h4 id="数据处理-1"><a href="#数据处理-1" class="headerlink" title="数据处理"></a>数据处理</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 找到数组中值小于阈值的位置</span></span><br><span class="line">loc = np.where(result &lt;= threshold)		<span class="comment"># 返回两个数组，分别对应x和y</span></span><br></pre></td></tr></table></figure>
<h2 id="matplotlib"><a href="#matplotlib" class="headerlink" title="matplotlib"></a>matplotlib</h2><h4 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="comment"># 绘图</span></span><br><span class="line">plt.plot(x, y)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3d	分别保存三组坐标</span></span><br><span class="line">ax = plt.axes(projection=<span class="string">&#x27;3d&#x27;</span>)</span><br><span class="line">zline = np.linspace(<span class="number">0</span>, <span class="number">15</span>, <span class="number">1000</span>)</span><br><span class="line">xline = np.sin(zline)</span><br><span class="line">yline = np.cos(zline)</span><br><span class="line">ax.plot3D(xline, yline, zline, <span class="string">&#x27;gray&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 动态图	先清空，重新绘制，等很短一段时间（不等不显示）</span></span><br><span class="line"><span class="comment"># 还有专业方法的（FuncAnimation），不过使用不方便</span></span><br><span class="line">plt.cla()</span><br><span class="line">plt.plot(x_list, bias_list)</span><br><span class="line">plt.pause(<span class="number">0.001</span>)</span><br></pre></td></tr></table></figure>
<h4 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 形状</span></span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>, <span class="number">5</span>))		<span class="comment"># 窗口大小</span></span><br><span class="line">plt.ylim(-<span class="number">2</span>, <span class="number">2</span>)					<span class="comment"># 坐标轴</span></span><br><span class="line">plt.yticks([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,])			<span class="comment"># 刻度</span></span><br><span class="line">plt.title(<span class="string">&quot;qwer&quot;</span>)				<span class="comment"># 标题</span></span><br><span class="line">plt.xlabel(<span class="string">&quot;X&quot;</span>)  				<span class="comment"># X轴标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分格 subplot	之后操作sub1等代替plt</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.gridspec <span class="keyword">as</span> gridspec</span><br><span class="line">gs = gridspec.GridSpec(<span class="number">3</span>, <span class="number">3</span>)</span><br><span class="line">sub1 = plt.subplot(gs[<span class="number">0</span>, :<span class="number">3</span>])</span><br><span class="line">sub2 = plt.subplot(gs[<span class="number">1</span>:,<span class="number">0</span>])</span><br><span class="line">sub3 = plt.subplot(gs[<span class="number">1</span>:,<span class="number">1</span>:])</span><br></pre></td></tr></table></figure>
<h2 id="pygame"><a href="#pygame" class="headerlink" title="pygame"></a>pygame</h2><p>编写简单的小游戏</p>
<h4 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pygame,sys</span><br><span class="line"></span><br><span class="line">pygame.init()       <span class="comment"># 初始化（暂时不清楚有啥用，不加有时报错）</span></span><br><span class="line">window=pygame.display.set_mode([<span class="number">700</span>,<span class="number">850</span>])       <span class="comment"># 生成游戏窗口</span></span><br><span class="line">window.fill([<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>])</span><br><span class="line">pygame.display.update()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> event <span class="keyword">in</span> pygame.event.get():</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.QUIT:</span><br><span class="line">            sys.exit()</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.KEYDOWN:</span><br><span class="line">            <span class="keyword">if</span> event.key == pygame.K_ESCAPE:</span><br><span class="line">                sys.exit()</span><br><span class="line">        <span class="keyword">if</span> event.<span class="built_in">type</span> == pygame.MOUSEBUTTONDOWN:</span><br><span class="line">            x, y = pygame.mouse.get_pos()</span><br><span class="line">            <span class="built_in">print</span>(x,y)</span><br><span class="line">            pygame.draw.rect(window, (<span class="number">100</span>,<span class="number">100</span>,<span class="number">100</span>), (x, y, <span class="number">50</span>, <span class="number">60</span>), <span class="number">0</span>)</span><br><span class="line">            pygame.display.update()</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】GPS模块</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91GPS%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>GPS模块基本都能测位置，测速</p>
<h2 id="选型"><a href="#选型" class="headerlink" title="选型"></a>选型</h2><p>主要看两点：搜星数和搜星速度，搜星数越多精度越高</p>
<p>形状一般外带一个天线，核心是一个方形铁盖，没见过太小的</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>不同涵义，对照相应的数据表</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>GPS</tag>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>环境变量配置理解</title>
    <url>/2023/solved/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>环境变量，<strong>相当于给你电脑所有目录增加该路径</strong>。</p>
<p>比如你想运行一个程序，必须要打开那个文件夹才能运行，但是你把那个文件夹添加到环境变量，就可以在任意地方打开该程序。</p>
<h2 id="平时说，把什么文件添加到环境变量，是什么意思呢"><a href="#平时说，把什么文件添加到环境变量，是什么意思呢" class="headerlink" title="平时说，把什么文件添加到环境变量，是什么意思呢"></a>平时说，把什么文件添加到环境变量，是什么意思呢</h2><p>添加到系统变量的 path 里（用户变量一般不动）</p>
<p>或者，在系统变量中新建一个，如 QWER，然后在 path 中添加 %QWER% 即可</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【adb】电脑连接控制手机</title>
    <url>/2023/library/frontend/%E3%80%90adb%E3%80%91%E7%94%B5%E8%84%91%E8%BF%9E%E6%8E%A5%E6%8E%A7%E5%88%B6%E6%89%8B%E6%9C%BA/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>adb 是一个程序，在 cmd 里运行，手机通过 usb 与电脑连接，之后可以用 adb 控制手机，获取截屏等。</p>
<p>附带 uiautomatorviewer.bat 工具可以定位元素。</p>
<h2 id="常用记录"><a href="#常用记录" class="headerlink" title="常用记录"></a>常用记录</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 应用</span><br><span class="line"># 显示所有第三方应用</span><br><span class="line">adb shell pm list packages -3	# 不加 -3 则显示所有应用</span><br><span class="line"># 显示更详细的程序信息</span><br><span class="line">adb shell dumpsys activity activities</span><br><span class="line"># 启动应用程序</span><br><span class="line">adb shell am start -n [应用名称]	# 应用名不是app名字，具体可以用上述方法获取 </span><br><span class="line"></span><br><span class="line"># 控制</span><br><span class="line"># 点击指定位置，左上角是0,0</span><br><span class="line">adb shell input tap [x] [y]</span><br><span class="line"># 滑动屏幕</span><br><span class="line">adb shell input swipe [x_start] [y_start] [x_end] [y_end]</span><br><span class="line"># 长按指定时间</span><br><span class="line"></span><br><span class="line"># 按键</span><br><span class="line"></span><br><span class="line"># 获取截屏</span><br><span class="line">adb shell screencap -p /sdcard/01.png</span><br><span class="line">adb pull /sdcard/01.png D:\phone</span><br><span class="line"></span><br><span class="line">adb shell input swipe %i %i %i %i &#x27; + str(press_time)) % (320 + rand, 410 + rand, 320 + rand, 410 + rand)</span><br></pre></td></tr></table></figure>
<h2 id="连接手机设置"><a href="#连接手机设置" class="headerlink" title="连接手机设置"></a>连接手机设置</h2><p>想要控制手机需要在手机端设置一下，具体如下</p>
<h4 id="华为手机"><a href="#华为手机" class="headerlink" title="华为手机"></a>华为手机</h4><p>进入开发者模式：设置 -&gt; 关于手机 -&gt; 疯狂点击版本号 （返回可以看到，设置中出现 开发者选项）</p>
<p>点开 开发者选项 ，设置usb连接：点开 USB调试 和 “仅充电”模式下允许ADB调试</p>
<h4 id="联想手机"><a href="#联想手机" class="headerlink" title="联想手机"></a>联想手机</h4><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>adb</tag>
        <tag>手机</tag>
        <tag>frontend</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【python基础】有趣外部库</title>
    <url>/2023/library/python/%E3%80%90python%E5%9F%BA%E7%A1%80%E3%80%91%E6%9C%89%E8%B6%A3%E5%A4%96%E9%83%A8%E5%BA%931%E2%80%94%E2%80%94/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="tqdm"><a href="#tqdm" class="headerlink" title="tqdm"></a>tqdm</h2><p>进度条显示，相当于每个循环print一次</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm, trange</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">10</span>)):	<span class="comment"># tqdm 包裹迭代器</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> trange(<span class="number">10</span>):		<span class="comment"># trange 相当于 tqdm + range</span></span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="request"><a href="#request" class="headerlink" title="request"></a>request</h2><p>网络请求</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取图像</span></span><br><span class="line">r = requests.get(IMAGE_URL)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;img.png&#x27;</span>, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(r.content)  </span><br></pre></td></tr></table></figure>
<h2 id="itertools"><a href="#itertools" class="headerlink" title="itertools"></a>itertools</h2><p>用于计算排列组合</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> combinations</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> permutations</span><br><span class="line">s = <span class="string">&quot;123456&quot;</span></span><br><span class="line"><span class="comment"># 组合</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(combinations(s, <span class="number">4</span>)))</span><br><span class="line"><span class="comment"># 排列</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(permutations(s, <span class="number">2</span>)))</span><br></pre></td></tr></table></figure>
<h2 id="timeit"><a href="#timeit" class="headerlink" title="timeit"></a>timeit</h2><p>准确读取时间</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> timeit <span class="keyword">import</span> default_timer <span class="keyword">as</span> timer</span><br><span class="line">time_begin = timer()</span><br><span class="line"><span class="comment"># your code</span></span><br><span class="line">time_end = timer()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;time:&#x27;</span>, (time_end - time_begin)*<span class="number">1000</span>, <span class="string">&#x27;ms&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2023/library/inte/%E3%80%90latex%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2023/learning/%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90/%E3%80%90%E5%BC%80%E5%85%B3%E7%94%B5%E6%BA%90%E3%80%91%E7%90%86%E8%A7%A3/</url>
    <content><![CDATA[<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
  </entry>
  <entry>
    <title>【python基础】常用内部库</title>
    <url>/2023/library/python/%E3%80%90python%E5%9F%BA%E7%A1%80%E3%80%91%E5%B8%B8%E7%94%A8%E5%86%85%E9%83%A8%E5%BA%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="操作文件夹"><a href="#操作文件夹" class="headerlink" title="操作文件夹"></a>操作文件夹</h2><p>先 <code>import os</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取所有子文件</span></span><br><span class="line"><span class="comment"># topdown 输出顺序，True是从根文件夹到叶文件，默认为False</span></span><br><span class="line"><span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(<span class="string">&quot;D:\Program&quot;</span>, topdown=<span class="literal">True</span>):</span><br><span class="line">    <span class="built_in">print</span>(root)</span><br><span class="line">    <span class="keyword">for</span> 【python基础】操作文件 <span class="keyword">in</span> files:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, 【python基础】操作文件))</span><br><span class="line">    <span class="keyword">for</span> 【python基础】操作文件 <span class="keyword">in</span> dirs:</span><br><span class="line">        <span class="built_in">print</span>(os.path.join(root, 【python基础】操作文件))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 获取文件夹下文件名</span></span><br><span class="line">files = os.listdir(<span class="string">&quot;D:\Program&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串合并路径</span></span><br><span class="line"><span class="comment"># 两个合并</span></span><br><span class="line">file_path = os.path.join(root, name)	</span><br><span class="line"><span class="comment"># 带 . 合并</span></span><br><span class="line">file_path_split = file_path.split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">copy_file_path = <span class="string">&#x27;.&#x27;</span>.join([<span class="string">f&#x27;<span class="subst">&#123;file_path_split[<span class="number">0</span>]&#125;</span>_copy&#x27;</span>, file_path_split[<span class="number">1</span>]]) </span><br></pre></td></tr></table></figure>
<h2 id="读写文档"><a href="#读写文档" class="headerlink" title="读写文档"></a>读写文档</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 打开</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(file, <span class="string">&#x27;r+&#x27;</span>, encoding=<span class="string">&#x27;UTF-8&#x27;</span>) <span class="keyword">as</span> f：</span><br><span class="line">	<span class="comment"># 读取，读取后光标会向后移动</span></span><br><span class="line">    data = f.read() <span class="comment"># 读取全部</span></span><br><span class="line">    _data = f.read(<span class="number">20</span>) <span class="comment"># 读取20个字符</span></span><br><span class="line">    data_line = f.readline()</span><br><span class="line">    data_lines = f.readlines()</span><br><span class="line">    <span class="comment"># 删除</span></span><br><span class="line">    f.truncate(<span class="number">0</span>) <span class="comment"># 删除全部</span></span><br><span class="line">    f.truncate(<span class="number">3</span>) <span class="comment"># 从光标所在位置向后删除</span></span><br><span class="line">    <span class="comment"># 写入，写会覆盖原有字符</span></span><br><span class="line">    f.write(<span class="string">&quot;qwer&quot;</span>)</span><br><span class="line">	<span class="comment"># 控制光标</span></span><br><span class="line">    fr.seek(<span class="number">13</span>)</span><br></pre></td></tr></table></figure>
<p>python 读写所有文件都可以用这种方法，相当于用 记事本 打开的。</p>
<p>推荐修改文档方法：先新建一个文件，写入，删除源文件，新文件改名。因为删除后写入容易出现神奇的bug。</p>
<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">result = re.search(<span class="string">&quot;qwer&quot;</span>, string)   <span class="comment">#并返回第一个匹配</span></span><br><span class="line"><span class="comment"># result.group() 返回匹配内容</span></span><br><span class="line"><span class="comment"># result.start() 或者 end() 返回位置数字</span></span><br><span class="line">result = re.findall(<span class="string">&quot;qwer&quot;</span>, string)   <span class="comment"># 返回列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分割</span></span><br><span class="line">string_split = re.split(<span class="string">&quot;qwer&quot;</span>, string, <span class="number">10</span>)    <span class="comment"># 返回列表。第三个参数控制分割次数，默认完全分割</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">string = re.sub(<span class="string">&quot;origin_word&quot;</span>, <span class="string">&quot;new_word&quot;</span>, string)</span><br></pre></td></tr></table></figure>
<h2 id="os"><a href="#os" class="headerlink" title="os"></a>os</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 字符串合并路径</span></span><br><span class="line">file_path = os.path.join(root, name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换工作路径</span></span><br><span class="line">os.chdir(path)</span><br></pre></td></tr></table></figure>
<h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="comment"># 生成随机整数</span></span><br><span class="line">a = random.randint(<span class="number">0</span>, <span class="number">10</span>)	<span class="comment"># 左闭右闭</span></span><br><span class="line"><span class="comment"># 生成随机小数</span></span><br><span class="line">b = random.random()			<span class="comment"># 0,1之间的随机小数</span></span><br></pre></td></tr></table></figure>
<h2 id="math"><a href="#math" class="headerlink" title="math"></a>math</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="comment"># 反函数</span></span><br><span class="line">a = math.atan(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h2 id="subprocess"><a href="#subprocess" class="headerlink" title="subprocess"></a>subprocess</h2><p>运行命令行命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">output = subprocess.run([<span class="string">&#x27;python&#x27;</span>], stdout=subprocess.PIPE).stdout.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【auto.js】手机自动化控制</title>
    <url>/2023/library/frontend/%E3%80%90auto.js%E3%80%91%E6%89%8B%E6%9C%BA%E8%87%AA%E5%8A%A8%E5%8C%96%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>​    比较好用好入门，可以在手机上写代码，运行程序，控制手机，获取手机信息，功能很强大，但是官方已经不再维护了。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>frontend</tag>
        <tag>library</tag>
        <tag>auto.js</tag>
      </tags>
  </entry>
  <entry>
    <title>【app inventor】拖动滑块写手机app</title>
    <url>/2023/library/frontend/%E3%80%90app%20inventor%E3%80%91%E6%8B%96%E5%8A%A8%E6%BB%91%E5%9D%97%E5%86%99%E6%89%8B%E6%9C%BAapp/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>app inventor 是MIT做的，拖动滑块编写app界面和逻辑，设计功能很全</p>
<p>设计后生成二维码，扫码即可下载自己设计的 app，很方便</p>
<h2 id="记录"><a href="#记录" class="headerlink" title="记录"></a>记录</h2><p>普遍都很清晰易懂，少数特殊功能我记录一下</p>
<h4 id="蓝牙"><a href="#蓝牙" class="headerlink" title="蓝牙"></a>蓝牙</h4><p>添加组件 <code>通信连接 -&gt; 蓝牙客户端</code></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9083dd33f5.png" alt="image-20230116230712284"></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>frontend</tag>
        <tag>library</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】蓝牙</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E8%93%9D%E7%89%99/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="HC05"><a href="#HC05" class="headerlink" title="HC05"></a>HC05</h2><p>只能两两通信</p>
<p>是经典蓝牙2.0版本，不能和BLE通信</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>串口传数据就完了</p>
<p>我掌握的连接方法，可以用 app inventor 编写手机程序连接蓝牙，电脑用 python 的 pybluez 连接蓝牙，单片机中使用可以用另一个 HC05 接出串口</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>蓝牙</tag>
        <tag>模块</tag>
      </tags>
  </entry>
  <entry>
    <title>【嵌入式积累】常用官网</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A7%AF%E7%B4%AF/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF%E3%80%91%E5%B8%B8%E7%94%A8%E5%AE%98%E7%BD%91/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="ST官网-https-www-st-com"><a href="#ST官网-https-www-st-com" class="headerlink" title="ST官网 https://www.st.com/"></a>ST官网 <a href="https://www.st.com/">https://www.st.com/</a></h2><div class="table-container">
<table>
<thead>
<tr>
<th>资料</th>
<th>对应位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>例程</td>
<td>Tools &amp; Software -&gt; Product Evaluation Tools</td>
</tr>
<tr>
<td>参考手册（外设信息）</td>
<td>Document -&gt; Reference Manuals</td>
</tr>
<tr>
<td>？？规格手册</td>
<td>Document -&gt; Product Specifications</td>
</tr>
<tr>
<td>数据手册（电气特性、引脚信息）</td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://www.stmcu.com.cn/">ST中文官网</a></p>
<p><a href="www.stmcu.org.cn">ST社区</a></p>
<h2 id="国产"><a href="#国产" class="headerlink" title="国产"></a>国产</h2><p><a href="https://www.szlcsc.com/">立创</a>、<a href="https://www.anlogic.com/">安路</a>（fpga）、<a href="https://singtown.com/">星瞳</a>（openmv）、<a href="https://www.wch.cn/">沁恒</a>（ch340）、<a href="https://www.canaan-creative.com/">嘉楠</a>（k210）</p>
<p><a href="https://www.sipeed.com/">矽速</a>（k210）</p>
<h2 id="暂时记录"><a href="#暂时记录" class="headerlink" title="暂时记录"></a>暂时记录</h2><p>最近在沁恒申请了样品索取，申请了4片:dog:，包括 CH32F103、CH32F203、CH9329（串口转控制键鼠）、CH542（电容触摸按键）</p>
<p>相中这个</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9155fb5ea6.png" alt="image-20230115214631537"></p>
<p>不知道能不能给我打电话 :heart:</p>
<p>如果发过来驱动好了我会总结博客</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>嵌入式积累</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝牙调试助手</title>
    <url>/2023/work/python/%E8%93%9D%E7%89%99%E8%B0%83%E8%AF%95%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bde9437a.png" alt="image-20230113113929093"></p>
<p>我已制作了 “蓝牙调试助手” 可以使用，有些缺点：</p>
<ol>
<li>连接未成功时，点击发送会因错闪退</li>
<li>连接失败或成功后都无法重新连接或连接其他蓝牙</li>
<li>程序开启要等好久才能搜索到蓝牙，且没有提示</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
        <tag>mine</tag>
      </tags>
  </entry>
  <entry>
    <title>网速显示助手</title>
    <url>/2023/work/python/%E7%BD%91%E9%80%9F%E6%98%BE%E7%A4%BA%E5%8A%A9%E6%89%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bda2514a.png" alt="image-20230113113438353"></p>
<h2 id="网速显示助手"><a href="#网速显示助手" class="headerlink" title="网速显示助手"></a>网速显示助手</h2><p>已经做出来了，还有几点待改进</p>
<ol>
<li>大小不会自动匹配，放到别人电脑里过大（新增自动匹配大小，包括框和字体）</li>
<li>cpu和内存有歧义，因为嵌到任务栏里，地方太小，就用的鼠标移到上面，会有悬浮提示框。但是鼠标需要先点在上面，才能出现悬浮框</li>
<li>偶尔闪退，不知为啥，只见过几次</li>
<li>颜色不会自动调整，有时突兀（新增颜色每30s调整一次，读取屏幕最左下角的颜色）</li>
<li>有时数据过大，不变换单位导致显示不全（新增单位变换mb）</li>
<li>应该求平均值，cpu占有率变化快，每1s读一次容易错过峰值</li>
<li>速度太慢（取消等待，每1s刷新一次，此1s是计算上传下载速度必须的）</li>
<li>可能会占用，影响打字（已用多线程解决）</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
        <tag>mine</tag>
      </tags>
  </entry>
  <entry>
    <title>电脑外接摇杆</title>
    <url>/2023/work/mine/%E7%94%B5%E8%84%91%E5%A4%96%E6%8E%A5%E6%91%87%E6%9D%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>想弄一个简单的，摇杆控制 asdw，玩糖豆人</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>摇杆端，用stm读取摇杆ADC值，通过串口发送信号到电脑</p>
<p>电脑端，用python的pyserial接收串口消息，用pyautogui发送按键指令</p>
<p>设置：摇杆前后左右对应asdw；按下摇杆对应空格</p>
<h2 id="优化处理"><a href="#优化处理" class="headerlink" title="优化处理"></a>优化处理</h2><p>实现效果不咋地，一开始啥优化也没加，就是一直发送按键松开的命令，导致消息阻塞，0.5s才能接受一次串口。</p>
<p>测试发现不是串口接受能力不行，而是pyautogui发送指令太频繁</p>
<p>之后改变了一下，只有按键情况发生变化时，pyautogui才发送指令，响应速度可以达到0.001s，但是偶尔卡住，可能需要再调一调阈值</p>
<h2 id="使用体验"><a href="#使用体验" class="headerlink" title="使用体验"></a>使用体验</h2><ol>
<li>只有一个摇杆，握不住</li>
<li>杜邦线连接，老是掉</li>
<li>没法同时按前进和空格</li>
<li>玩糖豆人不合适，没法精确控制方向（摇杆应该做到能精确控制移动方向，但是映射到键盘就不行，在左右移动交汇处，容易连续触发，导致卡死）</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>python</tag>
        <tag>mine</tag>
        <tag>嵌入式</tag>
      </tags>
  </entry>
  <entry>
    <title>【pyserial】读取串口</title>
    <url>/2023/library/python/%E3%80%90pyserial%E3%80%91%E8%AF%BB%E5%8F%96%E4%B8%B2%E5%8F%A3/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>pyserial 可以读取电脑串口，收发数据，很好用！</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="comment"># 实例化一个serial</span></span><br><span class="line">serial = serial.Serial(<span class="string">&#x27;COM10&#x27;</span>, <span class="number">115200</span>, timeout=<span class="number">0.5</span>)	</span><br><span class="line"><span class="comment"># 检测是否成功开启</span></span><br><span class="line"><span class="keyword">if</span> serial.isOpen() :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;open success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line">    </span><br><span class="line">data = serial.readline()  <span class="comment"># 读取一行数据，读到\n为止</span></span><br><span class="line"></span><br><span class="line">data = data.decode(<span class="string">&quot;unicode_escape&quot;</span>).split(<span class="string">&quot; &quot;</span>)     <span class="comment"># 转码，非常重要</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>pyserial</tag>
        <tag>串口</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】USB</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91USB/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="设置USB虚拟串口"><a href="#设置USB虚拟串口" class="headerlink" title="设置USB虚拟串口"></a>设置USB虚拟串口</h2><p>在CUBEMX中需要配置两处</p>
<p>Connectivity中</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9157c8f4f2.png" alt="image-20230112230239663"></p>
<p>和Middleware</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91582ef9f8.png" alt="image-20230112230152699"></p>
<p>之后可以直接发送数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usbd_cdc_if.h&quot;</span></span></span><br><span class="line">CDC_Transmit_FS(buff,<span class="keyword">sizeof</span>(buff)); <span class="comment">//USB 串口发送数据</span></span><br></pre></td></tr></table></figure>
<h4 id="发送数据代码-printf"><a href="#发送数据代码-printf" class="headerlink" title="发送数据代码 printf"></a>发送数据代码 printf</h4><p>生成的 usbd_cdc_if.c 文件是管理收发数据的</p>
<p>重定义print功能，需要重新定义一个函数代替使用</p>
<ol>
<li><p>需要手动添加 include</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;usbd_cdc_if.h&quot;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在 usbd_cdc_if.c 中添加 usb_printf 函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">usb_printf</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *format, ...)</span></span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="type">uint32_t</span> length;</span><br><span class="line"> </span><br><span class="line">    va_start(args, format);</span><br><span class="line">    length = vsnprintf((<span class="type">char</span> *)UserTxBufferFS, APP_TX_DATA_SIZE, (<span class="type">char</span> *)format, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    CDC_Transmit_FS(UserTxBufferFS, length);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* USER CODE END PRIVATE_FUNCTIONS_IMPLEMENTATION */</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>之后可以直接把 usb_printf 当成 printf 使用</p>
<h4 id="接收数据代码"><a href="#接收数据代码" class="headerlink" title="接收数据代码"></a>接收数据代码</h4></li>
</ol>
<p><a href="http://t.csdn.cn/xDms6">待研究</a></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>USB</tag>
      </tags>
  </entry>
  <entry>
    <title>【pyautogui】控制键鼠</title>
    <url>/2023/library/python/%E3%80%90pyautogui%E3%80%91%E6%8E%A7%E5%88%B6%E9%94%AE%E9%BC%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="https://pyautogui.readthedocs.io/en/latest/">官方文档</a></p>
<p>能模拟电脑按下按键，控制鼠标等操作</p>
<p><a href="http://t.csdn.cn/nr5Et">这人总结挺全的</a></p>
<h2 id="鼠标"><a href="#鼠标" class="headerlink" title="鼠标"></a>鼠标</h2><h4 id="position-获取坐标"><a href="#position-获取坐标" class="headerlink" title="position 获取坐标"></a>position 获取坐标</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.position()</span><br></pre></td></tr></table></figure>
<h4 id="moveTo，moveRel-移动鼠标"><a href="#moveTo，moveRel-移动鼠标" class="headerlink" title="moveTo，moveRel 移动鼠标"></a>moveTo，moveRel 移动鼠标</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.moveTo(x, y, duration=<span class="number">1.2</span>)</span><br><span class="line">pyautogui.moveRel(<span class="number">50</span>, <span class="number">100</span>, duration=<span class="number">1.5</span>)	<span class="comment"># 相对移动</span></span><br></pre></td></tr></table></figure>
<h4 id="click-按下鼠标"><a href="#click-按下鼠标" class="headerlink" title="click 按下鼠标"></a>click 按下鼠标</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.click(<span class="number">50</span>, <span class="number">100</span>, clicks=<span class="number">3</span>, interval=<span class="number">0.25</span>, button=<span class="string">&#x27;right&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 此外还有简单使用的</span></span><br><span class="line">pyautogui.rightClick(x=<span class="number">100</span>, y=<span class="number">200</span>) <span class="comment"># 移动到绝对位置（100, 200）单击鼠标右键</span></span><br><span class="line">pyautogui.middleClick(x=<span class="number">100</span>, y=<span class="number">200</span>) <span class="comment"># 移动到绝对位置（100, 200）单击鼠标中键</span></span><br><span class="line">pyautogui.doubleClick(x=<span class="number">100</span>, y=<span class="number">200</span>) <span class="comment"># 移动到绝对位置（100, 200）双击鼠标</span></span><br><span class="line">pyautogui.tripleClick(x=<span class="number">100</span>, y=<span class="number">200</span>) <span class="comment"># 移动到绝对位置（100, 200）三击鼠标</span></span><br></pre></td></tr></table></figure>
<h4 id="scroll-滚动鼠标滚轮"><a href="#scroll-滚动鼠标滚轮" class="headerlink" title="scroll 滚动鼠标滚轮"></a>scroll 滚动鼠标滚轮</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.scroll(-<span class="number">10</span>, x=<span class="number">100</span>, y=<span class="number">100</span>) <span class="comment"># 向下滚动10格</span></span><br></pre></td></tr></table></figure>
<h2 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h2><h4 id="typewrite-打字"><a href="#typewrite-打字" class="headerlink" title="typewrite 打字"></a>typewrite 打字</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.typewrite(<span class="string">&#x27;Hello world!&#x27;</span>, interval=<span class="number">0.25</span>)	<span class="comment"># 时间间隔</span></span><br></pre></td></tr></table></figure>
<h4 id="press，keyDown，keyUp-模拟按键"><a href="#press，keyDown，keyUp-模拟按键" class="headerlink" title="press，keyDown，keyUp 模拟按键"></a>press，keyDown，keyUp 模拟按键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.press(<span class="string">&#x27;enter&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>按键名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;%&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&quot;&#x27;&quot;</span>, <span class="string">&#x27;(&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;*&#x27;</span>, <span class="string">&#x27;+&#x27;</span>, <span class="string">&#x27;,&#x27;</span>, <span class="string">&#x27;-&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;:&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&lt;&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;[&#x27;</span>, <span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;`&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;g&#x27;</span>, <span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;i&#x27;</span>, <span class="string">&#x27;j&#x27;</span>, <span class="string">&#x27;k&#x27;</span>, <span class="string">&#x27;l&#x27;</span>, <span class="string">&#x27;m&#x27;</span>, <span class="string">&#x27;n&#x27;</span>, <span class="string">&#x27;o&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;p&#x27;</span>, <span class="string">&#x27;q&#x27;</span>, <span class="string">&#x27;r&#x27;</span>, <span class="string">&#x27;s&#x27;</span>, <span class="string">&#x27;t&#x27;</span>, <span class="string">&#x27;u&#x27;</span>, <span class="string">&#x27;v&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, <span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>, <span class="string">&#x27;|&#x27;</span>, <span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;~&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;accept&#x27;</span>, <span class="string">&#x27;add&#x27;</span>, <span class="string">&#x27;alt&#x27;</span>, <span class="string">&#x27;altleft&#x27;</span>, <span class="string">&#x27;altright&#x27;</span>, <span class="string">&#x27;apps&#x27;</span>, <span class="string">&#x27;backspace&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;browserback&#x27;</span>, <span class="string">&#x27;browserfavorites&#x27;</span>, <span class="string">&#x27;browserforward&#x27;</span>, <span class="string">&#x27;browserhome&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;browserrefresh&#x27;</span>, <span class="string">&#x27;browsersearch&#x27;</span>, <span class="string">&#x27;browserstop&#x27;</span>, <span class="string">&#x27;capslock&#x27;</span>, <span class="string">&#x27;clear&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;convert&#x27;</span>, <span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;ctrlleft&#x27;</span>, <span class="string">&#x27;ctrlright&#x27;</span>, <span class="string">&#x27;decimal&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;delete&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;divide&#x27;</span>, <span class="string">&#x27;down&#x27;</span>, <span class="string">&#x27;end&#x27;</span>, <span class="string">&#x27;enter&#x27;</span>, <span class="string">&#x27;esc&#x27;</span>, <span class="string">&#x27;escape&#x27;</span>, <span class="string">&#x27;execute&#x27;</span>, <span class="string">&#x27;f1&#x27;</span>, <span class="string">&#x27;f10&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;f11&#x27;</span>, <span class="string">&#x27;f12&#x27;</span>, <span class="string">&#x27;f13&#x27;</span>, <span class="string">&#x27;f14&#x27;</span>, <span class="string">&#x27;f15&#x27;</span>, <span class="string">&#x27;f16&#x27;</span>, <span class="string">&#x27;f17&#x27;</span>, <span class="string">&#x27;f18&#x27;</span>, <span class="string">&#x27;f19&#x27;</span>, <span class="string">&#x27;f2&#x27;</span>, <span class="string">&#x27;f20&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;f21&#x27;</span>, <span class="string">&#x27;f22&#x27;</span>, <span class="string">&#x27;f23&#x27;</span>, <span class="string">&#x27;f24&#x27;</span>, <span class="string">&#x27;f3&#x27;</span>, <span class="string">&#x27;f4&#x27;</span>, <span class="string">&#x27;f5&#x27;</span>, <span class="string">&#x27;f6&#x27;</span>, <span class="string">&#x27;f7&#x27;</span>, <span class="string">&#x27;f8&#x27;</span>, <span class="string">&#x27;f9&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;final&#x27;</span>, <span class="string">&#x27;fn&#x27;</span>, <span class="string">&#x27;hanguel&#x27;</span>, <span class="string">&#x27;hangul&#x27;</span>, <span class="string">&#x27;hanja&#x27;</span>, <span class="string">&#x27;help&#x27;</span>, <span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;insert&#x27;</span>, <span class="string">&#x27;junja&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;kana&#x27;</span>, <span class="string">&#x27;kanji&#x27;</span>, <span class="string">&#x27;launchapp1&#x27;</span>, <span class="string">&#x27;launchapp2&#x27;</span>, <span class="string">&#x27;launchmail&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;launchmediaselect&#x27;</span>, <span class="string">&#x27;left&#x27;</span>, <span class="string">&#x27;modechange&#x27;</span>, <span class="string">&#x27;multiply&#x27;</span>, <span class="string">&#x27;nexttrack&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;nonconvert&#x27;</span>, <span class="string">&#x27;num0&#x27;</span>, <span class="string">&#x27;num1&#x27;</span>, <span class="string">&#x27;num2&#x27;</span>, <span class="string">&#x27;num3&#x27;</span>, <span class="string">&#x27;num4&#x27;</span>, <span class="string">&#x27;num5&#x27;</span>, <span class="string">&#x27;num6&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;num7&#x27;</span>, <span class="string">&#x27;num8&#x27;</span>, <span class="string">&#x27;num9&#x27;</span>, <span class="string">&#x27;numlock&#x27;</span>, <span class="string">&#x27;pagedown&#x27;</span>, <span class="string">&#x27;pageup&#x27;</span>, <span class="string">&#x27;pause&#x27;</span>, <span class="string">&#x27;pgdn&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;pgup&#x27;</span>, <span class="string">&#x27;playpause&#x27;</span>, <span class="string">&#x27;prevtrack&#x27;</span>, <span class="string">&#x27;print&#x27;</span>, <span class="string">&#x27;printscreen&#x27;</span>, <span class="string">&#x27;prntscrn&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;prtsc&#x27;</span>, <span class="string">&#x27;prtscr&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;right&#x27;</span>, <span class="string">&#x27;scrolllock&#x27;</span>, <span class="string">&#x27;select&#x27;</span>, <span class="string">&#x27;separator&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;shiftleft&#x27;</span>, <span class="string">&#x27;shiftright&#x27;</span>, <span class="string">&#x27;sleep&#x27;</span>, <span class="string">&#x27;space&#x27;</span>, <span class="string">&#x27;stop&#x27;</span>, <span class="string">&#x27;subtract&#x27;</span>, <span class="string">&#x27;tab&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;up&#x27;</span>, <span class="string">&#x27;volumedown&#x27;</span>, <span class="string">&#x27;volumemute&#x27;</span>, <span class="string">&#x27;volumeup&#x27;</span>, <span class="string">&#x27;win&#x27;</span>, <span class="string">&#x27;winleft&#x27;</span>, <span class="string">&#x27;winright&#x27;</span>, <span class="string">&#x27;yen&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;command&#x27;</span>, <span class="string">&#x27;option&#x27;</span>, <span class="string">&#x27;optionleft&#x27;</span>, <span class="string">&#x27;optionright&#x27;</span>]</span><br></pre></td></tr></table></figure>
<h4 id="hotkey-同时按下多个按键"><a href="#hotkey-同时按下多个按键" class="headerlink" title="hotkey 同时按下多个按键"></a>hotkey 同时按下多个按键</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pyautogui.hotkey(<span class="string">&#x27;ctrl&#x27;</span>, <span class="string">&#x27;shift&#x27;</span>, <span class="string">&#x27;esc&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>pyautogui</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】ADC采样</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91ADC%E9%87%87%E6%A0%B7/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="http://t.csdn.cn/FOy5t">解释的很详细</a></p>
<h2 id="连续模式"><a href="#连续模式" class="headerlink" title="连续模式"></a>连续模式</h2><p><img src="https://s1.xptou.com/2023/01/19/63c9156587785.png" alt="image-20230112230011541"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">uint16_t</span> <span class="title function_">ADC_Read</span><span class="params">(<span class="type">uint32_t</span> Channel)</span></span><br><span class="line">&#123;</span><br><span class="line">	ADC_ChannelConfTypeDef sConfig = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	sConfig.Channel = Channel;                                         <span class="comment">/* 通道 */</span></span><br><span class="line">	sConfig.Rank = ADC_REGULAR_RANK_1;                              </span><br><span class="line">	sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;                  <span class="comment">/* 采样时间 */</span></span><br><span class="line">	<span class="keyword">if</span> (HAL_ADC_ConfigChannel(&amp;hadc1, &amp;sConfig) != HAL_OK)             </span><br><span class="line">	&#123;</span><br><span class="line">		Error_Handler();</span><br><span class="line">	&#125;</span><br><span class="line">	HAL_ADC_Start(&amp;hadc1);</span><br><span class="line">	HAL_ADC_PollForConversion(&amp;hadc1, HAL_MAX_DELAY);</span><br><span class="line">	<span class="keyword">return</span> (<span class="type">uint16_t</span>)HAL_ADC_GetValue(&amp;hadc1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	uint16_t ADC_Value[5];</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	ADC_Value[0] = ADC_Read(ADC_CHANNEL_1);  // 采集并读取通道1</span></span><br><span class="line"><span class="comment">	ADC_Value[1] = ADC_Read(ADC_CHANNEL_4);</span></span><br><span class="line"><span class="comment">	ADC_Value[2] = ADC_Read(ADC_CHANNEL_5);</span></span><br><span class="line"><span class="comment">	ADC_Value[3] = ADC_Read(ADC_CHANNEL_6);</span></span><br><span class="line"><span class="comment">	ADC_Value[4] = ADC_Read(ADC_CHANNEL_7);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>ADC采样</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】蜂鸣器</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E8%9C%82%E9%B8%A3%E5%99%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>无源蜂鸣器才可调音调，输出pwm控制，一般用三极管加大驱动能力</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9086631b05.png" alt="image-20230112131654789"></p>
<p>拿个开关疯狂开闭也能让他发声，亲测</p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="陶瓷蜂鸣器"><a href="#陶瓷蜂鸣器" class="headerlink" title="陶瓷蜂鸣器"></a>陶瓷蜂鸣器</h4><p>是扁扁的一片，不知道怎么用捏</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>蜂鸣器</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】三极管</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E4%B8%89%E6%9E%81%E7%AE%A1/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">一直以来觉得三极管好反常识，尤其是什么发射极反偏，集电极反偏啥的，好多教程根本不提是什么引脚。看了两个哔站视频，终于才明白一点。</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="https://www.bilibili.com/video/BV1fB4y147Gn">三极管原理</a></p>
<p><a href="https://www.bilibili.com/video/BV1T3411i7eX">计算示例</a></p>
<p>还没完全理解，很可能多数都不对！！！</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="npn型"><a href="#npn型" class="headerlink" title="npn型"></a>npn型</h4><p>首先区分三个状态</p>
<ol>
<li><p>用电压区分</p>
<p>| 截止              | 放大                          | 饱和                          |<br>| ————————- | ——————————————- | ——————————————- |<br>| 只要 $V_{BE}<0.7$ | $v_{be}="0.7$" 并且 $v_c> V_B$ | $V_{BE}=0.7$ 并且 $V_C &lt; V_B$ |</0.7$></p>
</li>
<li><p>用电流区分</p>
<p>| 截止       | 放大 | 饱和 |<br>| ————— | —— | —— |<br>| 全部没电流 |      |      |</p>
</li>
</ol>
<h2 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h2><p>电阻等效</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>截止</th>
<th>放大</th>
<th>饱和</th>
</tr>
</thead>
<tbody>
<tr>
<td>CE断开，$R_{CE}$无穷大</td>
<td>$R_{CE}$ 随着电流增大减小</td>
<td>$R_{CE} = 0$</td>
</tr>
</tbody>
</table>
</div>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>硬件知识</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】电容触摸按键</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E7%94%B5%E5%AE%B9%E8%A7%A6%E6%91%B8%E6%8C%89%E9%94%AE/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">​    自从听说了PCB可以直接绘制电容触摸按键，加上嘉立创可以白嫖板子，就一直想画一个试试。没啥靠谱的教程，入门历程还是十分艰苦啊 ~</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>电容触摸按键应用不算广泛，不过常见的，电磁炉就是。主要优点就是没损耗，寿命长。</p>
<p>电容触摸按键实现有两种方法：用现成的芯片，用电路实现</p>
<ol>
<li><p>电路实现</p>
<p><a href="https://www.bilibili.com/video/BV1tY41187eA">唐老师讲原理</a></p>
</li>
</ol>
<p>​    电路实现原理为：手触摸后相当于与地并联了电容，通过检测电容阻抗分压，感知是否有变化</p>
<p>​    具体就是，单片机输入PWM，再用ADC采样</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9085c3646c.png" alt="image-20230109162024179"></p>
<p>上图的CP是金属板电路的寄生电容，CF是人体触摸后的并联电容</p>
<p>设计时注意长这样，若是单个触摸按键，尽量用圆形；这种异形适合做滑块</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>背面</th>
<th>正面</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="https://s2.loli.net/2023/01/09/DYJRWlKzwSos8Iq.png" alt="image-20230109162358474"></td>
<td><img src="https://s1.xptou.com/2023/01/19/63c908616faf2.png" alt="image-20230109162414547"></td>
</tr>
</tbody>
</table>
</div>
<ol>
<li><p>用成品芯片</p>
<p>成品芯片的实现原理就是上述的，种类五花八门</p>
<p>| 芯片                      | 介绍                                                         |<br>| ————————————- | —————————————————————————————— |<br>| ST01B和XW02C              | 唐老师用过                                                   |<br>| ts04，ts08，TTP229-BSF-16 | 分别对应控制4、8、16个按键，电路挺简单，应该没问题           |<br>| CH552，CH551              | 本身是小单片机，同时能控制6个按键（可以做滑块检测）只需要一个引脚，超级方便，本次就用它 |</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>电容触摸按键</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】as5600</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91as5600/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">as5600 是磁编码器，一般用于电机测转速</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>这个模块有三种读取方法，adc、pwm、i2c，但是我只搞出来了一种，i2c</p>
<p>使用方法就是在上面放一个扁平的磁铁，旋转，这里数值就会相应增大或减小</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><h4 id="as5600-h"><a href="#as5600-h" class="headerlink" title="as5600.h"></a>as5600.h</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AS5600_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AS5600_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_I2C_HANDLE hi2c1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_TIME_OUT_BASE   10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> I2C_TIME_OUT_BYTE   1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">注意:AS5600的地址0x36是指的是原始7位设备地址,而ST I2C库中的设备地址是指原始设备地址左移一位得到的设备地址</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_RAW_ADDR    0x36</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_ADDR        (AS5600_RAW_ADDR &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_WRITE_ADDR  (AS5600_RAW_ADDR &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_READ_ADDR   ((AS5600_RAW_ADDR &lt;&lt; 1) | 1)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_RESOLUTION 4096 <span class="comment">//12bit Resolution </span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AS5600_RAW_ANGLE_REGISTER  0x0C</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">bsp_as5600Init</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">uint16_t</span> <span class="title function_">bsp_as5600GetRawAngle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">bsp_as5600GetAngle</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/* __BSP_AS5600_H */</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="as5600-c"><a href="#as5600-c" class="headerlink" title="as5600.c"></a>as5600.c</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &quot;bsp_as5600.h&quot;</span><br><span class="line"></span><br><span class="line">#define abs(x) ((x)&gt;0?(x):-(x))</span><br><span class="line">#define _2PI 6.28318530718</span><br><span class="line"></span><br><span class="line">static float angle_data_prev; //上次位置</span><br><span class="line">static float full_rotation_offset; //转过的整圈数</span><br><span class="line"></span><br><span class="line">void bsp_as5600Init(void) &#123;</span><br><span class="line">  /* init i2c interface */</span><br><span class="line">  </span><br><span class="line">  /* init var */</span><br><span class="line">  full_rotation_offset = 0;</span><br><span class="line">  angle_data_prev = bsp_as5600GetRawAngle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int i2cWrite(uint8_t dev_addr, uint8_t *pData, uint32_t count) &#123;</span><br><span class="line">  int status;</span><br><span class="line">  int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;</span><br><span class="line">  </span><br><span class="line">  status = HAL_I2C_Master_Transmit(&amp;AS5600_I2C_HANDLE, dev_addr, pData, count, i2c_time_out);</span><br><span class="line">  return status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int i2cRead(uint8_t dev_addr, uint8_t *pData, uint32_t count) &#123;</span><br><span class="line">  int status;</span><br><span class="line">  int i2c_time_out = I2C_TIME_OUT_BASE + count * I2C_TIME_OUT_BYTE;</span><br><span class="line">  </span><br><span class="line">  status = HAL_I2C_Master_Receive(&amp;AS5600_I2C_HANDLE, (dev_addr | 1), pData, count, i2c_time_out);</span><br><span class="line">  return status;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">uint16_t bsp_as5600GetRawAngle(void) &#123;</span><br><span class="line">  uint16_t raw_angle;</span><br><span class="line">  uint8_t buffer[2] = &#123;0&#125;;</span><br><span class="line">  uint8_t raw_angle_register = AS5600_RAW_ANGLE_REGISTER;</span><br><span class="line">  </span><br><span class="line">  i2cWrite(AS5600_ADDR, &amp;raw_angle_register, 1);</span><br><span class="line">  i2cRead(AS5600_ADDR, buffer, 2);</span><br><span class="line">  raw_angle = ((uint16_t)buffer[0] &lt;&lt; 8) | (uint16_t)buffer[1];</span><br><span class="line">  return raw_angle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">float bsp_as5600GetAngle(void) &#123;</span><br><span class="line">  float angle_data = bsp_as5600GetRawAngle();</span><br><span class="line">  </span><br><span class="line">  float d_angle = angle_data - angle_data_prev;</span><br><span class="line">  if(abs(d_angle) &gt; (0.8 * AS5600_RESOLUTION)) &#123;</span><br><span class="line">    full_rotation_offset += (d_angle &gt; 0 ? -_2PI : _2PI);</span><br><span class="line">  &#125;</span><br><span class="line">  angle_data_prev = angle_data;</span><br><span class="line">  </span><br><span class="line">  return (full_rotation_offset + (angle_data / (float)AS5600_RESOLUTION)*_2PI);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>初始化 <code>bsp_as5600Init();</code></p>
<p>读取角度 <code>angle = bsp_as5600GetAngle();</code></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>编码器</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】amg8833</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91amg8833/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>amg8833 是红外成像模块，返回 8×8 个温度值</p>
<p>分辨率是0.25°C，精度±2.5℃</p>
<p>速度最快 10Hz</p>
<p>大概100多块钱，体积很小，精度很低，像素也很少，想不到能有啥用途</p>
<p>可以在7m距离内检测到人</p>
<p><a href="https://blog.csdn.net/qlexcel/article/details/106139080">详细看这个</a>，模块性质和寄存器功能    </p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用方法：amg88xxInit -&gt; readPixels</p>
<ol>
<li><p>amg8833.c</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;amg8833.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pctl</span> _<span class="title">pctl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rst</span> _<span class="title">rst</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fpsc</span> _<span class="title">fpsc</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intc</span> _<span class="title">intc</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> _<span class="title">stat</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sclr</span> _<span class="title">sclr</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ave</span> _<span class="title">ave</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inthl</span> _<span class="title">inthl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inthh</span> _<span class="title">inthh</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intll</span> _<span class="title">intll</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intlh</span> _<span class="title">intlh</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ihysl</span> _<span class="title">ihysl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ihysh</span> _<span class="title">ihysh</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tthl</span> _<span class="title">tthl</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tthh</span> _<span class="title">tthh</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getPCTL</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _pctl.PCTL; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getRST</span><span class="params">(<span class="type">void</span>)</span>&#123;	<span class="keyword">return</span> _rst.RST; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getFPSC</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _fpsc.FPS &amp; <span class="number">0x01</span>; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getINTC</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> (_intc.INTMOD &lt;&lt; <span class="number">1</span> | _intc.INTEN) &amp; <span class="number">0x03</span>; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getSTAT</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> ( (_stat.OVF_THS &lt;&lt; <span class="number">3</span>) | (_stat.OVF_IRS &lt;&lt; <span class="number">2</span>) | (_stat.INTF &lt;&lt; <span class="number">1</span>) ) &amp; <span class="number">0x07</span>; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getSCLR</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> ((_sclr.OVT_CLR &lt;&lt; <span class="number">3</span>) | (_sclr.OVS_CLR &lt;&lt; <span class="number">2</span>) | (_sclr.INTCLR &lt;&lt; <span class="number">1</span>)) &amp; <span class="number">0x07</span>; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getAVE</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> (_ave.MAMOD &lt;&lt; <span class="number">5</span>); &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getINTHL</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _inthl.INT_LVL_H; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getINTHH</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _inthh.INT_LVL_H; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getINTLL</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _intll.INT_LVL_L; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getINTLH</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> (_intlh.INT_LVL_L &amp; <span class="number">0xF</span>); &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getIHYSL</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _ihysl.INT_HYS; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getIHYSH</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> (_ihysh.INT_HYS &amp; <span class="number">0xF</span>); &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getTTHL</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> _tthl.TEMP; &#125;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">getTTHH</span><span class="params">(<span class="type">void</span>)</span>&#123; <span class="keyword">return</span> ( (_tthh.SIGN &lt;&lt; <span class="number">3</span>) | _tthh.TEMP) &amp; <span class="number">0xF</span>; &#125;			</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">min</span><span class="params">(<span class="type">uint8_t</span> a, <span class="type">uint8_t</span> b)</span>&#123; <span class="keyword">return</span> a &lt; b ? a : b; &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> constrain(amt,low,high) ((amt)<span class="string">&lt;(low)?(low):((amt)&gt;</span>(high)?(high):(amt)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> I2C_HandleTypeDef hi2c1;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Setups the I2C interface and hardware</span></span><br><span class="line"><span class="comment">    @param  addr Optional I2C address the sensor can be found on. Default is 0x69</span></span><br><span class="line"><span class="comment">    @returns True if device is set up, false on any failure</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">amg88xxInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//enter normal mode</span></span><br><span class="line">	_pctl.PCTL = AMG88xx_NORMAL_MODE;</span><br><span class="line">	write8(AMG88xx_PCTL, getPCTL());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//software reset</span></span><br><span class="line">	_rst.RST = AMG88xx_INITIAL_RESET;</span><br><span class="line">	write8(AMG88xx_RST, getRST());</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//disable interrupts by default</span></span><br><span class="line">	disableInterrupt();</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//set to 10 FPS</span></span><br><span class="line">	_fpsc.FPS = AMG88xx_FPS_10;</span><br><span class="line">	write8(AMG88xx_FPSC, getFPSC());</span><br><span class="line"></span><br><span class="line">	HAL_Delay(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Set the moving average mode.</span></span><br><span class="line"><span class="comment">    @param  mode if True is passed, output will be twice the moving average</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setMovingAverageMode</span><span class="params">(<span class="type">int</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">	_ave.MAMOD = mode;</span><br><span class="line">	write8(AMG88xx_AVE, getAVE());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Set the interrupt levels. The hysteresis value defaults to .95 * high</span></span><br><span class="line"><span class="comment">    @param  high the value above which an interrupt will be triggered</span></span><br><span class="line"><span class="comment">    @param  low the value below which an interrupt will be triggered</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptLevels</span><span class="params">(<span class="type">float</span> high, <span class="type">float</span> low)</span></span><br><span class="line">&#123;</span><br><span class="line">	setInterruptLevelsHist(high, low, high * <span class="number">.95</span>f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Set the interrupt levels</span></span><br><span class="line"><span class="comment">    @param  high the value above which an interrupt will be triggered</span></span><br><span class="line"><span class="comment">    @param  low the value below which an interrupt will be triggered</span></span><br><span class="line"><span class="comment">    @param hysteresis the hysteresis value for interrupt detection</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptLevelsHist</span><span class="params">(<span class="type">float</span> high, <span class="type">float</span> low, <span class="type">float</span> hysteresis)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> highConv = high / AMG88xx_PIXEL_TEMP_CONVERSION;</span><br><span class="line">	highConv = constrain(highConv, <span class="number">-4095</span>, <span class="number">4095</span>);</span><br><span class="line">	_inthl.INT_LVL_H = highConv &amp; <span class="number">0xFF</span>;</span><br><span class="line">	_inthh.INT_LVL_H = (highConv &amp; <span class="number">0xF</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">	write8(AMG88xx_INTHL, getINTHL());</span><br><span class="line">	write8(AMG88xx_INTHH, getINTHH());</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> lowConv = low / AMG88xx_PIXEL_TEMP_CONVERSION;</span><br><span class="line">	lowConv = constrain(lowConv, <span class="number">-4095</span>, <span class="number">4095</span>);</span><br><span class="line">	_intll.INT_LVL_L = lowConv &amp; <span class="number">0xFF</span>;</span><br><span class="line">	_intlh.INT_LVL_L = (lowConv &amp; <span class="number">0xF</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">	write8(AMG88xx_INTLL, getINTLL());</span><br><span class="line">	write8(AMG88xx_INTLH, getINTLH());</span><br><span class="line">	</span><br><span class="line">	<span class="type">int</span> hysConv = hysteresis / AMG88xx_PIXEL_TEMP_CONVERSION;</span><br><span class="line">	hysConv = constrain(hysConv, <span class="number">-4095</span>, <span class="number">4095</span>);</span><br><span class="line">	_ihysl.INT_HYS = hysConv &amp; <span class="number">0xFF</span>;</span><br><span class="line">	_ihysh.INT_HYS = (hysConv &amp; <span class="number">0xF</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">	write8(AMG88xx_IHYSL, getIHYSL());</span><br><span class="line">	write8(AMG88xx_IHYSH, getIHYSH());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  enable the interrupt pin on the device.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enableInterrupt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	_intc.INTEN = <span class="number">1</span>;</span><br><span class="line">	write8(AMG88xx_INTC, getINTC());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  disable the interrupt pin on the device</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">disableInterrupt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	_intc.INTEN = <span class="number">0</span>;</span><br><span class="line">	write8(AMG88xx_INTC, getINTC());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Set the interrupt to either absolute value or difference mode</span></span><br><span class="line"><span class="comment">    @param  mode passing AMG88xx_DIFFERENCE sets the device to difference mode, AMG88xx_ABSOLUTE_VALUE sets to absolute value mode.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptMode</span><span class="params">(<span class="type">uint8_t</span> mode)</span></span><br><span class="line">&#123;</span><br><span class="line">	_intc.INTMOD = mode;</span><br><span class="line">	write8(AMG88xx_INTC, getINTC());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Read the state of the triggered interrupts on the device. The full interrupt register is 8 bytes in length.</span></span><br><span class="line"><span class="comment">    @param  buf the pointer to where the returned data will be stored</span></span><br><span class="line"><span class="comment">    @param  size Optional number of bytes to read. Default is 8 bytes.</span></span><br><span class="line"><span class="comment">    @returns up to 8 bytes of data in buf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">getInterrupt</span><span class="params">(<span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> bytesToRead = min(size, (<span class="type">uint8_t</span>)<span class="number">8</span>);</span><br><span class="line">	</span><br><span class="line">	read(AMG88xx_INT_OFFSET, buf, bytesToRead);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Clear any triggered interrupts</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">clearInterrupt</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	_rst.RST = AMG88xx_FLAG_RESET;</span><br><span class="line">	write8(AMG88xx_RST, getRST());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  read the onboard thermistor</span></span><br><span class="line"><span class="comment">    @returns a the floating point temperature in degrees Celsius</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">readThermistor</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> raw[<span class="number">2</span>];</span><br><span class="line">	read(AMG88xx_TTHL, raw, <span class="number">2</span>);</span><br><span class="line">	<span class="type">uint16_t</span> recast = ((<span class="type">uint16_t</span>)raw[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | ((<span class="type">uint16_t</span>)raw[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> signedMag12ToFloat(recast) * AMG88xx_THERMISTOR_CONVERSION;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Read Infrared sensor values</span></span><br><span class="line"><span class="comment">    @param  buf the array to place the pixels in</span></span><br><span class="line"><span class="comment">    @param  size Optionsl number of bytes to read (up to 64). Default is 64 bytes.</span></span><br><span class="line"><span class="comment">    @return up to 64 bytes of pixel data in buf</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">readPixels</span><span class="params">(<span class="type">float</span> *buf, <span class="type">uint8_t</span> size)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint16_t</span> recast;</span><br><span class="line">	<span class="type">float</span> converted;</span><br><span class="line">	<span class="type">uint8_t</span> bytesToRead = min((<span class="type">uint8_t</span>)(size &lt;&lt; <span class="number">1</span>), (<span class="type">uint8_t</span>)(AMG88xx_PIXEL_ARRAY_SIZE &lt;&lt; <span class="number">1</span>));</span><br><span class="line">	<span class="type">uint8_t</span> rawArray[bytesToRead];</span><br><span class="line">	read(AMG88xx_PIXEL_OFFSET, rawArray, bytesToRead);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;size; i++)&#123;</span><br><span class="line">		<span class="type">uint8_t</span> pos = i &lt;&lt; <span class="number">1</span>;</span><br><span class="line">		recast = ((<span class="type">uint16_t</span>)rawArray[pos + <span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | ((<span class="type">uint16_t</span>)rawArray[pos]);</span><br><span class="line">		</span><br><span class="line">		converted = signedMag12ToFloat(recast) * AMG88xx_PIXEL_TEMP_CONVERSION;</span><br><span class="line">		buf[i] = converted;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">readPixelsRaw</span><span class="params">(<span class="type">int16_t</span>* buf)</span></span><br><span class="line">&#123;</span><br><span class="line">	read(AMG88xx_PIXEL_OFFSET, (<span class="type">uint8_t</span>*)buf, <span class="number">128</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  write one byte of data to the specified register</span></span><br><span class="line"><span class="comment">    @param  reg the register to write to</span></span><br><span class="line"><span class="comment">    @param  value the value to write</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">write8</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> value)</span></span><br><span class="line">&#123;</span><br><span class="line">	write(reg, &amp;value, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  read one byte of data from the specified register</span></span><br><span class="line"><span class="comment">    @param  reg the register to read</span></span><br><span class="line"><span class="comment">    @returns one byte of register data</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">read8</span><span class="params">(<span class="type">uint8_t</span> reg)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">uint8_t</span> ret;</span><br><span class="line">	read(reg, &amp;ret, <span class="number">1</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">	HAL_StatusTypeDef err;</span><br><span class="line">	</span><br><span class="line">	err = HAL_I2C_Mem_Read(&amp;hi2c1, (AMG88xx_ADDRESS), reg, <span class="number">1</span>, buf, num, <span class="number">0xffff</span>);</span><br><span class="line">	<span class="keyword">if</span>(err != HAL_OK)</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">	HAL_StatusTypeDef err;</span><br><span class="line">	</span><br><span class="line">	err = HAL_I2C_Mem_Write(&amp;hi2c1, (AMG88xx_ADDRESS), reg, <span class="number">1</span>, buf, num, <span class="number">0xffff</span>);</span><br><span class="line">	<span class="keyword">if</span>(err != HAL_OK)</span><br><span class="line">		<span class="keyword">while</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  convert a 12-bit signed magnitude value to a floating point number</span></span><br><span class="line"><span class="comment">    @param  val the 12-bit signed magnitude value to be converted</span></span><br><span class="line"><span class="comment">    @returns the converted floating point value</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">signedMag12ToFloat</span><span class="params">(<span class="type">uint16_t</span> val)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//take first 11 bits as absolute val</span></span><br><span class="line">	<span class="type">uint16_t</span> absVal = (val &amp; <span class="number">0x7FF</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (val &amp; <span class="number">0x8000</span>) ? <span class="number">0</span> - (<span class="type">float</span>)absVal : (<span class="type">float</span>)absVal ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**************************************************************************</span></span><br><span class="line"><span class="comment">插值法重构输出</span></span><br><span class="line"><span class="comment">***************************************************************************/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Resize</span><span class="params">(<span class="type">int16_t</span>* pixelsIn, <span class="type">int16_t</span>* pixelsOut, <span class="type">int</span> w, <span class="type">int</span> h, <span class="type">int</span> w2, <span class="type">int</span> h2)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> A, B, C, D, x, y, index, gray ;</span><br><span class="line">	<span class="type">float</span> x_ratio = ((<span class="type">float</span>)(w<span class="number">-1</span>))/w2 ;</span><br><span class="line">	<span class="type">float</span> y_ratio = ((<span class="type">float</span>)(h<span class="number">-1</span>))/h2 ;</span><br><span class="line">	<span class="type">float</span> x_diff, y_diff;</span><br><span class="line">	<span class="type">int</span> offset = <span class="number">0</span> ;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;h2;i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j=<span class="number">0</span>;j&lt;w2;j++) &#123;</span><br><span class="line">			x = (<span class="type">int</span>)(x_ratio * j) ;</span><br><span class="line">			y = (<span class="type">int</span>)(y_ratio * i) ;</span><br><span class="line">			x_diff = (x_ratio * j) - x ;</span><br><span class="line">			y_diff = (y_ratio * i) - y ;</span><br><span class="line">			index = y*w+x ;</span><br><span class="line">			</span><br><span class="line">			</span><br><span class="line">			A = pixelsIn[index] &amp; <span class="number">0xffff</span>;</span><br><span class="line">			B = pixelsIn[index+<span class="number">1</span>] &amp; <span class="number">0xffff</span>;</span><br><span class="line">			C = pixelsIn[index+w] &amp; <span class="number">0xffff</span>;</span><br><span class="line">			D = pixelsIn[index+w+<span class="number">1</span>] &amp; <span class="number">0xffff</span>;</span><br><span class="line">         </span><br><span class="line">			</span><br><span class="line">			gray = (<span class="type">int</span>)(</span><br><span class="line">				A*(<span class="number">1</span>-x_diff)*(<span class="number">1</span>-y_diff) +  B*(x_diff)*(<span class="number">1</span>-y_diff) +</span><br><span class="line">				C*(y_diff)*(<span class="number">1</span>-x_diff)   +  D*(x_diff*y_diff)</span><br><span class="line">							 ) ;</span><br><span class="line">			</span><br><span class="line">			pixelsOut[offset++] = gray ;                                   </span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li><p>amg8833.h</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __AMG8833_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __AMG8833_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;i2c.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment">    I2C ADDRESS/BITS</span></span><br><span class="line"><span class="comment">    -----------------------------------------------------------------------*/</span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> AMG88xx_ADDRESS                (0xd2)	<span class="comment">//68</span></span></span><br><span class="line"><span class="comment">/*=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*=========================================================================</span></span><br><span class="line"><span class="comment">    REGISTERS</span></span><br><span class="line"><span class="comment">    -----------------------------------------------------------------------*/</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span></span></span><br><span class="line"><span class="class">    &#123;</span></span><br><span class="line">    AMG88xx_PCTL = <span class="number">0x00</span>,</span><br><span class="line">		AMG88xx_RST = <span class="number">0x01</span>,</span><br><span class="line">		AMG88xx_FPSC = <span class="number">0x02</span>,</span><br><span class="line">		AMG88xx_INTC = <span class="number">0x03</span>,</span><br><span class="line">		AMG88xx_STAT = <span class="number">0x04</span>,</span><br><span class="line">		AMG88xx_SCLR = <span class="number">0x05</span>,</span><br><span class="line">		<span class="comment">//0x06 reserved</span></span><br><span class="line">		AMG88xx_AVE = <span class="number">0x07</span>,</span><br><span class="line">		AMG88xx_INTHL = <span class="number">0x08</span>,</span><br><span class="line">		AMG88xx_INTHH = <span class="number">0x09</span>,</span><br><span class="line">		AMG88xx_INTLL = <span class="number">0x0A</span>,</span><br><span class="line">		AMG88xx_INTLH = <span class="number">0x0B</span>,</span><br><span class="line">		AMG88xx_IHYSL = <span class="number">0x0C</span>,</span><br><span class="line">		AMG88xx_IHYSH = <span class="number">0x0D</span>,</span><br><span class="line">		AMG88xx_TTHL = <span class="number">0x0E</span>,</span><br><span class="line">		AMG88xx_TTHH = <span class="number">0x0F</span>,</span><br><span class="line">		AMG88xx_INT_OFFSET = <span class="number">0x010</span>,</span><br><span class="line">		AMG88xx_PIXEL_OFFSET = <span class="number">0x80</span></span><br><span class="line">    &#125;;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">power_modes</span>&#123;</span></span><br><span class="line">		AMG88xx_NORMAL_MODE = <span class="number">0x00</span>,</span><br><span class="line">		AMG88xx_SLEEP_MODE = <span class="number">0x01</span>,</span><br><span class="line">		AMG88xx_STAND_BY_60 = <span class="number">0x20</span>,</span><br><span class="line">		AMG88xx_STAND_BY_10 = <span class="number">0x21</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">sw_resets</span> &#123;</span></span><br><span class="line">		AMG88xx_FLAG_RESET = <span class="number">0x30</span>,</span><br><span class="line">		AMG88xx_INITIAL_RESET = <span class="number">0x3F</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">frame_rates</span> &#123;</span></span><br><span class="line">		AMG88xx_FPS_10 = <span class="number">0x00</span>,</span><br><span class="line">		AMG88xx_FPS_1 = <span class="number">0x01</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">int_enables</span>&#123;</span></span><br><span class="line">		AMG88xx_INT_DISABLED = <span class="number">0x00</span>,</span><br><span class="line">		AMG88xx_INT_ENABLED = <span class="number">0x01</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">int_modes</span> &#123;</span></span><br><span class="line">		AMG88xx_DIFFERENCE = <span class="number">0x00</span>,</span><br><span class="line">		AMG88xx_ABSOLUTE_VALUE = <span class="number">0x01</span></span><br><span class="line">	&#125;;</span><br><span class="line">	</span><br><span class="line"><span class="comment">/*=========================================================================*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AMG88xx_PIXEL_ARRAY_SIZE 64</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AMG88xx_PIXEL_TEMP_CONVERSION .25f</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AMG88xx_THERMISTOR_CONVERSION .0625f</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line"><span class="comment">/*! </span></span><br><span class="line"><span class="comment">    @brief  Class that stores state and functions for interacting with AMG88xx IR sensor chips</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">/**************************************************************************/</span></span><br><span class="line">	</span><br><span class="line"><span class="type">int</span> <span class="title function_">amg88xxInit</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">readPixels</span><span class="params">(<span class="type">float</span> *buf, <span class="type">uint8_t</span> size<span class="comment">/* = AMG88xx_PIXEL_ARRAY_SIZE */</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">readPixelsRaw</span><span class="params">(<span class="type">int16_t</span>* buf)</span>;</span><br><span class="line"><span class="type">float</span> <span class="title function_">readThermistor</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setMovingAverageMode</span><span class="params">(<span class="type">int</span> mode)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">enableInterrupt</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">disableInterrupt</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptMode</span><span class="params">(<span class="type">uint8_t</span> mode)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">getInterrupt</span><span class="params">(<span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> <span class="comment">/*size = 8 */</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">clearInterrupt</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//this will automatically set hysteresis to 95% of the high value</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptLevels</span><span class="params">(<span class="type">float</span> high, <span class="type">float</span> low)</span>;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//this will manually set hysteresis</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">setInterruptLevelsHist</span><span class="params">(<span class="type">float</span> high, <span class="type">float</span> low, <span class="type">float</span> hysteresis)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">write8</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> value)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write16</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint16_t</span> value)</span>;</span><br><span class="line"><span class="type">uint8_t</span> <span class="title function_">read8</span><span class="params">(<span class="type">uint8_t</span> reg)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">read</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> num)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">write</span><span class="params">(<span class="type">uint8_t</span> reg, <span class="type">uint8_t</span> *buf, <span class="type">uint8_t</span> num)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">signedMag12ToFloat</span><span class="params">(<span class="type">uint16_t</span> val)</span>;</span><br><span class="line">		</span><br><span class="line">		 <span class="comment">// The power control register</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">pctl</span> &#123;</span></span><br><span class="line">            <span class="comment">// 0x00 = Normal Mode</span></span><br><span class="line">			<span class="comment">// 0x01 = Sleep Mode</span></span><br><span class="line">			<span class="comment">// 0x20 = Stand-by mode (60 sec intermittence)</span></span><br><span class="line">			<span class="comment">// 0x21 = Stand-by mode (10 sec intermittence)         </span></span><br><span class="line">         <span class="type">uint8_t</span> PCTL : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">		</span><br><span class="line"><span class="comment">//reset register</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">rst</span> &#123;</span></span><br><span class="line">			<span class="comment">//0x30 = flag reset (all clear status reg 0x04, interrupt flag and interrupt table)</span></span><br><span class="line">			<span class="comment">//0x3F = initial reset (brings flag reset and returns to initial setting)</span></span><br><span class="line">			<span class="type">uint8_t</span> RST : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line"><span class="comment">//frame rate register</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fpsc</span> &#123;</span>	</span><br><span class="line">			<span class="comment">//0 = 10FPS</span></span><br><span class="line">			<span class="comment">//1 = 1FPS</span></span><br><span class="line">			<span class="type">uint8_t</span> FPS : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//interrupt control register</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intc</span> &#123;</span></span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 0 = INT output reactive (Hi-Z)</span></span><br><span class="line">			<span class="comment">// 1 = INT output active</span></span><br><span class="line">			<span class="type">uint8_t</span> INTEN : <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">// 0 = Difference interrupt mode</span></span><br><span class="line">			<span class="comment">// 1 = absolute value interrupt mode</span></span><br><span class="line">			<span class="type">uint8_t</span> INTMOD : <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//status register</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stat</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> unused : <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//interrupt outbreak (val of interrupt table reg)</span></span><br><span class="line">			<span class="type">uint8_t</span> INTF : <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//temperature output overflow (val of temperature reg)</span></span><br><span class="line">			<span class="type">uint8_t</span> OVF_IRS : <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line">			<span class="comment">//thermistor temperature output overflow (value of thermistor)</span></span><br><span class="line">			<span class="type">uint8_t</span> OVF_THS : <span class="number">1</span>;</span><br><span class="line">			</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//status clear register</span></span><br><span class="line">		<span class="comment">//write to clear overflow flag and interrupt flag</span></span><br><span class="line">		<span class="comment">//after writing automatically turns to 0x00</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sclr</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> unused : <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//interrupt flag clear</span></span><br><span class="line">			<span class="type">uint8_t</span> INTCLR : <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//temp output overflow flag clear</span></span><br><span class="line">			<span class="type">uint8_t</span> OVS_CLR : <span class="number">1</span>;</span><br><span class="line">			<span class="comment">//thermistor temp output overflow flag clear</span></span><br><span class="line">			<span class="type">uint8_t</span> OVT_CLR : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//average register</span></span><br><span class="line">		<span class="comment">//for setting moving average output mode</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ave</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> unused : <span class="number">5</span>;</span><br><span class="line">			<span class="comment">//1 = twice moving average mode</span></span><br><span class="line">			<span class="type">uint8_t</span> MAMOD : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//interrupt level registers</span></span><br><span class="line">		<span class="comment">//for setting upper / lower limit hysteresis on interrupt level</span></span><br><span class="line">		</span><br><span class="line">		<span class="comment">//interrupt level upper limit setting. Interrupt output</span></span><br><span class="line">		<span class="comment">// and interrupt pixel table are set when value exceeds set value</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inthl</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_LVL_H : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">inthh</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_LVL_H : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//interrupt level lower limit. Interrupt output</span></span><br><span class="line">		<span class="comment">//and interrupt pixel table are set when value is lower than set value</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intll</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_LVL_L : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">intlh</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_LVL_L : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//setting of interrupt hysteresis level when interrupt is generated.</span></span><br><span class="line">		<span class="comment">//should not be higher than interrupt level</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ihysl</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_HYS : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ihysh</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> INT_HYS : <span class="number">4</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//thermistor register</span></span><br><span class="line">		<span class="comment">//SIGNED MAGNITUDE FORMAT</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tthl</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> TEMP : <span class="number">8</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tthh</span> &#123;</span></span><br><span class="line">			<span class="type">uint8_t</span> TEMP : <span class="number">3</span>;</span><br><span class="line">			<span class="type">uint8_t</span> SIGN : <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">//temperature registers 0x80 - 0xFF</span></span><br><span class="line">		<span class="comment">/*</span></span><br><span class="line"><span class="comment">		//read to indicate temperature data per 1 pixel</span></span><br><span class="line"><span class="comment">		//SIGNED MAGNITUDE FORMAT</span></span><br><span class="line"><span class="comment">		struct t01l &#123;</span></span><br><span class="line"><span class="comment">			uint8_t TEMP : 8;</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			uint8_t get()&#123;</span></span><br><span class="line"><span class="comment">				return TEMP;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;;</span></span><br><span class="line"><span class="comment">		struct t01l _t01l;</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		struct t01h &#123;</span></span><br><span class="line"><span class="comment">			uint8_t TEMP : 3;</span></span><br><span class="line"><span class="comment">			uint8_t SIGN : 1;</span></span><br><span class="line"><span class="comment">			</span></span><br><span class="line"><span class="comment">			uint8_t get()&#123;</span></span><br><span class="line"><span class="comment">				return ( (SIGN &lt;&lt; 3) | TEMP) &amp; 0xF;</span></span><br><span class="line"><span class="comment">			&#125;</span></span><br><span class="line"><span class="comment">		&#125;;</span></span><br><span class="line"><span class="comment">		struct t01h _t01h;</span></span><br><span class="line"><span class="comment">		*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">Resize</span><span class="params">(<span class="type">int16_t</span>* pixelsIn, <span class="type">int16_t</span>* pixelsOut, <span class="type">int</span> w, <span class="type">int</span> h, <span class="type">int</span> w2, <span class="type">int</span> h2)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>python 读取串口，并用 cv2 库成像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> serial</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line">serial = serial.Serial(<span class="string">&#x27;COM5&#x27;</span>, <span class="number">115200</span>, timeout=<span class="number">0.5</span>)</span><br><span class="line"><span class="keyword">if</span> serial.isOpen() :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;open success&quot;</span>)</span><br><span class="line"><span class="keyword">else</span> :</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;open failed&quot;</span>)</span><br><span class="line"></span><br><span class="line">_datas = [[<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>], [<span class="number">118.0</span>, <span class="number">119.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">118.0</span>, <span class="number">116.0</span>, <span class="number">117.0</span>, <span class="number">117.0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_limit</span>(<span class="params">num</span>):</span><br><span class="line">    <span class="keyword">if</span> num &gt; <span class="number">255</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">255</span></span><br><span class="line">    <span class="keyword">if</span> num &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>: <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> cv2.waitKey(<span class="number">25</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):  <span class="comment"># 关闭视频</span></span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    sleep(<span class="number">0.002</span>)</span><br><span class="line">    data =serial.readline()     <span class="comment"># 读取一行数据，读到\n为止</span></span><br><span class="line">    <span class="keyword">if</span> data != <span class="string">b&#x27;&#x27;</span> :</span><br><span class="line">        data = data.decode(<span class="string">&quot;unicode_escape&quot;</span>).split(<span class="string">&quot; &quot;</span>)     <span class="comment"># 转码，非常重要</span></span><br><span class="line">        <span class="keyword">if</span> data[<span class="number">0</span>] != <span class="string">&quot;px&quot;</span>:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">                    <span class="comment"># 这里的参数需要调</span></span><br><span class="line">                    _datas[i][j] = my_limit((<span class="built_in">float</span>(data[i * <span class="number">8</span> + j])-<span class="number">10</span>) * <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="built_in">print</span>(<span class="built_in">float</span>(data[i*<span class="number">8</span>+j]))</span><br><span class="line"></span><br><span class="line">            img = np.array(_datas, np.uint8)</span><br><span class="line"></span><br><span class="line">            new_img = cv2.resize(img, (<span class="number">720</span>, <span class="number">720</span>), interpolation=cv2.INTER_LANCZOS4)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># new_img = cv2.cvtColor(new_img, cv2.COLOR_BGR2GRAY)</span></span><br><span class="line">            <span class="comment"># image_np=cv2.cvtColor(image_np,cv2.COLOR_GRAY2BGR)</span></span><br><span class="line"></span><br><span class="line">            new_img = cv2.applyColorMap(new_img, cv2.COLORMAP_JET)</span><br><span class="line"></span><br><span class="line">            cv2.imshow(<span class="string">&quot;INTER_NEAREST&quot;</span>, new_img)</span><br><span class="line">            cv2.waitKey(<span class="number">25</span>)</span><br><span class="line"></span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>模块</tag>
        <tag>amg8833</tag>
      </tags>
  </entry>
  <entry>
    <title>【忆阻器】算法部分</title>
    <url>/2023/work/%E5%BF%86%E9%98%BB%E5%99%A8/%E3%80%90%E5%BF%86%E9%98%BB%E5%99%A8%E3%80%91%E7%AE%97%E6%B3%95%E9%83%A8%E5%88%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="PID用随机搜索算法自动调参"><a href="#PID用随机搜索算法自动调参" class="headerlink" title="PID用随机搜索算法自动调参"></a>PID用随机搜索算法自动调参</h2><p>这里用忆阻器实现的硬件PID，其中的 PD 比例系数由忆阻器实现</p>
<p>即只有一个变量需要被优化，采样新点方法为梯度下降，流程图如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD </span><br><span class="line">%% RL LR</span><br><span class="line">a[qwer] --&gt; b</span><br><span class="line">b&#123;asdf&#125;</span><br><span class="line">a --说明--&gt; c(zxcv)</span><br><span class="line">a .-&gt; b</span><br><span class="line">a --&gt; d</span><br><span class="line">b ==&gt; d((asdf))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>忆阻器</tag>
      </tags>
  </entry>
  <entry>
    <title>chatgpt微信机器人</title>
    <url>/2023/work/%E7%8E%A9%E5%88%AB%E4%BA%BA%E7%9A%84%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/chatgpt%E5%BE%AE%E4%BF%A1%E6%9C%BA%E5%99%A8%E4%BA%BA/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  <a href="http://t.csdn.cn/1LbwC">CSDN写的很详细</a></p>
<ol>
<li><p>可以画画</p>
</li>
<li><p>不是纯chatgpt，不支持上下文记忆</p>
</li>
</ol>
<h2 id="搭建知识"><a href="#搭建知识" class="headerlink" title="搭建知识"></a>搭建知识</h2><p>正好学习一下这方面知识，后续补充</p>
<ol>
<li>（本来用 itchat，后替换成 itchat-uos）<a href="https://github.com/littlecodersh/ItChat">微信机器人</a></li>
<li><a href="https://beta.openai.com/docs/api-reference/introduction">openai 的 api 接口</a></li>
</ol>
<h2 id="搭建效果"><a href="#搭建效果" class="headerlink" title="搭建效果"></a>搭建效果</h2><ol>
<li>电脑运行python程序</li>
<li>手机扫码，电脑登录微信</li>
<li>该微信号在接收到特定信息（包含”@bot”语句，可设定），会自动回复（同时可以自由使用该微信号）</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>chatgpt</tag>
        <tag>python</tag>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>chatgpt您所在的地区无法访问</title>
    <url>/2023/solved/chatgpt%E6%82%A8%E6%89%80%E5%9C%A8%E7%9A%84%E5%9C%B0%E5%8C%BA%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>在地址栏输入（<code>javascript:</code>要手动输入）</p>
<p><code>javascript:window.localStorage.removeItem(Object.keys(window.localStorage).find(i=&gt;i.startsWith(&#39;@@auth0spajs&#39;)))</code></p>
<p>刷新页面</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>chatgpt</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】数码管</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E6%95%B0%E7%A0%81%E7%AE%A1/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="http://t.csdn.cn/KqpwO">这篇写得超级好</a>（但是有个错误：五、代码分析2.代码块PB15和PB13位置写反了，我这里改过来了）</p>
<p>四位数码管，背面有两个芯片。</p>
<p>除了VCC和GND，其余引脚包括 DIO、LCLK、SCLK</p>
<p>控制原理简单，不需要设置I2C，用代码模拟就行了</p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>数码管背面芯片是 74HC595，串行输入——并行输出</p>
<h4 id="操作流程"><a href="#操作流程" class="headerlink" title="操作流程"></a>操作流程</h4><ol>
<li>发送字节到74HC595芯片的移位寄存器中</li>
<li>继续发送数码管位置到移位寄存器中</li>
<li>从移位寄存器转存带存储寄存器</li>
</ol>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/************************</span></span><br><span class="line"><span class="comment">VCC------------&gt;供电</span></span><br><span class="line"><span class="comment">DIO------------&gt;PB13</span></span><br><span class="line"><span class="comment">RCLK------------&gt;PB12  </span></span><br><span class="line"><span class="comment">SCLK------------&gt;PB15  </span></span><br><span class="line"><span class="comment">GND------------&gt;接地</span></span><br><span class="line"><span class="comment">**************************/</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">HC595_GPIO_Configuration</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HC595_Send_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> num, <span class="type">unsigned</span> <span class="type">char</span> show_bit)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">HC595_Send_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span>；</span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> num[] = &#123;<span class="number">0xc0</span>, <span class="number">0xf9</span>, <span class="number">0xa4</span>, <span class="number">0xb0</span>, <span class="number">0x99</span>, <span class="number">0x92</span>, <span class="number">0x82</span>, <span class="number">0xf8</span>, <span class="number">0x80</span>, <span class="number">0x90</span>, <span class="number">0xff</span>, <span class="number">0x00</span>&#125;;</span><br><span class="line"><span class="comment">//创建一个数组，0-9所对应的十六进制数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//串入</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HC595_Send_Byte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> byte)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(byte &amp; <span class="number">0x80</span>)</span><br><span class="line">			GPIO_WriteBit(GPIOB, GPIO_Pin_15, Bit_SET);</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			GPIO_WriteBit(GPIOB, GPIO_Pin_15, Bit_RESET);</span><br><span class="line">		</span><br><span class="line">		GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_RESET);</span><br><span class="line">		Delay_us(<span class="number">10</span>);</span><br><span class="line">		GPIO_WriteBit(GPIOB, GPIO_Pin_13, Bit_SET);</span><br><span class="line">		Delay_us(<span class="number">10</span>);</span><br><span class="line">		</span><br><span class="line">		byte &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//并出</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">HC595_Send_Data</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> num, <span class="type">unsigned</span> <span class="type">char</span> show_bit)</span></span><br><span class="line">&#123;</span><br><span class="line">	HC595_Send_Byte(num);</span><br><span class="line">	HC595_Send_Byte(<span class="number">1</span> &lt;&lt; show_bit);  </span><br><span class="line">	</span><br><span class="line">	GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_RESET);</span><br><span class="line">	Delay_us(<span class="number">10</span>);</span><br><span class="line">	GPIO_WriteBit(GPIOB, GPIO_Pin_12, Bit_SET);</span><br><span class="line">	Delay_us(<span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示四位数字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">display</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> thousand_bit, hundred_bit, ten_bit, single_bit;</span><br><span class="line">	</span><br><span class="line">	thousand_bit = n / <span class="number">1000</span>;</span><br><span class="line">	hundred_bit = (n % <span class="number">1000</span>) / <span class="number">100</span>;</span><br><span class="line">	ten_bit = n % <span class="number">1000</span> % <span class="number">100</span> / <span class="number">10</span>;</span><br><span class="line">	single_bit = n % <span class="number">10</span>;</span><br><span class="line">	</span><br><span class="line">	HC595_Send_Data(num[thousand_bit], <span class="number">3</span>);</span><br><span class="line">	HC595_Send_Data(num[hundred_bit], <span class="number">2</span>);</span><br><span class="line">	HC595_Send_Data(num[ten_bit], <span class="number">1</span>);</span><br><span class="line">	HC595_Send_Data(num[single_bit], <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>数码管</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】超声波测距</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E8%B6%85%E5%A3%B0%E6%B3%A2%E6%B5%8B%E8%B7%9D/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="http://t.csdn.cn/FDbfV">参考CSDN这篇</a></p>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>超声波测距原理都差不多</p>
<h4 id="引脚"><a href="#引脚" class="headerlink" title="引脚"></a>引脚</h4><div class="table-container">
<table>
<thead>
<tr>
<th>VCC</th>
<th>Trig</th>
<th>Echo</th>
<th>GND</th>
</tr>
</thead>
<tbody>
<tr>
<td>一般5V</td>
<td>接收信号，触发开始</td>
<td>返回信号，用于计算距离</td>
</tr>
</tbody>
</table>
</div>
<h4 id="顺序"><a href="#顺序" class="headerlink" title="顺序"></a>顺序</h4><p><img src="https://s1.xptou.com/2023/01/19/63c9086ac5402.png" alt="在这里插入图片描述"></p>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>被测物体的面积不少于0.5平方米且平面尽量要求平整</p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><ol>
<li>在 cubemx 中设置 trig 为 output GPIO，设置 echo 为 input GPIO</li>
<li>开启 TIM 时钟，两参数分别为 72-1 和 65535，用于精确计时</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> CSB_Trig_GPIO_Port 	GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CSB_Trig_Pin 		GPIO_PIN_5</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CSB_Echo_GPIO_Port	GPIOB</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> CSB_Echo_Pin		GPIO_PIN_6</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用TIM1来做us级延时函数,此函数为1us</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">TIM1_Delay_us</span><span class="params">(<span class="type">uint16_t</span> n_us)</span></span><br><span class="line">&#123;</span><br><span class="line">	__HAL_TIM_SetCounter(&amp;htim1, <span class="number">0</span>);<span class="comment">//htim1</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">/* 开启定时器1计数 */</span></span><br><span class="line">	__HAL_TIM_ENABLE(&amp;htim1);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//获取定时器的计数值！！！再判断计数值，但是计数值不得大于定时器配置的重装载值。\</span></span><br><span class="line"><span class="comment">	假如：定时器设定的重装载值为65536-1， 比较值需小于重装载值，即(计数1次 * n_us)-1) 小于（65536-1）\</span></span><br><span class="line"><span class="comment">																	  即传进来的参数n_us需要小于65536-1；	</span></span><br><span class="line">	<span class="keyword">while</span>(__HAL_TIM_GetCounter(&amp;htim1) &lt; ((<span class="number">1</span> * n_us)<span class="number">-1</span>) );</span><br><span class="line">	<span class="comment">/* Disable the Peripheral */</span></span><br><span class="line">	__HAL_TIM_DISABLE(&amp;htim1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取超声波模块的检测距离</span></span><br><span class="line"><span class="type">float</span> <span class="title function_">csb_get_distance</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">float</span> CSB_value = <span class="number">0</span> ;</span><br><span class="line">	<span class="comment">//给发射引脚一个高电平</span></span><br><span class="line">	HAL_GPIO_WritePin(CSB_Trig_GPIO_Port, CSB_Trig_Pin 		, GPIO_PIN_SET);</span><br><span class="line">	<span class="comment">//延时10us以上</span></span><br><span class="line">	TIM1_Delay_us(<span class="number">20</span>);</span><br><span class="line">	<span class="comment">//给发射引脚一个低电平</span></span><br><span class="line">	HAL_GPIO_WritePin(CSB_Trig_GPIO_Port, CSB_Trig_Pin, GPIO_PIN_RESET);</span><br><span class="line">	<span class="comment">//等待接收引脚变成高电平</span></span><br><span class="line">	<span class="keyword">while</span>( HAL_GPIO_ReadPin(CSB_Echo_GPIO_Port,CSB_Echo_Pin) == <span class="number">0</span>);</span><br><span class="line">	<span class="comment">//设置定时器初始值为0</span></span><br><span class="line">	__HAL_TIM_SetCounter(&amp;htim1, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">//开始计时</span></span><br><span class="line">	__HAL_TIM_ENABLE(&amp;htim1);</span><br><span class="line">	<span class="comment">//接收完全后不再为高电平，即当接收引脚变成低电平后，停止计时，获取计数时间</span></span><br><span class="line">    <span class="keyword">while</span>( HAL_GPIO_ReadPin(CSB_Echo_GPIO_Port,CSB_Echo_Pin) == <span class="number">1</span>);  </span><br><span class="line">	<span class="comment">//获取定时器的计数值,赋值操作  a = b;</span></span><br><span class="line">	CSB_value = __HAL_TIM_GetCounter(&amp;htim1);</span><br><span class="line">	<span class="comment">//停止计时</span></span><br><span class="line">	__HAL_TIM_DISABLE(&amp;htim1);</span><br><span class="line">	<span class="comment">//已知高电平总时间，即可利用公式（ 测试距离= (高电平时间*声速(340M/S))/2 ），计算超声波模块距离障碍物的单程距离；</span></span><br><span class="line">	<span class="comment">//如果需要返回 毫米级别距离,公式为（ 测试距离= (高电平时间*声速(340M/1000mS))/2 ）</span></span><br><span class="line">	<span class="keyword">return</span> ( CSB_value*<span class="number">340</span>/<span class="number">1000</span>/<span class="number">2</span>);	<span class="comment">//*340/1000/2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>测距</tag>
        <tag>超声波</tag>
      </tags>
  </entry>
  <entry>
    <title>【嵌入式积累】控制入门</title>
    <url>/2023/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A7%AF%E7%B4%AF/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF%E3%80%91%E6%8E%A7%E5%88%B6%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>包括控制电机舵机</p>
<h2 id="电机"><a href="#电机" class="headerlink" title="电机"></a>电机</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>嵌入式积累</tag>
        <tag>控制</tag>
      </tags>
  </entry>
  <entry>
    <title>【win32gui】控制win系统</title>
    <url>/2022/library/python/%E3%80%90win32gui%E3%80%91%E6%8E%A7%E5%88%B6win%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h4 id="将窗口嵌到win下方任务栏"><a href="#将窗口嵌到win下方任务栏" class="headerlink" title="将窗口嵌到win下方任务栏"></a>将窗口嵌到win下方任务栏</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32gui</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m_hTaskbar = win32gui.FindWindow(<span class="string">&quot;Shell_TrayWnd&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">m_hBar = win32gui.FindWindowEx(m_hTaskbar, <span class="number">0</span>, <span class="string">&quot;ReBarWindow32&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">m_hMin = win32gui.FindWindowEx(m_hBar, <span class="number">0</span>, <span class="string">&quot;MSTaskSwWClass&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">b = win32gui.GetWindowRect(m_hBar)  <span class="comment"># 获取m_hBar窗口尺寸b为[左，上，右，下]的数组</span></span><br><span class="line">win32gui.MoveWindow(m_hMin, <span class="number">0</span>, <span class="number">0</span>, b[<span class="number">2</span>] - b[<span class="number">0</span>] - <span class="number">200</span>, b[<span class="number">3</span>] - b[<span class="number">1</span>], <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">self.setGeometry(b[<span class="number">2</span>] - b[<span class="number">0</span>] - <span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, b[<span class="number">3</span>] - b[<span class="number">1</span>])</span><br><span class="line">win32gui.SetParent(<span class="built_in">int</span>(ui.winId()), m_hBar)  <span class="comment"># 设置任务栏为此窗口的父窗口</span></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>win32gui</tag>
      </tags>
  </entry>
  <entry>
    <title>设置软件开机自启动</title>
    <url>/2022/solved/%E8%AE%BE%E7%BD%AE%E8%BD%AF%E4%BB%B6%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>打开 <code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\StartUp</code> ，把软件或快捷方式放进去</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
      </tags>
  </entry>
  <entry>
    <title>【psutil】检测电脑网速等</title>
    <url>/2022/library/python/%E3%80%90psutil%E3%80%91%E6%A3%80%E6%B5%8B%E7%94%B5%E8%84%91%E7%BD%91%E9%80%9F%E7%AD%89/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote>
<p>打算做一个能嵌入到win底栏的显示网速的，<a href="https://blog.csdn.net/weixin_44446598/article/details/115031335">CSDN这篇</a>，看到这篇心痒痒</p>
</blockquote>
<p><a href="https://pypi.org/project/psutil/">官方文档</a></p>
<p>获取系统运行的进程和系统利用率</p>
<p>包括CPU、内存、磁盘、网络等的信息</p>
<p>最靠谱</p>
<h4 id="获取网速"><a href="#获取网速" class="headerlink" title="获取网速"></a>获取网速</h4><p><code>psutil.net_io_counter([pernic])</code>，当pernic为True时，则分开列出所有网卡的统计信息。否则数据均所有网卡为总和。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s1 = psutil.net_io_counters()</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">s2 = psutil.net_io_counters()</span><br><span class="line"></span><br><span class="line">result1 = s2.bytes_sent - s1.bytes_sent  <span class="comment"># 上传</span></span><br><span class="line">result2 = s2.bytes_recv - s1.bytes_recv  <span class="comment"># 下载</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 算出一秒的插值</span></span><br><span class="line">a = <span class="string">&#x27;↑&#x27;</span> + <span class="built_in">str</span>(<span class="string">&#x27;%.1f&#x27;</span> % (result1 / <span class="number">1024</span>)) + <span class="string">&#x27; kb/s&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;↓&#x27;</span> + <span class="built_in">str</span>(<span class="string">&#x27;%.1f&#x27;</span> % (result2 / <span class="number">1024</span>)) + <span class="string">&#x27; kb/s&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="获取cpu信息"><a href="#获取cpu信息" class="headerlink" title="获取cpu信息"></a>获取cpu信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">cpu_percent = psutil.cpu_percent(interval=<span class="number">0.0</span>, percpu=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<h4 id="获取内存占用量"><a href="#获取内存占用量" class="headerlink" title="获取内存占用量"></a>获取内存占用量</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mem_percent = psutil.virtual_memory().percent</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>psutil</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】OLED</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91OLED/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>oled有 i2c 或 spi 通信的，若为 spi 使用 Transmit only Master 模式</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>引脚</th>
<th>USER LABLE</th>
</tr>
</thead>
<tbody>
<tr>
<td>DO</td>
<td>SPI_SCK</td>
</tr>
<tr>
<td>D1</td>
<td>SPI_MOSI</td>
</tr>
<tr>
<td>RES</td>
<td>OLED_RES</td>
</tr>
<tr>
<td>DC</td>
<td>OLED_DC</td>
</tr>
<tr>
<td>CS</td>
<td>OLED_CS</td>
</tr>
</tbody>
</table>
</div>
<p>设置对应USER LABLE即可直接使用库</p>
<ul>
<li>初始化</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">OLED_Init();</span><br><span class="line">OLED_ColorTurn (<span class="number">0</span>);<span class="comment">//0正常显示，1 反色显示</span></span><br><span class="line">OLED_DisplayTurn(<span class="number">0</span>);<span class="comment">//0正常显示 1 屏幕翻转显示</span></span><br><span class="line">OLED_Refresh();</span><br></pre></td></tr></table></figure>
<blockquote>
<p>每次绘制后，需要 refresh 一下</p>
</blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>OLED</tag>
      </tags>
  </entry>
  <entry>
    <title>【嵌入式积累】阅读寄存器手册</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A7%AF%E7%B4%AF/%E3%80%90%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%A7%AF%E7%B4%AF%E3%80%91%E9%98%85%E8%AF%BB%E5%AF%84%E5%AD%98%E5%99%A8%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote>
<p>为了移植mpu6050程序到mpu6500上，总算是亲身对照寄存器看了。不过头等大事——寄存器操作都需要做什么，还是没搞懂</p>
</blockquote>
<h4 id="陀螺仪寄存器库操作"><a href="#陀螺仪寄存器库操作" class="headerlink" title="陀螺仪寄存器库操作"></a>陀螺仪寄存器库操作</h4><ol>
<li><p>初始化</p>
<p>| WHO_AM_I       | PWR_MGMT_1   | SMPLRT_DIV               | ACCEL_CONFIG，GYRO_CONFIG    |<br>| ——————— | —————— | ———————————— | —————————————— |<br>| 获取device  ID | 重置一切设置 | 设置分频系数，即采样频率 | 设置加速度和角度的采样上下限 |</p>
</li>
<li><p>读取数据</p>
<p>| ACCEL_XOUT_H | GYRO_XOUT_H | TEMP_OUT_H |<br>| —————— | —————- | ————— |<br>| 加速度       | 角度        | 温度       |</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>嵌入式积累</tag>
      </tags>
  </entry>
  <entry>
    <title>【模块】陀螺仪</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E6%A8%A1%E5%9D%97/%E3%80%90%E6%A8%A1%E5%9D%97%E3%80%91%E9%99%80%E8%9E%BA%E4%BB%AA/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>白嫖到三种模块，其实很相似：mpu6050、mpu6500、gy25</p>
<h2 id="mpu6050"><a href="#mpu6050" class="headerlink" title="mpu6050"></a>mpu6050</h2><p>i2c通信</p>
<p>测量三轴加速度，三轴角度，温度</p>
<p>详见【HAL库】i2c通信（mpu6050）</p>
<h2 id="mpu6500"><a href="#mpu6500" class="headerlink" title="mpu6500"></a>mpu6500</h2><p>支持 i2c 和 spi 通信，通信速度比 mpu6050 慢8倍</p>
<p>其他同 mpu6050</p>
<p>mpu6050 的例程可以通用</p>
<h2 id="gy25"><a href="#gy25" class="headerlink" title="gy25"></a>gy25</h2><p><img src="https://s1.xptou.com/2023/01/19/63c9086eef668.png" alt="image-20221229234554414"></p>
<p>支持 i2c 或 串口 通信</p>
<h4 id="串口传输数据格式"><a href="#串口传输数据格式" class="headerlink" title="串口传输数据格式"></a>串口传输数据格式</h4><div class="table-container">
<table>
<thead>
<tr>
<th>[0]</th>
<th>[1:6]</th>
<th>[7]</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xAA</td>
<td></td>
<td>0x55</td>
</tr>
<tr>
<td>帧头</td>
<td>每两位为一个数据，依次是航向、俯仰、翻滚</td>
<td>帧尾</td>
</tr>
</tbody>
</table>
</div>
<h4 id="发送命令"><a href="#发送命令" class="headerlink" title="发送命令"></a>发送命令</h4><div class="table-container">
<table>
<thead>
<tr>
<th>命令</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>0xA5+0x51</td>
<td>查询模式，直接返回角度值，需每次读取都发送</td>
</tr>
<tr>
<td>0xA5+0x52</td>
<td>自动模式，直接返回角度值，只需要初始化时发一次</td>
</tr>
<tr>
<td>0xA5+0x53</td>
<td>自动模式，ASCII 码输出，便于直接电脑串口助手查看</td>
</tr>
<tr>
<td>0xA5+0x54</td>
<td>校正模式，校正俯仰横滚角0 度，需要保持水平时候发送</td>
</tr>
<tr>
<td>0xA5+0x55</td>
<td>校正模式，校正航向0 度，航向任意角度清零</td>
</tr>
</tbody>
</table>
</div>
<p>不知怎的，没搞懂我的串口调试助手发送16进制</p>
<p>若用 i2c 通信模式，也可以直接用 mpu6050 的库</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>模块</tag>
        <tag>陀螺仪</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】i2c通信（mpu6050）</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91i2c%E9%80%9A%E4%BF%A1%EF%BC%88mpu6050%EF%BC%89/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="i2c"><a href="#i2c" class="headerlink" title="i2c"></a>i2c</h2><p>一种通信方式</p>
<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><p>未知，用两根线，SDA，SCK</p>
<h4 id="HAL库常用代码"><a href="#HAL库常用代码" class="headerlink" title="HAL库常用代码"></a>HAL库常用代码</h4><ol>
<li><p>读写</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WHO_AM_I_REG 0x75</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWR_MGMT_1_REG 0x6B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MPU6050_ADDR 0xD0</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> i2c_timeout = <span class="number">100</span>;</span><br><span class="line"><span class="type">uint8_t</span> check;</span><br><span class="line"><span class="type">uint8_t</span> data;</span><br><span class="line"><span class="comment">// i2c | 设备地址 | 寄存器地址 | 寄存器长度 | 数据起始地址 | 数据长度 | 超时时间</span></span><br><span class="line">HAL_I2C_Mem_Read(&amp;hi2c1, MPU6050_ADDR, WHO_AM_I_REG, <span class="number">1</span>, &amp;check, <span class="number">1</span>, i2c_timeout);</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, <span class="number">1</span>, &amp;Data, <span class="number">1</span>, i2c_timeout);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>​        若修改来自非库函数的源代码，也就是把他们的 I2C 读写换成这个函数，以及删掉无用初始化</p>
<ol>
<li><p>查找当前 I2C 设备地址</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">uint8_t</span> i=<span class="number">0</span>;i&lt;<span class="number">255</span>;i++)</span><br><span class="line">	<span class="keyword">if</span>(HAL_I2C_IsDeviceReady(&amp;hi2c1, i, <span class="number">1</span>, <span class="number">1000</span>)==HAL_OK)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\r\n&quot;</span>, i);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;wait&quot;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="mpu6050"><a href="#mpu6050" class="headerlink" title="mpu6050"></a>mpu6050</h2><p>陀螺仪+加速度计+温度计</p>
<p>i2c通信速度高达400KHz</p>
<p>自带FIFO（不清楚）</p>
<h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>​    接线时只需要接两根数据线和 vcc，gnd 共四根线即可。</p>
<ol>
<li><p>定义一个结构体用于接收</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MPU6050_t mpu6050data;</span><br></pre></td></tr></table></figure>
</li>
<li><p>初始化 </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(MPU6050_Init(&amp;hi2c1)==<span class="number">1</span>);</span><br><span class="line"><span class="comment">// 等待几秒</span></span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;****** MPU6050 Test 3s ******\r\n&quot;</span>);</span><br><span class="line">HAL_Delay (<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;****** MPU6050 Test 2s ******\r\n&quot;</span>);</span><br><span class="line">HAL_Delay (<span class="number">1000</span>);</span><br><span class="line"><span class="built_in">printf</span> (<span class="string">&quot;****** MPU6050 Test 1s ******\r\n&quot;</span>);</span><br><span class="line">HAL_Delay (<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>读取</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">MPU6050_Read_Accel(&amp;hi2c1,&amp;mpu6050data);</span><br><span class="line">MPU6050_Read_Gyro(&amp;hi2c1,&amp;mpu6050data);</span><br><span class="line">MPU6050_Read_Temp(&amp;hi2c1,&amp;mpu6050data);</span><br></pre></td></tr></table></figure>
<h4 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h4></li>
</ol>
<p>芯片内置 dmp，直接可以帮你滤波，甚至识别运动。</p>
<p>模块封装都会引出很多引脚，平时只用4个</p>
<p>XDA，XCL是考虑到使用芯片内置 dmp 计算时，可以用9轴（加上磁场传感器），其中磁场传感器的外界接口就是这俩，用 i2c通信。（很少用）</p>
<p>AD0 设置 i2c 通信地址，接VCC时为 0x69，否则 0x68（一般悬空）</p>
<p>INT 中断输出引脚（不知道咋用）</p>
<h4 id="阅读寄存器手册"><a href="#阅读寄存器手册" class="headerlink" title="阅读寄存器手册"></a>阅读寄存器手册</h4><ol>
<li><p>i2c 通信HAL库直接指令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> WHO_AM_I_REG 0x75</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PWR_MGMT_1_REG 0x6B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MPU6050_ADDR 0xD0</span></span><br><span class="line"><span class="type">const</span> <span class="type">uint16_t</span> i2c_timeout = <span class="number">100</span>;</span><br><span class="line"><span class="type">uint8_t</span> check;</span><br><span class="line"><span class="type">uint8_t</span> data;</span><br><span class="line"><span class="comment">// i2c | 设备地址 | 寄存器地址 | 寄存器长度 | 数据起始地址 | 数据长度 | 超时时间</span></span><br><span class="line">HAL_I2C_Mem_Read(&amp;hi2c1, MPU6050_ADDR, WHO_AM_I_REG, <span class="number">1</span>, &amp;check, <span class="number">1</span>, i2c_timeout);</span><br><span class="line">HAL_I2C_Mem_Write(&amp;hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, <span class="number">1</span>, &amp;Data, <span class="number">1</span>, i2c_timeout);</span><br></pre></td></tr></table></figure>
</li>
<li><p>陀螺仪寄存器库操作</p>
<ol>
<li><p>初始化</p>
<p>| WHO_AM_I       | PWR_MGMT_1   | SMPLRT_DIV               | ACCEL_CONFIG，GYRO_CONFIG    |<br>| ——————— | —————— | ———————————— | —————————————— |<br>| 获取device  ID | 重置一切设置 | 设置分频系数，即采样频率 | 设置加速度和角度的采样上下限 |</p>
</li>
<li><p>读取数据</p>
<p>| ACCEL_XOUT_H | GYRO_XOUT_H | TEMP_OUT_H |<br>| —————— | —————- | ————— |<br>| 加速度       | 角度        | 温度       |</p>
</li>
</ol>
</li>
<li><p>数据处理</p>
<p>卡尔曼滤波：把测量数据（当前角度）和预测数据（上次角度+当前加速度*时间间隔）加权求和（系数和唯一）</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>i2c</tag>
        <tag>通信</tag>
      </tags>
  </entry>
  <entry>
    <title>免费下载视频</title>
    <url>/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E5%85%8D%E8%B4%B9%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">尝试了很多方案，包括 m3u8，you-get，网页插件，最推荐 m3u8</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="you-get"><a href="#you-get" class="headerlink" title="you-get"></a>you-get</h2><p>​    是python的一个库，可以在cmd中运行，运行命令为 <code>you-get [url]</code></p>
<p>​    测试能成功下载 bilibili 和 youtube 的视频，但是下载 pornhub 失败</p>
<h2 id="m3u8"><a href="#m3u8" class="headerlink" title="m3u8"></a>m3u8</h2><p>​    m3u8 是一种视频格式，专门在网页上加载视频的。</p>
<h4 id="获取m3u8"><a href="#获取m3u8" class="headerlink" title="获取m3u8"></a>获取m3u8</h4><ol>
<li><p><a href="https://www.parsevideo.com">获取视频m3u8</a></p>
</li>
<li><p>刷新界面，<code>开发人员工具-&gt;网络</code> 中加载的找到此格式的请求（master开头的是主要的，其他的可能是动图或预览），复制其请求头连接，用 m3u8下载器 下载</p>
</li>
</ol>
<h4 id="由m3u8下载视频"><a href="#由m3u8下载视频" class="headerlink" title="由m3u8下载视频"></a>由m3u8下载视频</h4><p>用软件</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>下载视频</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】spi通信（nrf24l01）</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91spi%E9%80%9A%E4%BF%A1%EF%BC%88nrf24l01%EF%BC%89/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="spi通信"><a href="#spi通信" class="headerlink" title="spi通信"></a>spi通信</h2><p>主要三根线：MISO，MOSI，SCK</p>
<p>此外还有片选线</p>
<ul>
<li>双工通信：两根线，MISO，MOSI，分别负责发送和接收</li>
<li>同步通信：一根时钟线，SCK</li>
</ul>
<h2 id="nrf24l01"><a href="#nrf24l01" class="headerlink" title="nrf24l01"></a>nrf24l01</h2><p>很通用的，航模遥控器、鼠标、耳机、音响等都有应用</p>
<p>最便宜的几块钱，传输距离50m；加功率增益的，加天线的，20几块，传输距离能到1000m</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c915767912c.png" alt="nrf24l01 youtube pin 的图像结果"></p>
<h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><ul>
<li>2.4G（与蓝牙，wifi，5g等无线传输技术并列）</li>
<li>传输速度 10mbps（即Mb per second，1Mbps=0.125MB/s，因为数据传输多用bit单位，数据存储多用byte单位，1 Byte = 8 bit；即网速和你下载速度不是一个单位）</li>
<li>通信距离：50-1000m，这个取决于电路的设计，nrf24l01只是芯片</li>
</ul>
<h4 id="库使用方法"><a href="#库使用方法" class="headerlink" title="库使用方法"></a>库使用方法</h4><ol>
<li>设置接收或发送模式 <code>NRF24L01_RX_Mode();</code> 或 <code>NRF24L01_TX_Mode();</code></li>
<li>收发数据可以先定义一个 uint8_t 类型的数组，然后用 <code>NRF24L01_RxPacket(rxdata)</code> 或 <code>NRF24L01_TxPacket(txdata)</code> ，返回值为 0 表示成功；也可以用更底层的发送字节或发送位。</li>
</ol>
<ul>
<li>检查是否可用 <code>while(NRF24L01_Check());</code> 不可用卡死</li>
</ul>
<blockquote>
<p>注意要打开DMA，不然不行</p>
<p>不知道定义接收或发送模式是啥意思</p>
<p>不知道咋配对</p>
<p>不知道咋跟遥控器对码</p>
</blockquote>
<h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><p>这是我第一次用别人写的代码库，感触良多。</p>
<p>​    首先我看的哔哩哔哩看了一个教程讲的很详细，他用的库是在正点原子讲解 nrf24l01 基础上改写的，还保留有多余的函数和正点原子的注释。而且他讲了半天寄存器也没说怎么用这个库。我直接搜索这个模块，甚至在正点原子的用户名下，都搜索不到。所以还是干货难找呀！还得是系统教程教的好，自媒体分享的不行，我直接查CSDN的资料，多数还都是直接复制数据手册呀，而且残缺不全，英语翻译蹩脚。</p>
<p>​    然后正点原子的代码也得改，还是不咋会啊，自己照着数据手册写寄存器也不咋会。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>stm</tag>
        <tag>spi通信</tag>
        <tag>nrf24l01</tag>
      </tags>
  </entry>
  <entry>
    <title>modelsim的-novopt优化相关报错</title>
    <url>/2022/solved/modelsim%E7%9A%84-novopt%E4%BC%98%E5%8C%96%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>找到 <code>modelsim.ini</code> 将 <code>VoptFlow</code> 参数修改为<code>1</code>，重新打开项目</p>
<p><a href="http://t.csdn.cn/LOkwM">http://t.csdn.cn/LOkwM</a></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>FPGA</tag>
        <tag>modelsim</tag>
      </tags>
  </entry>
  <entry>
    <title>【FPGA】仿真和烧录</title>
    <url>/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90FPGA%E3%80%91%E4%BB%BF%E7%9C%9F%E5%92%8C%E7%83%A7%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>vivado 可以仿真和烧录，但是体积有 100G 大。</p>
<p>可以用 modelsim + 国产软件 TD 代替，分别负责仿真和烧录</p>
<h2 id="modelsim-仿真"><a href="#modelsim-仿真" class="headerlink" title="modelsim 仿真"></a>modelsim 仿真</h2><p><a href="https://www.bilibili.com/video/BV1nd4y1e7k6">参见视频教程</a></p>
<ol>
<li>编写 .v 和 .vt 文件，其中 .vt 文件包含仿真参数</li>
<li>添加对应文件，编译，运行仿真</li>
</ol>
<h4 id="vt-文件编写"><a href="#vt-文件编写" class="headerlink" title=".vt 文件编写"></a>.vt 文件编写</h4><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 结构说明</span></span><br><span class="line"></span><br><span class="line"><span class="meta">`<span class="keyword">timescale</span> 1 ps/ 1 ps		</span><span class="comment">//设定仿真步长</span></span><br><span class="line"><span class="keyword">module</span> first_vt();			<span class="comment">// module后面接文件名，比如此文件名为first_vt.vt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">reg</span> clk;					<span class="comment">// .v文件里input对应reg</span></span><br><span class="line"><span class="keyword">reg</span> rst;                                   </span><br><span class="line"><span class="keyword">wire</span> clkout;				<span class="comment">// .v文件里output对应wir</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首先是.v文件名；后面i1不要改，是变量总名字；下面格式都那样</span></span><br><span class="line">first i1 (</span><br><span class="line">	<span class="variable">.clk</span>(clk),</span><br><span class="line">	<span class="variable">.clkout</span>(clkout),</span><br><span class="line">	<span class="variable">.rst</span>(rst)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化变量值</span></span><br><span class="line"><span class="keyword">initial</span>                                                </span><br><span class="line"><span class="keyword">begin</span>                                                  </span><br><span class="line">    rst=<span class="number">1</span>;				<span class="comment">//模拟复位信号按下</span></span><br><span class="line">	#<span class="number">20</span> rst=<span class="number">0</span>;			<span class="comment">//#20 = 延迟50ns后按键松开</span></span><br><span class="line">	#<span class="number">20</span> rst=<span class="number">1</span>;</span><br><span class="line">	#<span class="number">8000</span> <span class="built_in">$stop</span>;        <span class="comment">// 终止仿真                     </span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置时钟类型的</span></span><br><span class="line"><span class="keyword">always</span>                                                                </span><br><span class="line"><span class="keyword">begin</span>                                                  </span><br><span class="line">    #<span class="number">50</span> clk=<span class="number">1</span>; 			<span class="comment">//生成时钟信号，#50 = 延迟50ns</span></span><br><span class="line">	#<span class="number">50</span> clk=<span class="number">0</span>;                                     </span><br><span class="line"><span class="keyword">end</span>                                                    </span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="仿真操作"><a href="#仿真操作" class="headerlink" title="仿真操作"></a>仿真操作</h4><ul>
<li><p>新建项目： <code>file-&gt;new-&gt;project</code></p>
</li>
<li><p>新建或导入 <code>.v</code> 和 <code>.vt</code> 文件</p>
</li>
<li><p>编译：<code>在project栏右键文件-&gt;compile-&gt;compile all</code></p>
<p>编译后，两文件身上有绿色对号，可以在 <code>library</code> 栏看到新出现了 <code>work</code>，点开有刚编译文件</p>
</li>
<li><p>仿真：<code>在libary栏右键.vt文件-&gt;simulate</code></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c915a05d0f8.png" alt="image-20221226224343718"></p>
</li>
</ul>
<blockquote>
<p>注意：.v 和 .vt 文件名不可一样</p>
</blockquote>
<h2 id="vivado烧录"><a href="#vivado烧录" class="headerlink" title="vivado烧录"></a>vivado烧录</h2><ol>
<li>写好 .v 文件</li>
<li>配置引脚<code>Layout-&gt;I/O Planning</code></li>
<li>生成原理图 <code>左侧Run Synthesis</code></li>
<li><p>生成电路图 <code>左侧Run Implementation</code></p>
</li>
<li><p>生成<code>.bit</code>文件 <code>Generate Bitstream</code></p>
</li>
<li><p>烧录</p>
<p>插上板子，连接 <code>左侧与Generate Bitstream下面的Open Hardware Manager-&gt;open target-&gt;auto connect</code></p>
<p>选中 <code>.bit</code> 文件 <code>Open Hardware Manager-&gt;Program Device</code>（文件位置一般为 <code>project/xxx.runs/impl/xxx.bit</code>）点击 <code>program</code></p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>FPGA</tag>
        <tag>library</tag>
        <tag>课内知识</tag>
      </tags>
  </entry>
  <entry>
    <title>【pyinstaller】打包python为exe</title>
    <url>/2022/library/python/%E3%80%90pyinstaller%E3%80%91%E6%89%93%E5%8C%85python%E4%B8%BAexe/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>比 nuitka 语法简单，方便导入第三方库，速度也不算慢，亲测2min以内</p>
<p><a href="https://pyinstaller.org/en/stable/usage.html#options">官网</a></p>
<h2 id="打包语法"><a href="#打包语法" class="headerlink" title="打包语法"></a>打包语法</h2><p>在 cmd 中运行</p>
<p><code>pyinstaller -F -w main.py</code></p>
<ul>
<li><code>-F</code>：输出单个exe文件，否则还有一堆 <code>.dll</code> 啥的，必须一起运行才行</li>
<li><code>-w</code>：取消伴随打开的cmd窗口</li>
<li><code>-i [ico图片路径]</code>：打包图标，<a href="https://www.aigei.com/design/">图标素材网站</a></li>
</ul>
<p>运行后会生成一个 <code>.spec</code> 文件，以及 <code>build</code>和 <code>dist</code> 文件夹</p>
<h2 id="添加第三方库"><a href="#添加第三方库" class="headerlink" title="添加第三方库"></a>添加第三方库</h2><p>多数第三方库能运行就能添加</p>
<p>若存在库没被识别到，可以在 <code>.spec</code> 文件里的 <code>hiddenimport</code> 添加第三方库名字</p>
<p>重新打包，运行<code>pyinstaller xxx.spec</code></p>
<p>打包 <code>pybluez</code> 库时，发生奇怪报错，始终未能解决</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c90857163b6.png" alt="image-20221225122613186"></p>
<h2 id="打包多个-py-文件"><a href="#打包多个-py-文件" class="headerlink" title="打包多个 .py 文件"></a>打包多个 <code>.py</code> 文件</h2><p>在 <code>.spec</code> 文件里的 <code>pathex</code> 添加所有文件路径</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>打包</tag>
        <tag>pyinstaller</tag>
      </tags>
  </entry>
  <entry>
    <title>【nuitka】打包python为exe</title>
    <url>/2022/library/python/%E3%80%90nuitka%E3%80%91%E6%89%93%E5%8C%85python%E4%B8%BAexe/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>与 pyinstaller 不同，不能打包出单个exe文件，必须要在 .dll 等文件环境中运行</p>
<p><a href="https://pypi.org/project/Nuitka/">官网</a></p>
<p>知乎一大堆长篇大论，相互引用，云里雾里</p>
<h2 id="打包语法"><a href="#打包语法" class="headerlink" title="打包语法"></a>打包语法</h2><p><code>nuitka --standalone --show-memory --show-progress --plugin-enable=pyqt5 --output-dir=out --windows-icon-from-ico=bitbug_favicon.ico mark.py</code></p>
<ul>
<li><code>standalone</code>：生成独立exe</li>
<li><code>--plugin-enable=pyqt5</code>：导入pyqt5</li>
</ul>
<p>好像有其他第三方库，也会自动导入</p>
<h2 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h2><p>暂时不会</p>
<h2 id="添加第三方库"><a href="#添加第三方库" class="headerlink" title="添加第三方库"></a>添加第三方库</h2><p>若有未自动导入的，可以观察运行报错，从环境中复制文件，手动添加</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>nuitka</tag>
        <tag>打包</tag>
      </tags>
  </entry>
  <entry>
    <title>【pyqt】编写可视化界面</title>
    <url>/2022/library/python/%E3%80%90pyqt%E3%80%91%E7%BC%96%E5%86%99%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">python 库 pyqt，方便地设计 GUI</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><a href="https://doc.qt.io/">QT官网</a>，里面找到python的，我还不是很会看官方文档</p>
<h1 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h1><h2 id="核心思路"><a href="#核心思路" class="headerlink" title="核心思路"></a>核心思路</h2><p>之前用过 pygame，再用 pyqt 感觉编程思路有很大不同</p>
<ol>
<li><p>页面所有内容在一个 class 里，每项功能都要向上继承，进行修改</p>
</li>
<li><p>运行页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="入门示例"><a href="#入门示例" class="headerlink" title="入门示例"></a>入门示例</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Demo</span>(<span class="title class_ inherited__">QtWidgets</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Demo, self).__init__(parent)</span><br><span class="line">        self.setWindowTitle(<span class="string">&quot;first&quot;</span>)</span><br><span class="line">        self.resize(<span class="number">1600</span>, <span class="number">1400</span>)      <span class="comment"># 设置窗口大小</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QApplication(sys.argv)</span><br><span class="line">    demo = Demo()</span><br><span class="line">    demo.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="外观样式"><a href="#外观样式" class="headerlink" title="外观样式"></a>外观样式</h2><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置：窗口无边框、窗口置顶、指定窗口类型为工具</span></span><br><span class="line">self.setWindowFlags(Qt.FramelessWindowHint | Qt.WindowStaysOnTopHint | Qt.Tool)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置窗口背景透明</span></span><br><span class="line">self.setAttribute(Qt.WA_TranslucentBackground)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置透明度(0~1)</span></span><br><span class="line">self.setWindowOpacity(<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置鼠标为手状</span></span><br><span class="line">self.setCursor(Qt.PointingHandCursor)</span><br></pre></td></tr></table></figure>
<p>WindowFlags给窗口添加指定功能或属性</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Qt::CustomizeWindowHint          //关闭默认窗口标题提示 </span><br><span class="line">Qt::WindowTitleHint              //为窗口修饰一个标题栏</span><br><span class="line">Qt::WindowSystemMenuHint         //为窗口修饰一个窗口菜单系统</span><br><span class="line">Qt::WindowMinimizeButtonHint     //为窗口添加最小化按钮</span><br><span class="line">Qt::WindowMaximizeButtonHint     //为窗口添加最大化按钮</span><br><span class="line">Qt::WindowMinMaxButtonsHint      //为窗口添加最大化和最小化按钮</span><br><span class="line">Qt::WindowCloseButtonHint           //窗口只有一个关闭按钮</span><br><span class="line">Qt::WindowContextHelpButtonHint</span><br><span class="line">Qt::MacWindowToolBarButtonHint</span><br><span class="line">Qt::WindowFullscreenButtonHint</span><br><span class="line">Qt::BypassGraphicsProxyWidget</span><br><span class="line">Qt::WindowShadeButtonHint</span><br><span class="line">Qt::WindowStaysOnTopHint    //总在最上面的窗口,置前</span><br><span class="line">Qt::WindowStaysOnBottomHint</span><br><span class="line">Qt::WindowOkButtonHint</span><br><span class="line">Qt::WindowCancelButtonHint</span><br><span class="line">Qt::WindowTransparentForInput</span><br></pre></td></tr></table></figure>
<p>多个之间用 <code>|</code> 连接</p>
<h4 id="形状位置修改"><a href="#形状位置修改" class="headerlink" title="形状位置修改"></a>形状位置修改</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># (x,y)零点为左上角，方向为x右y下</span></span><br><span class="line">self.resize(w,h)		<span class="comment"># 设置大小</span></span><br><span class="line">self.move(x,y)		<span class="comment"># 设置位置</span></span><br><span class="line">self.setGeometry(x,y,w,h)	同时设置位置和大小</span><br></pre></td></tr></table></figure>
<h4 id="设置样式"><a href="#设置样式" class="headerlink" title="设置样式"></a>设置样式</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setStyleSheet(<span class="string">&quot;QLabel&#123;font-size:25px;font-weight:normal;font-family:Microsoft JhengHei;&#125;\</span></span><br><span class="line"><span class="string">                            QWidget&#123;background-color:#d6e0f6;&#125;&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="鼠标移动到组件上，显示悬浮提示框"><a href="#鼠标移动到组件上，显示悬浮提示框" class="headerlink" title="鼠标移动到组件上，显示悬浮提示框"></a>鼠标移动到组件上，显示悬浮提示框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.setToolTip(<span class="string">&quot;1234&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="添加右键菜单"><a href="#添加右键菜单" class="headerlink" title="添加右键菜单"></a>添加右键菜单</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">       <span class="comment"># 声明在groupBox创建右键菜单</span></span><br><span class="line">       self.setContextMenuPolicy(Qt.CustomContextMenu)</span><br><span class="line">       self.customContextMenuRequested.connect(self.create_rightmenu)  <span class="comment"># 连接到菜单显示函数</span></span><br><span class="line">       self.contextMenu = QMenu(self)</span><br><span class="line">       self.actionA = self.contextMenu.addAction(<span class="string">&#x27;关闭&#x27;</span>)</span><br><span class="line">       self.actionB = self.contextMenu.addAction(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line">       <span class="comment"># 将动作与处理函数相关联</span></span><br><span class="line">       <span class="comment"># 这里为了简单，将所有action与同一个处理函数相关联，</span></span><br><span class="line">       <span class="comment"># 当然也可以将他们分别与不同函数关联，实现不同的功能</span></span><br><span class="line">       self.actionA.triggered.connect(self.actionHandlerA)</span><br><span class="line">       self.actionB.triggered.connect(self.actionHandlerB)</span><br><span class="line">       </span><br><span class="line">   <span class="comment"># 创建右键菜单函数</span></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">create_rightmenu</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="comment"># 菜单对象</span></span><br><span class="line">       self.contextMenu.move(QtGui.QCursor().pos())</span><br><span class="line">       self.contextMenu.show()</span><br><span class="line"></span><br><span class="line">   <span class="keyword">def</span> <span class="title function_">actionHandlerA</span>(<span class="params">self</span>):</span><br><span class="line">       os._exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">actionHandlerB</span>(<span class="params">self</span>):</span><br><span class="line">       <span class="built_in">print</span>(<span class="string">&#x27;设置&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="将窗口嵌到win下方任务栏"><a href="#将窗口嵌到win下方任务栏" class="headerlink" title="将窗口嵌到win下方任务栏"></a>将窗口嵌到win下方任务栏</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> win32gui</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">m_hTaskbar = win32gui.FindWindow(<span class="string">&quot;Shell_TrayWnd&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">m_hBar = win32gui.FindWindowEx(m_hTaskbar, <span class="number">0</span>, <span class="string">&quot;ReBarWindow32&quot;</span>, <span class="literal">None</span>)</span><br><span class="line">m_hMin = win32gui.FindWindowEx(m_hBar, <span class="number">0</span>, <span class="string">&quot;MSTaskSwWClass&quot;</span>, <span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">b = win32gui.GetWindowRect(m_hBar)  <span class="comment"># 获取m_hBar窗口尺寸b为[左，上，右，下]的数组</span></span><br><span class="line">win32gui.MoveWindow(m_hMin, <span class="number">0</span>, <span class="number">0</span>, b[<span class="number">2</span>] - b[<span class="number">0</span>] - <span class="number">200</span>, b[<span class="number">3</span>] - b[<span class="number">1</span>], <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">self.setGeometry(b[<span class="number">2</span>] - b[<span class="number">0</span>] - <span class="number">200</span>, <span class="number">0</span>, <span class="number">200</span>, b[<span class="number">3</span>] - b[<span class="number">1</span>])</span><br><span class="line">win32gui.SetParent(<span class="built_in">int</span>(ui.winId()), m_hBar)  <span class="comment"># 设置任务栏为此窗口的父窗口</span></span><br></pre></td></tr></table></figure>
<h2 id="加入触发功能"><a href="#加入触发功能" class="headerlink" title="加入触发功能"></a>加入触发功能</h2><p>触发功能的函数输入都要加 <code>event</code> </p>
<h4 id="鼠标点击"><a href="#鼠标点击" class="headerlink" title="鼠标点击"></a>鼠标点击</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mousePressEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    <span class="keyword">if</span> event.buttons() == PyQt5.QtCore.Qt.LeftButton:  <span class="comment"># 左键按下</span></span><br><span class="line">        s = event.windowPos()</span><br><span class="line">        <span class="built_in">print</span>(s.x(), s.y())</span><br></pre></td></tr></table></figure>
<h4 id="绘制事件"><a href="#绘制事件" class="headerlink" title="绘制事件"></a>绘制事件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> Qt, QRect</span><br><span class="line"><span class="keyword">from</span> PyQt5.QtGui <span class="keyword">import</span> *	<span class="comment"># QPainter QPixmap QPen</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">paintEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    painter = QPainter(self)        <span class="comment"># 开启绘图</span></span><br><span class="line"></span><br><span class="line">    img = QPixmap(<span class="string">&#x27;bitbug_favicon.ico&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    painter.drawPixmap(<span class="number">0</span>, <span class="number">0</span>, self.size, self.size, img)  <span class="comment"># 画图像</span></span><br><span class="line"></span><br><span class="line">    painter.setPen(QPen(Qt.red, <span class="number">4</span>))</span><br><span class="line">    painter.drawRect(QRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">200</span>, <span class="number">200</span>))</span><br><span class="line"></span><br><span class="line">    self.update()       <span class="comment"># 不加这个不会更新</span></span><br></pre></td></tr></table></figure>
<h4 id="窗口关闭事件"><a href="#窗口关闭事件" class="headerlink" title="窗口关闭事件"></a>窗口关闭事件</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">closeEvent</span>(<span class="params">self, event</span>):</span><br><span class="line">    reply = QMessageBox.question(self,</span><br><span class="line">                                 <span class="string">&#x27;quit&#x27;</span>,</span><br><span class="line">                                 <span class="string">&quot;是否要退出&quot;</span>,</span><br><span class="line">                                 QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                 QMessageBox.Yes)</span><br><span class="line">    <span class="keyword">if</span> reply == QMessageBox.Yes:</span><br><span class="line">        self.close()</span><br><span class="line">        event.accept()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        event.ignore()</span><br></pre></td></tr></table></figure>
<h4 id="循环事件"><a href="#循环事件" class="headerlink" title="循环事件"></a>循环事件</h4><p>用这个整循环时间的定时器最好</p>
<p>流程为：定义一个类，把类连接到主类的触发函数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PyQt5.QtCore <span class="keyword">import</span> pyqtSignal, QThread</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">WorkThread</span>(<span class="title class_ inherited__">QThread</span>):</span><br><span class="line">    <span class="comment"># 实例化一个信号对象，类变量，需要定义在函数体外</span></span><br><span class="line">    trigger = pyqtSignal(<span class="built_in">str</span>)	<span class="comment"># ql 这里的str需要修改为指定类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>().__init__()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 重写QThread 的run 函数</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="comment"># 信号发出通知面板更新</span></span><br><span class="line">            self.trigger.emit(<span class="string">&#x27;qwer&#x27;</span>)	<span class="comment"># ql 传递数据</span></span><br><span class="line">            time.sleep(<span class="number">3</span>)				<span class="comment"># ql 设置周期时间</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">    self.work = WorkThread()</span><br><span class="line">    self.work.start()</span><br><span class="line">    self.work.trigger.connect(self.display)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">display</span>(<span class="params">self, <span class="built_in">str</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;str&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="强制关闭窗口"><a href="#强制关闭窗口" class="headerlink" title="强制关闭窗口"></a>强制关闭窗口</h4><p>只有这个最好用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os._exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<h1 id="ui编写"><a href="#ui编写" class="headerlink" title="ui编写"></a>ui编写</h1><p><code>pyqt</code> 有一个附加软件 <code>qt designer</code> ，可以用拖块方法设计gui，并且可以导出<code>.ui</code> 文件，再通过<code>PYUIC</code>转成 <code>.py</code>文件，可以被引用。</p>
<h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>都是QtWidgets的，必须加<code>, self</code></p>
<h4 id="QLabel标签"><a href="#QLabel标签" class="headerlink" title="QLabel标签"></a>QLabel标签</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hello_label = QtWidgets.QLabel(hello_widget, self)    <span class="comment"># 添加一个标签</span></span><br><span class="line">hello_label.setText(<span class="string">&quot;hello wrold&quot;</span>)              <span class="comment"># 设置标签文字</span></span><br></pre></td></tr></table></figure>
<h4 id="QTextEdit输入框"><a href="#QTextEdit输入框" class="headerlink" title="QTextEdit输入框"></a>QTextEdit输入框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.textEdit = QTextEdit(<span class="string">&quot;请看这里&quot;</span>, self)					<span class="comment"># 添加一个输入框</span></span><br><span class="line">self.textEdit.setText(<span class="string">&quot;请输入&quot;</span>)							    <span class="comment"># 设置输入框文字</span></span><br><span class="line">self.textEdit.setPlaceholderText(<span class="string">&#x27;你不输入就一直显示这个&#x27;</span>)		<span class="comment"># 设置输入框背景文字</span></span><br><span class="line">get_num = <span class="built_in">int</span>(self.textEdit.toPlainText())                  <span class="comment"># 获取输入框文字</span></span><br></pre></td></tr></table></figure>
<h4 id="QPushButton按钮"><a href="#QPushButton按钮" class="headerlink" title="QPushButton按钮"></a>QPushButton按钮</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.button = QPushButton(<span class="string">&#x27;请点点我&#x27;</span>, self)		<span class="comment"># 添加按钮</span></span><br><span class="line">self.button.clicked.connect(<span class="keyword">lambda</span>: my_func())	<span class="comment"># 按下按钮，将会执行my_func函数</span></span><br></pre></td></tr></table></figure>
<h4 id="QMessageBox提示框"><a href="#QMessageBox提示框" class="headerlink" title="QMessageBox提示框"></a>QMessageBox提示框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">msg_box = QMessageBox(QMessageBox.Warning, <span class="string">&#x27;警告&#x27;</span>, <span class="string">&#x27;请稍后再试&#x27;</span>)</span><br><span class="line">msg_box.exec_()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">reply = QMessageBox.question(self,</span><br><span class="line">                                     <span class="string">&#x27;quit&#x27;</span>,</span><br><span class="line">                                     <span class="string">&quot;是否要保存&quot;</span>,</span><br><span class="line">                                     QMessageBox.Yes | QMessageBox.No,</span><br><span class="line">                                     QMessageBox.No)</span><br></pre></td></tr></table></figure>
<h4 id="QFileDialog对话框"><a href="#QFileDialog对话框" class="headerlink" title="QFileDialog对话框"></a>QFileDialog对话框</h4><p>选择文件，注意分隔两种类型文件需要用 <code>；；</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">self.filelist = QFileDialog.getOpenFileNames(self, <span class="string">&quot;多文件选择&quot;</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;所有文件 (*);;文本文件 (*.txt)&quot;</span>)[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<h4 id="QProgressbar进度条"><a href="#QProgressbar进度条" class="headerlink" title="QProgressbar进度条"></a>QProgressbar进度条</h4><p>？</p>
<h4 id="QSlider滑动条"><a href="#QSlider滑动条" class="headerlink" title="QSlider滑动条"></a>QSlider滑动条</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="引用布局"><a href="#引用布局" class="headerlink" title="引用布局"></a>引用布局</h2><p>主要就是 QWidget 嵌进去，方法有很多</p>
<ol>
<li><p>类初始化那部分全改掉</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Ui_Dialog</span>(<span class="title class_ inherited__">QWidget</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,parent=<span class="literal">None</span></span>):</span><br><span class="line">        <span class="built_in">super</span>(Ui_Dialog, self).__init__(parent)</span><br><span class="line">        self.setupUi(self)</span><br></pre></td></tr></table></figure>
<p>引用类时直接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">import</span> sys</span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)</span><br><span class="line">    ui = Ui_Dialog()</span><br><span class="line">    ui.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
</li>
<li><p>新建文件 import 他</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="comment">#从转换的.py文件内调用类</span></span><br><span class="line"><span class="keyword">from</span> FirstMainWin <span class="keyword">import</span> Ui_MainWindow</span><br><span class="line"><span class="keyword">from</span> PyQt5 <span class="keyword">import</span> QtWidgets</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">myWin</span>(QtWidgets.QWidget, Ui_MainWindow):</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(myWin, self).__init__()</span><br><span class="line">        self.setupUi(self)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"> </span><br><span class="line">    app=QtWidgets.QApplication(sys.argv)</span><br><span class="line">    Widget=myWin()</span><br><span class="line">    Widget.show()</span><br><span class="line">    sys.exit(app.exec_())</span><br></pre></td></tr></table></figure>
</li>
<li><p>在底部这样引用类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:  </span><br><span class="line">    <span class="keyword">import</span> sys  </span><br><span class="line">    app = QtWidgets.QApplication(sys.argv)  </span><br><span class="line">    widget = QtWidgets.QWidget()  </span><br><span class="line">    ui = Ui_MainWindow()  </span><br><span class="line">    ui.setupUi(widget)  </span><br><span class="line">    widget.show()  </span><br><span class="line">    sys.exit(app.exec_())  </span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>前端</tag>
        <tag>pyqt</tag>
      </tags>
  </entry>
  <entry>
    <title>【pybluez】python控制PC蓝牙</title>
    <url>/2022/library/python/%E3%80%90pybluez%E3%80%91python%E6%8E%A7%E5%88%B6PC%E8%93%9D%E7%89%99/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">pybluez库可以像操纵串口一样控制电脑自带蓝牙，可以搜索周围蓝牙、连接并收发数据。</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>对我来说能用电脑蓝牙和 HC05 这样的蓝牙模块连接了，之前一直觉得很奇怪，因为用蓝牙通信都是两个蓝牙模块，一个插电脑并用串口调试助手连接，另一个连接小车或机器人。现在可以做一个蓝牙调试助手了。</p>
<p>安装过程略</p>
<h2 id="搜索蓝牙"><a href="#搜索蓝牙" class="headerlink" title="搜索蓝牙"></a>搜索蓝牙</h2><p>​    保证自己开启蓝牙后，<code>nearby_devices = bluetooth.discover_devices(lookup_names=True)</code>，返回附近可连接蓝牙的<strong>地址</strong>和<strong>名字</strong>（返回数组，里面是元组）</p>
<h2 id="通过RFCOMM方式进行通信（客户端）"><a href="#通过RFCOMM方式进行通信（客户端）" class="headerlink" title="通过RFCOMM方式进行通信（客户端）"></a>通过RFCOMM方式进行通信（客户端）</h2><p>操作方式类似 socket</p>
<h4 id="连接蓝牙"><a href="#连接蓝牙" class="headerlink" title="连接蓝牙"></a>连接蓝牙</h4><ol>
<li><p>实例化一个对象 <code>sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)</code></p>
</li>
<li><p>提供连接地址并连接 <code>sock.connect((target_address, 1))</code></p>
</li>
</ol>
<h4 id="收发数据"><a href="#收发数据" class="headerlink" title="收发数据"></a>收发数据</h4><ul>
<li>发送数据 <code>sock.send(&quot;xxxxxxx&quot;.encode())</code></li>
<li>接收数据 <code>data = sock.recv(1024)</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># win10 安装蓝牙依赖包 https://blog.csdn.net/weixin_38676276/article/details/113027104</span></span><br><span class="line"><span class="keyword">import</span> bluetooth</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">BluetoothConnection</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 是否找到到设备</span></span><br><span class="line">        self.find = <span class="literal">False</span></span><br><span class="line">        <span class="comment"># 附近蓝牙设备</span></span><br><span class="line">        self.nearby_devices = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_nearby_devices</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Detecting nearby Bluetooth devices...&quot;</span>)</span><br><span class="line">        <span class="comment"># 可传参数 duration--持续时间 lookup-name=true 显示设备名</span></span><br><span class="line">        <span class="comment"># 大概查询10s左右</span></span><br><span class="line">        <span class="comment"># 循环查找次数</span></span><br><span class="line">        loop_num = <span class="number">3</span></span><br><span class="line">        i = <span class="number">0</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.nearby_devices = bluetooth.discover_devices(lookup_names=<span class="literal">True</span>, duration=<span class="number">5</span>)</span><br><span class="line">            <span class="keyword">while</span> self.nearby_devices.__len__() == <span class="number">0</span> <span class="keyword">and</span> i &lt; loop_num:</span><br><span class="line">                self.nearby_devices = bluetooth.discover_devices(lookup_names=<span class="literal">True</span>, duration=<span class="number">5</span>)</span><br><span class="line">                <span class="keyword">if</span> self.nearby_devices.__len__() &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                i = i + <span class="number">1</span></span><br><span class="line">                time.sleep(<span class="number">2</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;No Bluetooth device around here! trying again &#123;&#125;...&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i)))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.nearby_devices:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;There&#x27;s no Bluetooth device around here. Program stop!&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; nearby Bluetooth device(s) has(have) been found:&quot;</span>.<span class="built_in">format</span>(self.nearby_devices.__len__()),</span><br><span class="line">                      self.nearby_devices)  <span class="comment"># 附近所有可连的蓝牙设备s</span></span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="comment"># print(traceback.format_exc())</span></span><br><span class="line">            <span class="comment"># 不知是不是Windows的原因，当附近没有蓝牙设备时，bluetooth.discover_devices会报错。</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;There&#x27;s no Bluetooth device around here. Program stop(2)!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">find_target_device</span>(<span class="params">self, target_name, target_address</span>):</span><br><span class="line">        self.find_nearby_devices()</span><br><span class="line">        <span class="keyword">if</span> self.nearby_devices:</span><br><span class="line">            <span class="keyword">for</span> addr, name <span class="keyword">in</span> self.nearby_devices:</span><br><span class="line">                <span class="keyword">if</span> target_name == name <span class="keyword">and</span> target_address == addr:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;Found target bluetooth device with address:&#123;&#125; name:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(target_address, target_name))</span><br><span class="line">                    self.find = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.find:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;could not find target bluetooth device nearby. &quot;</span></span><br><span class="line">                      <span class="string">&quot;Please turn on the Bluetooth of the target device.&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">connect_target_device</span>(<span class="params">self, target_name, target_address</span>):</span><br><span class="line">        self.find_target_device(target_name=target_name, target_address=target_address)</span><br><span class="line">        <span class="keyword">if</span> self.find:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Ready to connect&quot;</span>)</span><br><span class="line">            sock = bluetooth.BluetoothSocket(bluetooth.RFCOMM)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                sock.connect((target_address, <span class="number">1</span>))</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Connection successful. Now ready to get the data&quot;</span>)</span><br><span class="line">                data_dtr = <span class="string">&quot;&quot;</span></span><br><span class="line">                <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">                    <span class="comment"># sock.send(&quot;qwer&quot;.encode())</span></span><br><span class="line">                    <span class="comment"># print(&quot;send qwer&quot;)</span></span><br><span class="line">                    data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">                    data_dtr += data.decode()</span><br><span class="line">                    <span class="keyword">if</span> <span class="string">&#x27;\n&#x27;</span> <span class="keyword">in</span> data.decode():</span><br><span class="line">                        <span class="comment"># data_dtr[:-2] 截断&quot;\t\n&quot;,只输出数据</span></span><br><span class="line">                        <span class="built_in">print</span>(datetime.datetime.now().strftime(<span class="string">&quot;%H:%M:%S&quot;</span>) + <span class="string">&quot;-&gt;&quot;</span> + data_dtr[:-<span class="number">2</span>])</span><br><span class="line">                        data_dtr = <span class="string">&quot;&quot;</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;connection fail\n&quot;</span>, e)</span><br><span class="line">                sock.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    target_name = <span class="string">&quot;=car&quot;</span></span><br><span class="line">    target_address = <span class="string">&#x27;18:A3:25:02:6B:B6&#x27;</span></span><br><span class="line">    BluetoothConnection().connect_target_device(target_name=target_name, target_address=target_address)</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>不知怎么弄服务端，也不明白</p>
<p>此外还有通过L2CAP方式进行通信，不太清楚这两种都是啥，后续再补</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>pybluez</tag>
        <tag>蓝牙</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】pwm波</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91pwm%E6%B3%A2/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="cubemx设置"><a href="#cubemx设置" class="headerlink" title="cubemx设置"></a>cubemx设置</h2><p><img src="https://s1.xptou.com/2023/01/19/63c9156ba9c99.png" alt="image-20221223143505162"></p>
<p>​    左侧<code>Timers</code>里选择<code>TIM</code>设置输出PWM，中间选择<code>channel</code>点开选择<code>PWM Generation CHx</code>，右面对应引脚就会亮起。</p>
<p>​    设置PWM输出频率通过下面的<code>Prescaler</code>（PSC）和<code>Counter Period</code>（ARR）</p>
<script type="math/tex; mode=display">
F_{pwm}=\frac{主频}{(PSC+1)(ARR+1)}</script><p>其中主频就是在<code>Clock Configuration</code>中设置的</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91571dbf2b.png" alt="image-20221223144411620"></p>
<h2 id="HAL库函数"><a href="#HAL库函数" class="headerlink" title="HAL库函数"></a>HAL库函数</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启</span></span><br><span class="line">HAL_TIM_PWM_Start (&amp;htim4,TIM_CHANNEL_4);</span><br><span class="line"><span class="comment">// 设置占空比</span></span><br><span class="line">__HAL_TIM_SetCompare(&amp;htim4,TIM_CHANNEL_4,<span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<p>注意最后一项是脉宽的绝对时长，并不是占空比，一般都是用 5~25 对应 0.5~2.5ms 的脉宽来控制舵机的角度 0~180°。</p>
<h2 id="控制舵机或电调"><a href="#控制舵机或电调" class="headerlink" title="控制舵机或电调"></a>控制舵机或电调</h2><h4 id="设置频率"><a href="#设置频率" class="headerlink" title="设置频率"></a>设置频率</h4><p>若pwm波频率不匹配，相差过大，可能不被识别。</p>
<p>一般控制舵机或电调频率为 50Hz，主频为72MHz，用上述公式计算可取 PSC=7200-1，ARR=200-1</p>
<h4 id="电调行程初始化"><a href="#电调行程初始化" class="headerlink" title="电调行程初始化"></a>电调行程初始化</h4><p>pwm 频率为 50Hz</p>
<p>先不上电，给脉冲时长 2ms，一段时间后上电，然后改变脉冲时长为 1ms，电调会长滴，之后即可用 1.1~2ms的脉冲控制电机</p>
<h2 id="控制蜂鸣器"><a href="#控制蜂鸣器" class="headerlink" title="控制蜂鸣器"></a>控制蜂鸣器</h2><p>有源蜂鸣器只是用来警报的，即上电就叫；无源蜂鸣器才能控制音调</p>
<p>用周期控制音调，音调与占空比无关</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>音符</th>
<th>对应频率（Hz）</th>
<th>半周期时长（us）</th>
</tr>
</thead>
<tbody>
<tr>
<td>1</td>
<td>523</td>
<td>956</td>
</tr>
<tr>
<td>2</td>
<td>587</td>
<td>851.5</td>
</tr>
<tr>
<td>3</td>
<td>659</td>
<td>758.5</td>
</tr>
<tr>
<td>4</td>
<td>698</td>
<td>716</td>
</tr>
<tr>
<td>5</td>
<td>784</td>
<td>637.5</td>
</tr>
<tr>
<td>6</td>
<td>880</td>
<td>568</td>
</tr>
<tr>
<td>7</td>
<td>988</td>
<td>506</td>
</tr>
</tbody>
</table>
</div>
<p>对于这种频率不高的，用pwm改变频率就有另一种方法！——用延时手动控制</p>
<p>延时函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">delay_us</span><span class="params">(<span class="type">uint16_t</span> time)</span></span><br><span class="line">&#123;    </span><br><span class="line">   <span class="type">uint16_t</span> i=<span class="number">0</span>;  </span><br><span class="line">   <span class="keyword">while</span>(time--)</span><br><span class="line">   &#123;</span><br><span class="line">      i=<span class="number">10</span>;</span><br><span class="line">      <span class="keyword">while</span>(i--) ;    </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>怎么用蜂鸣器模仿人声，或者演奏和弦？怎么调pwm频率？皆不知</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>stm32cubemx</tag>
      </tags>
  </entry>
  <entry>
    <title>【HAL库】串口通信</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E3%80%90HAL%E5%BA%93%E3%80%91%E7%AC%94%E8%AE%B0/%E3%80%90HAL%E5%BA%93%E3%80%91%E4%B8%B2%E5%8F%A3%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="cubemx配置"><a href="#cubemx配置" class="headerlink" title="cubemx配置"></a>cubemx配置</h2><p>点开异步通信，对应引脚会亮起，<code>RXD</code>和<code>TXD</code></p>
<p><img src="https://s1.xptou.com/2023/01/18/63c811d40be66.png" alt="image-20221223145433743"></p>
<h2 id="打印重定义"><a href="#打印重定义" class="headerlink" title="打印重定义"></a>打印重定义</h2><ol>
<li><p>在<code>usart.h</code>对应位置添加<code>#include&lt;stdio.h&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN Includes */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="comment">/* USER CODE END Includes */</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>在<code>usart.c</code>对应位置添加重定义</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* USER CODE BEGIN 0 */</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">fputc</span><span class="params">(<span class="type">int</span> ch, FILE *f)</span></span><br><span class="line">&#123;      </span><br><span class="line">	HAL_UART_Transmit(&amp;huart1, (<span class="type">uint8_t</span> *)&amp;ch, <span class="number">1</span>, <span class="number">0xffff</span>);   </span><br><span class="line">	<span class="keyword">return</span> ch;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* USER CODE END 0 */</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>之后<code>printf()</code>就是在串口输出</p>
<blockquote>
<p>千万别忘了开启 <code>use MicroLIB</code></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9158f61a0e.png" alt="image-20221223145322788"></p>
<p>没开启这个，串口无反应</p>
</blockquote>
<h2 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h2><h4 id="HAL库接收函数"><a href="#HAL库接收函数" class="headerlink" title="HAL库接收函数"></a>HAL库接收函数</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户定义</span></span><br></pre></td></tr></table></figure>
<p>串口接收不定长有很多种实现思路，比如DMA或定时器等，一下简单介绍一下定时器方法。</p>
<h4 id="定时器方法"><a href="#定时器方法" class="headerlink" title="定时器方法"></a>定时器方法</h4><p>115200 波特率对应 5ms 间隔，最多一次可以传输 20 字节。</p>
<ul>
<li><p>思路</p>
<p>从接收到信号开始，一段时间内一直接收，之后关闭，等待下一次接收到新信号。等待时间用定时器精确控制。</p>
</li>
<li><p>代码</p>
<p><a href="http://t.csdn.cn/z7yF0">http://t.csdn.cn/z7yF0</a></p>
<p>其中 REC_LENGTH 一定要设置为 1</p>
</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>HAL库</tag>
        <tag>stm32cubemx</tag>
      </tags>
  </entry>
  <entry>
    <title>【博客】记录</title>
    <url>/2022/work/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%8D%9A%E5%AE%A2%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h2><p>选择 <a href="https://www.hualigs.cn/">遇见图床</a> </p>
<p>本来用的</p>
<h2 id="github的cname"><a href="#github的cname" class="headerlink" title="github的cname"></a>github的cname</h2><p>将你的 <code>用户名.github.io</code> 指向你自己的域名</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91e27a2c51.png" alt="image-20221222130717257"></p>
<p><a href="https://github.com/willin/js.cool">willin/js.cool: 为国人开源项目提供免费的子域名（自 2020 年 8 月起），现在支持 Vercel 啦！ (github.com)</a></p>
<h2 id="将-vue-部署到-github-pages-上"><a href="#将-vue-部署到-github-pages-上" class="headerlink" title="将 vue 部署到 github pages 上"></a>将 vue 部署到 github pages 上</h2><blockquote>
<p>好像暂时是失败的</p>
</blockquote>
<h4 id="设置步骤"><a href="#设置步骤" class="headerlink" title="设置步骤"></a>设置步骤</h4><ol>
<li><p>安装 <code>gh-pages</code> : <code>npm install</code></p>
</li>
<li><p>在本地 vue 项目的 <code>vue.config.js</code> 添加 <code>publicPath: &#39;./&#39;</code></p>
</li>
</ol>
<p><img src="https://s1.xptou.com/2023/01/19/63c91e2da320f.png" alt="image-20221222151248046"></p>
<ol>
<li>在 <code>package.json</code> 添加 <code>&quot;deploy&quot;: &quot;npm run build &amp;&amp; gh-pages -d dist&quot;</code> 和 <code>&quot;homepage&quot;: &quot;https://你的账户名.github.io/你的项目名&quot;</code></li>
</ol>
<p><img src="https://s1.xptou.com/2023/01/19/63c91e3597e2f.png" alt="image-20221222152125193"></p>
<h4 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h4><ol>
<li><code>npm run build</code> ，生成<code>dist</code>文件夹</li>
<li><code>npm rum deploy</code></li>
</ol>
<p>​        这样就上传到 github 的对应项目中, 且会新创建一个分支 <code>gh-pages</code> , 在 pages 界面设置分支。</p>
<h2 id="维护记录"><a href="#维护记录" class="headerlink" title="维护记录"></a>维护记录</h2><h4 id="待办"><a href="#待办" class="headerlink" title="待办"></a>待办</h4><ol>
<li>title 和 tag 不太方便整理，容易出错。尽量整个可视化界面控制。</li>
<li>整理分类栏</li>
</ol>
<h4 id="2023-1-19"><a href="#2023-1-19" class="headerlink" title="2023.1.19"></a>2023.1.19</h4><p>做好了自动调整title和图片重新上传，把所有图片都重新上传到了遇见图床，本地不留。</p>
<p>为了图片重新上传，需要用python调用图床的api接口，但是我调用smms的接口始终请求失败，就改成了遇见图床，接口是很方便，但是图片加载速率跟原来也差不多，都挺慢的。再看看，要是确实速度也没有提升就换回smms，那个还方便点，可以通过picgo直接上传。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>前端</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>数据处理</title>
    <url>/2022/library/python/%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="pandas处理excel"><a href="#pandas处理excel" class="headerlink" title="pandas处理excel"></a>pandas处理excel</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#------------------读取------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">file_path = <span class="string">r&#x27;first.xlsx&#x27;</span></span><br><span class="line">data = pd.read_excel(file_path, sheet_name = <span class="string">&quot;Sheet1&quot;</span>) <span class="comment"># sheet_name不指定时默认返回全表数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印表数据，如果数据太多，会略去中间部分</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="comment"># 打印头部数据，仅查看数据示例时常用</span></span><br><span class="line"><span class="built_in">print</span>(data.head())</span><br><span class="line"><span class="comment"># 打印列标题</span></span><br><span class="line"><span class="built_in">print</span>(data.columns)</span><br><span class="line"><span class="comment"># 打印行</span></span><br><span class="line"><span class="built_in">print</span>(data.index)</span><br><span class="line"><span class="comment"># 打印指定列</span></span><br><span class="line"><span class="built_in">print</span>(data[<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#--------------------写入--------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pandas <span class="keyword">import</span> DataFrame</span><br><span class="line"></span><br><span class="line">data = &#123; <span class="string">&#x27;name&#x27;</span>: [<span class="string">&#x27;zs&#x27;</span>, <span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;ww&#x27;</span>], <span class="string">&#x27;age&#x27;</span>: [<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>], <span class="string">&#x27;gender&#x27;</span>: [<span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;man&#x27;</span>, <span class="string">&#x27;woman&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">df = DataFrame(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改</span></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>][df[<span class="string">&#x27;gender&#x27;</span>] == <span class="string">&#x27;girl&#x27;</span>] = <span class="string">&#x27;female&#x27;</span></span><br><span class="line">df[<span class="string">&#x27;gender&#x27;</span>][df[<span class="string">&#x27;gender&#x27;</span>] == <span class="string">&#x27;boy&#x27;</span>] = <span class="string">&#x27;male&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一行</span></span><br><span class="line">df.loc[<span class="number">6</span>] = [<span class="number">5</span>, <span class="string">&#x27;Eric&#x27;</span>, <span class="string">&#x27;male&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;2021-5-18&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新增一列</span></span><br><span class="line">df[<span class="string">&#x27;favorite&#x27;</span>] = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">df.to_excel(<span class="string">&#x27;new.xlsx&#x27;</span>, sheet_name=<span class="string">&#x27;Sheet1&#x27;</span>, index=<span class="literal">False</span>, header=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>数学建模</tag>
        <tag>数据处理</tag>
      </tags>
  </entry>
  <entry>
    <title>线性规划和整数规划</title>
    <url>/2022/library/math/%E7%BA%BF%E6%80%A7%E8%A7%84%E5%88%92%E5%92%8C%E6%95%B4%E6%95%B0%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="线性规划问题"><a href="#线性规划问题" class="headerlink" title="线性规划问题"></a>线性规划问题</h2><p>线性规划问题都可以建立如下方程</p>
<script type="math/tex; mode=display">
min ~ x = 70 x_1 + 50 x_2 + 60 x_3,\\


s.t.\left \{
\begin{aligned}
2 x_1 + 4 x_2 + 3 x_3 \leq 150,\\
3 X_1 + X_2 + 5 x_3 \leq 160,\\
7 x_1 + 3 x_2 + 5 x_3 \leq 200,\\
x_i \geq 0, i=1,2,3.
\end{aligned}
\right.</script><p>其中第一行的 x1、x2、x3 称为<strong>决策变量</strong>。</p>
<p>通过 python 求解，使用 scipy 的 optimize.linprog 函数，代码如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> optimize <span class="keyword">as</span> op</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义决策变量范围</span></span><br><span class="line">x1=(<span class="number">0</span>,<span class="literal">None</span>)                                                </span><br><span class="line">x2=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line">x3=(<span class="number">0</span>,<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义目标函数系数</span></span><br><span class="line">c = np.array([<span class="number">70</span>, <span class="number">50</span>, <span class="number">60</span>])        </span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义约束条件系数</span></span><br><span class="line">a = np.array([[-<span class="number">2</span>, -<span class="number">4</span>, -<span class="number">3</span>], [-<span class="number">3</span>, -<span class="number">1</span>, -<span class="number">5</span>], [-<span class="number">7</span>, -<span class="number">3</span>, -<span class="number">5</span>]])    </span><br><span class="line">b = np.array([-<span class="number">150</span>, -<span class="number">160</span>, -<span class="number">200</span>])</span><br><span class="line"></span><br><span class="line">res=op.linprog(c,a,b,bounds=(x1,x2,x3))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res.x[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<p>注意 optimize 函数判定约束条件统一是大于号。</p>
<h4 id="投资的收益与风险"><a href="#投资的收益与风险" class="headerlink" title="投资的收益与风险"></a>投资的收益与风险</h4><ul>
<li>问题：每种股票有收益率 r 和风险 q，合理分配资金，使收益尽可能大而风险尽可能小</li>
<li>模型：定义股票购买量 $x_i$</li>
</ul>
<h2 id="整数规划"><a href="#整数规划" class="headerlink" title="整数规划"></a>整数规划</h2><h4 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h4><ul>
<li>问题：每件物品有重量 a 和价值 c，限定重量 b 内任取物品，使价值总和最大</li>
<li>模型：定义某物品是否被选取 $x_i \in {0,1}$</li>
</ul>
<h4 id="指派问题"><a href="#指派问题" class="headerlink" title="指派问题"></a>指派问题</h4><ul>
<li>问题：某人完成某项任务的费用为 c，分配人员完成与人数同等的任务，使费用总和最小</li>
<li>模型：定义某人是否分配到某任务 $x_{ij} \in {0,1}$</li>
</ul>
<h4 id="旅行商问题"><a href="#旅行商问题" class="headerlink" title="旅行商问题"></a>旅行商问题</h4><ul>
<li><p>问题：从某城市到零一城市的费用为 c，安排旅行顺序，使费用总和最小</p>
</li>
<li><p>模型</p>
<p>c 变量表示费用，$x_{ij} \in {0,1}$ 变量表示路径是否被选择</p>
<script type="math/tex; mode=display">
min z = \sum_{i=1}^n\sum_{j=1}^n c_{ij} x_{ij}, \\
s.t. \left\{
\begin{aligned}
\sum_{i=1}^n x_{ij} = 1, j=1,2,...,n, \\
\sum_{j=1}^n x_{ij} = 1, i=1,2,...,n, \\
u_i - u_j + n x_{ij} \leq n - 1, i=1,...,n, j=2,...n, \\
u_1 = 0, 1 \leq u_i \leq n-1, i=2,...,n, \\
x_{ij} = 0或1, i,j=1,2,...,n.
\end{aligned}
\right.</script><p>$u_i \in {1,2,…,n}$ 变量保证只有 $i&lt;j$ 的 $x_{ij}$ 才可能为1，防止回路</p>
</li>
</ul>
<h4 id="比赛项目的排序问题"><a href="#比赛项目的排序问题" class="headerlink" title="比赛项目的排序问题"></a>比赛项目的排序问题</h4><ul>
<li><p>问题：每名运动员报名了比赛项目若干，安排比赛顺序，尽可能使运动员不连续参加两场比赛</p>
</li>
<li><p>模型：定义 $w_{ij}$ 同时参加两项目的人数和 $x_{ij} \in {0,1}$ 变量表示路径是否被选择（用类似于旅行商的模型）</p>
</li>
<li></li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>算法</tag>
        <tag>线性规划</tag>
        <tag>整数规划</tag>
      </tags>
  </entry>
  <entry>
    <title>右键新建菜单管理</title>
    <url>/2022/solved/%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E8%8F%9C%E5%8D%95%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="删除项"><a href="#删除项" class="headerlink" title="删除项"></a>删除项</h2><p>查找路径 <code>HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\
Discardable\PostSetup\ShellNew</code> 的 <code>classes</code>，打开如下图</p>
<p>  <img src="https://s1.xptou.com/2023/01/19/63c91bd42e834.png" alt="image-20221217165101148"></p>
<h2 id="增加项（以-md-为例）"><a href="#增加项（以-md-为例）" class="headerlink" title="增加项（以 .md 为例）"></a>增加项（以 .md 为例）</h2><p>创建 <code>md.reg</code> 文件，保存一下内容，双击执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows Registry Editor Version 5.00</span><br><span class="line">[HKEY_CLASSES_ROOT\.md]</span><br><span class="line">@=&quot;Typora.exe&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\.md\ShellNew]</span><br><span class="line">&quot;NullFile&quot;=&quot;&quot;</span><br><span class="line">[HKEY_CLASSES_ROOT\Typora.exe]</span><br><span class="line">@=&quot;Markdown&quot;</span><br></pre></td></tr></table></figure>
<p>无需重启电脑即可生效，之后可以删除该文件</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
      </tags>
  </entry>
  <entry>
    <title>npm install 报错</title>
    <url>/2022/solved/npm%20install%20%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="未生成-package-json"><a href="#未生成-package-json" class="headerlink" title="未生成 package.json"></a>未生成 <code>package.json</code></h2><p>报错信息</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bc58cf15.png" alt="1671205487909"></p>
<p>先 <code>npm init</code></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>网盘挂载Alist+RaiDrive</title>
    <url>/2022/library/inte/%E7%BD%91%E7%9B%98%E6%8C%82%E8%BD%BDAlist+RaiDrive/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>可以直接让你像打开文件夹一样打开你的网盘，拖动文件。</p>
<p>可以合并多个网盘，自动分配（好像可以，希望可以）</p>
<p>实际上我没咋用过，因为打开它很慢，操作很卡。不过主要因为没啥文件需要存。</p>
<h2 id="配置方法"><a href="#配置方法" class="headerlink" title="配置方法"></a>配置方法</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>inte</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派配置python环境</title>
    <url>/2022/solved/%E6%A0%91%E8%8E%93%E6%B4%BE%E9%85%8D%E7%BD%AEpython%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<ul>
<li>配置正确的源，否则pip install报错hash找到自己版本：<code>lsb_release -c</code><a href="https://www.cnblogs.com/lynn-z/p/12874504.html">手摸手教程之ubuntu20.04更改国内镜像源（附其他版本ubuntu换源教程，最新详细教程） - Lynn_z - 博客园 (cnblogs.com)</a> 然后 <a href="https://www.cnblogs.com/liuguanglin/p/debian11_repo.html">Debian 11 (bullseye) 国内软件源 - Guanglin - 博客园 (cnblogs.com)</a> </li>
<li>安装cv2：一开始pip install报错hash，按上面修改后 <a href="https://blog.csdn.net/xiangfengl/article/details/122398829">(96条消息) import cv2 ,提示ImportError: libcblas.so.3: cannot open shared object file: No such file or directory_纬领网络的博客-CSDN博客</a> </li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>树莓派</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>树莓派域名解析暂时失败</title>
    <url>/2022/solved/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90%E6%9A%82%E6%97%B6%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h1 id="树莓派ping-baidu-com-域名解析暂时失败"><a href="#树莓派ping-baidu-com-域名解析暂时失败" class="headerlink" title="树莓派ping: baidu.com: 域名解析暂时失败"></a>树莓派ping: baidu.com: 域名解析暂时失败</h1><p>   <a href="https://blog.csdn.net/frdevolcqzyxynjds/article/details/120123906">(5条消息) 解决 树莓派ping: baidu.com: 域名解析暂时失败_闭关苦炼内功的博客-CSDN博客_树莓派域名解析暂时失败</a> </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>树莓派</tag>
      </tags>
  </entry>
  <entry>
    <title>【控制算法】学习</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%AE%97%E6%B3%95/%E3%80%90%E6%8E%A7%E5%88%B6%E7%AE%97%E6%B3%95%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="PID"><a href="#PID" class="headerlink" title="PID"></a>PID</h2><blockquote>
<p>应用最广泛</p>
</blockquote>
<p>分为P、I、D环，每环对应一个系数，也对应一个物理含义</p>
<p>P：偏差；D：变化速率；I：累计偏差</p>
<p>控制输出值 = 三环加权求和</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>二轮平衡小车，陀螺仪测量值：角度 θ；角速度 ω；</p>
<p>为了保持小车平衡在 $\theta_0$ 角度，控制小车电机正反转，求解具体转速 X</p>
<script type="math/tex; mode=display">
X = k_p (\theta_0 - \theta) + k_d \omega + k_i \sum_{i=0}^{\text{当前}} (\theta_0 - \theta)</script><p>其中 $\omega$ 也可以用 $\frac{ \mathrm{d} \theta}{ \mathrm{d} t}$ 表示</p>
<h2 id="MPC"><a href="#MPC" class="headerlink" title="MPC"></a>MPC</h2><blockquote>
<p>善于控制多路，如机器人</p>
</blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>算法</tag>
        <tag>控制</tag>
      </tags>
  </entry>
  <entry>
    <title>【滤波算法】学习</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%AE%97%E6%B3%95/%E3%80%90%E6%BB%A4%E6%B3%A2%E7%AE%97%E6%B3%95%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="卡尔曼滤波"><a href="#卡尔曼滤波" class="headerlink" title="卡尔曼滤波"></a>卡尔曼滤波</h2><p>将（多种方法测量或计算到的）状态值（按照设定的比例系数）加权求和</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>测量到运动物体物体：运动速度 v；位置 x；上一次测量位置 x0；</p>
<p>由于每个值都是测量得到的，不一定准确，要估计物体真实位置</p>
<script type="math/tex; mode=display">
x_{true} = k_1 x + k_2 (x_0 + v \Delta t)</script><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>算法</tag>
        <tag>滤波</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】无刷电机和电调</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E6%97%A0%E5%88%B7%E7%94%B5%E6%9C%BA%E5%92%8C%E7%94%B5%E8%B0%83/</url>
    <content><![CDATA[<div class="note info">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  <a href="https://www.bilibili.com/video/BV1LE411p7QB/">https://www.bilibili.com/video/BV1LE411p7QB/</a></p>
<h2 id="无刷电机结构"><a href="#无刷电机结构" class="headerlink" title="无刷电机结构"></a>无刷电机结构</h2><p>给同一组线圈反向的绕线方式（图中错误），保证两端磁性相同</p>
<p>三个线圈电压保持：一组为正；一组为负；一组为0；</p>
<p>则磁性保持：一组为 N；一组为 S；一组无磁性；</p>
<p>电压周期变化，转子旋转</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91545c6167.png" alt="1670131737857"></p>
<p>将电路简化为<strong>三相电</strong></p>
<p><strong>电调</strong>的作用控制<strong>mos管</strong>通断</p>
<p>并通过<strong>霍尔传感器</strong>或<strong>反电动势</strong>，确定转子位置</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9154a19451.png" alt="1670131686170"></p>
<p>增加线圈数，但控制还是三组，用三相电</p>
<p>线圈可以在内或在外</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c9154e74c88.png" alt="1670131783587"></p>
<p>无刷电机的 KV 参数，可以用用来计算转速</p>
<script type="math/tex; mode=display">
RPM = KV \times volt</script><p><img src="https://s1.xptou.com/2023/01/19/63c91552daf6d.png" alt="1670131825005"></p>
<h2 id="型号命名规律"><a href="#型号命名规律" class="headerlink" title="型号命名规律"></a>型号命名规律</h2><p> 如2216、2814、A2212 等， 前两位是定子外径（mm）、后两位的是定子高度（mm）。数越大，电机的功率越大。同时，尺寸越大，重量也越大。 </p>
<p>2305：小电机，用于莱洛三角形</p>
<p>编码器：mt6701</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>硬件知识</tag>
      </tags>
  </entry>
  <entry>
    <title>【祖传板子】记录</title>
    <url>/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E7%A5%96%E4%BC%A0%E6%9D%BF%E5%AD%90%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li><h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2></li>
</ol>
<h4 id="2022-12-03"><a href="#2022-12-03" class="headerlink" title="2022.12.03"></a>2022.12.03</h4><p>理解了无刷电机和电调的控制原理，<a href="https://www.bilibili.com/video/BV1LE411p7QB/，才认识到无刷电机和有刷电机的区别。">https://www.bilibili.com/video/BV1LE411p7QB/，才认识到无刷电机和有刷电机的区别。</a></p>
<h4 id="2022-12-04"><a href="#2022-12-04" class="headerlink" title="2022.12.04"></a>2022.12.04</h4><p>走了选型芯片流程 <a href="https://www.st.com/content/st_com/zh.html">STMicroelectronics: Our technology starts with you - STMicroelectronics</a> ，确定了主控选型，学习了基础软件知识：time6是可以做时钟中断；配置PWM波；配置编码器</p>
<p>了解了一些接口：rs232没人用的老电脑串口；SDIO就是SD卡的；I2S就是音频的；</p>
<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><div class="table-container">
<table>
<thead>
<tr>
<th>外设</th>
<th>内需</th>
</tr>
</thead>
<tbody>
<tr>
<td>4个电机驱动</td>
<td>tb6612</td>
</tr>
<tr>
<td>8个舵机，电调</td>
<td></td>
</tr>
<tr>
<td>无线通信</td>
<td>==还没想好==</td>
</tr>
<tr>
<td>4个串口</td>
<td></td>
</tr>
<tr>
<td>1个显示屏</td>
<td>oled 或者 lcd；串口屏或者spi或者iic</td>
</tr>
<tr>
<td>3个按键</td>
<td></td>
</tr>
<tr>
<td>1个蜂鸣器</td>
<td></td>
</tr>
<tr>
<td>2个led灯</td>
<td>电源指示灯、状态指示灯</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>其他</th>
<th></th>
<th></th>
<th></th>
<th>内需</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>电源接口</strong></td>
<td>xt60</td>
<td>xt30</td>
<td>焊盘（用于调试检测）</td>
<td></td>
</tr>
<tr>
<td><strong>电源支持</strong></td>
<td>2s</td>
<td>3s</td>
<td>4s</td>
<td></td>
</tr>
<tr>
<td><strong>信号电源接口</strong></td>
<td>st-link</td>
<td>安卓口</td>
<td>type-C</td>
<td>stm32f103cBt6等</td>
</tr>
<tr>
<td><strong>供电模块</strong></td>
<td>LDO</td>
<td>DCDC</td>
<td>防反接</td>
<td>防短路过流保护</td>
</tr>
</tbody>
</table>
</div>
<div class="table-container">
<table>
<thead>
<tr>
<th>还没想好</th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td>ADC</td>
<td>can</td>
<td>output</td>
<td>input</td>
<td>spi</td>
<td>iic</td>
<td>编码器接口</td>
<td>各向电机</td>
<td>SD卡</td>
</tr>
</tbody>
</table>
</div>
<h2 id="主控选型——RCT6"><a href="#主控选型——RCT6" class="headerlink" title="主控选型——RCT6"></a>主控选型——RCT6</h2><p>因为做成祖传板子，多余的引脚均不使用，因此选尽可能便宜的，尽可能小的</p>
<p>主要限制在 <strong>4个电机驱动</strong> ，算上每个有刷电机对应一个AB向编码器，驱动外设就需要 7 个，加上内部时钟，至少 8 个。</p>
<p>简单查了一下，好像f103的虽然性能不是那么优秀（咱也不知道性能要求有多高），但是飞控还是有不少人用的，而且便宜，就选定f103的</p>
<p>c8t6肯定不行，就找再大一点的，直接再cubemx里搜索，看到他是按引脚分类的，发现了rct6，接着对应st型号说明图，发现c对应48引脚，比他多的就是r对应64引脚了，进去细看正好8个电机驱动。</p>
<p>淘宝查了，不到20块一个芯片，普通QFP封装</p>
<p>考虑到我之前也用过，应该是f103r系列比较出名的，就它了</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>pcb</tag>
      </tags>
  </entry>
  <entry>
    <title>【vue】搭建网页</title>
    <url>/2022/library/frontend/%E3%80%90vue%E3%80%91%E6%90%AD%E5%BB%BA%E7%BD%91%E9%A1%B5/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  <a href="https://developer.mozilla.org/zh-CN/">https://developer.mozilla.org/zh-CN/</a></p>
<h2 id="上手vue"><a href="#上手vue" class="headerlink" title="上手vue"></a>上手vue</h2><ol>
<li>安装包管理器 <code>npm install</code></li>
<li>创建vue项目 <code>vue create name</code></li>
<li>本地运行看效果 <code>npm run serve</code>，打开 <code>localhost:8081</code> </li>
</ol>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>frontend</tag>
        <tag>library</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>【航模】记录</title>
    <url>/2022/work/%E5%B5%8C%E5%85%A5%E5%BC%8F%E9%A1%B9%E7%9B%AE/%E3%80%90%E8%88%AA%E6%A8%A1%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>搞到：碳棒，kt 泡沫板，小舵机，转向连接杆，空心杯</li>
<li>自己咋切泡沫板</li>
<li>批量祖传板子</li>
<li>超远程控制</li>
<li>超级祖传遥控器（无线遥控原理）</li>
<li>学习飞控原理（四轴和普通）</li>
</ol>
<h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><h4 id="2022-12-02"><a href="#2022-12-02" class="headerlink" title="2022.12.02"></a>2022.12.02</h4><p>看了 <code>魔界造物</code> 造的飞机，超级喜欢</p>
<h4 id="2022-12-03"><a href="#2022-12-03" class="headerlink" title="2022.12.03"></a>2022.12.03</h4><p>新西达，电机和电调，便宜</p>
<p>电机，2212，2800KV</p>
<p>快速调节器，拉杆，舵角</p>
<p>微风，练习机</p>
<h4 id="2022-12-07"><a href="#2022-12-07" class="headerlink" title="2022.12.07"></a>2022.12.07</h4><p>了解到飞控的无线通信，发现好多人都用 <code>nrf24l01</code> ，虽然还完全没理解。</p>
<p>官网链接：</p>
<p> <a href="https://www.nordicsemi.com/Products/nRF24-series">nRF24 Series - Nordic Semiconductor - nordicsemi.com</a> </p>
<p>国产：</p>
<p> <a href="https://www.ebyte.com/product-class-all.html">LoRa/zigbee/WiFi/蓝牙模块/4G DTU网关/数传电台/串口服务器/遥控开关/无线通信模块-亿佰特电子科技有限公司 (ebyte.com)</a> </p>
<h4 id="2022-12-12"><a href="#2022-12-12" class="headerlink" title="2022.12.12"></a>2022.12.12</h4><p>大购物</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>航模电池</th>
<th>平衡充电器</th>
<th>电调</th>
<th>电机</th>
<th>遥控器</th>
</tr>
</thead>
<tbody>
<tr>
<td>2s 35C 1500mAh</td>
<td>B6 50W</td>
<td>新西达 30A（2S-3S）</td>
<td>无刷电机 A2212 140KV</td>
<td>富斯i6</td>
</tr>
<tr>
<td><a href="https://m.tb.cn/h.Uis5PSO?tk=yfGfd3hL57z">https://m.tb.cn/h.Uis5PSO?tk=yfGfd3hL57z</a></td>
<td><a href="https://m.tb.cn/h.U8Sa5xa?tk=2ZWid3hMtMd">https://m.tb.cn/h.U8Sa5xa?tk=2ZWid3hMtMd</a></td>
<td><a href="https://m.tb.cn/h.U8hBohD?tk=0wBfd3hnV3j">https://m.tb.cn/h.U8hBohD?tk=0wBfd3hnV3j</a></td>
<td><a href="https://m.tb.cn/h.URmEGco?tk=axZvd3hmJ0O">https://m.tb.cn/h.URmEGco?tk=axZvd3hmJ0O</a></td>
<td>闲鱼<a href="https://m.tb.cn/h.URmwbRr?tk=lYgxd3hNzqV">https://m.tb.cn/h.URmwbRr?tk=lYgxd3hNzqV</a></td>
</tr>
</tbody>
</table>
</div>
<p>了解无刷电机参数，遥控器选型</p>
<h4 id="2023-1-17"><a href="#2023-1-17" class="headerlink" title="2023.1.17"></a>2023.1.17</h4><p>已经做好了一个飞机，</p>
<p>youtube 上 FliteTest 教你挺好的，跟着这个翻译教程做的 <a href="https://v.youku.com/v_show/id_XMTI3ODgwMjY4NA==.html">FT小教练(Tiny Trainer)制作教程-科技-高清完整正版视频在线观看-优酷 (youku.com)</a>，是前拉式，前拉式就是机头放螺旋桨，飞速慢，适合入门</p>
<p>哔站 魔界造物 </p>
<p>后来又自己做了一个发射和接收机，调试成功，8个通道，还有蜂鸣器（电路画错了，不过能勉强出声）。由于发射端没有合适的摇杆按钮系统，就用手机作为最初的发射端，通过蓝牙连接中转端，通过 irf24l01 发射出去。</p>
<p>存在很大问题呀，手机端做的app不支持多触点，没法双手同时遥控。。。</p>
<p>已经试飞过两次，第一次桨叶不够大，动力不足，飞了好几次，把桨叶撞折了，从根那折的。</p>
<p>第二次上天了，但是机头太往上升太猛，我头回飞飞机，懵了就，大起大落几回就机头撞地了，电机轴装弯了。（机头不能固定太死，要不然撞击破坏力太大）</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>嵌入式</tag>
        <tag>航模</tag>
      </tags>
  </entry>
  <entry>
    <title>【nerf】记录</title>
    <url>/2022/work/nerf/%E3%80%90nerf%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>了解 cuda </li>
<li>torch.compile()</li>
<li>读 instant-ngp 代码</li>
</ol>
<h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><h4 id="好久以前"><a href="#好久以前" class="headerlink" title="好久以前"></a>好久以前</h4><p>改了 <strong>贝叶斯优化</strong> 采样点代码（主要改在库里），但是速度慢200倍，之后出来了自适应采样点，就放弃继续了。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>【前端】记录</title>
    <url>/2022/work/%E5%89%8D%E7%AB%AF/%E3%80%90%E5%89%8D%E7%AB%AF%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>应用 vue 到自己的博客</li>
<li>正经学会 html css js vue</li>
<li>创建各种样式，方便记录</li>
</ol>
<h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><h4 id="2022-12-02"><a href="#2022-12-02" class="headerlink" title="2022.12.02"></a>2022.12.02</h4><p>查 Hexo 原理，知道了背后的 GitHub page，自己新建了一个，就可以随意编辑了</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>【常用数学公式】总结</title>
    <url>/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90%E5%B8%B8%E7%94%A8%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F%E3%80%91%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><h4 id="和差化积"><a href="#和差化积" class="headerlink" title="和差化积"></a>和差化积</h4><p>sin(a)+sin(b) = 2sin[(a+b)/2]cos[(a-b)/2]</p>
<p>sin(a)-sin(b) = 2cos[(a+b)/2]sin[(a-b)/2]</p>
<p>cos(a)+cos(b) = 2cos[(a+b)/2]cos[(a-b)/2]</p>
<p>cos(a)-cos(b) = -2sin[(a+b)/2]sin[(a-b)/2]</p>
<p>tanA+tanB=sin(A+B)/cosAcosB</p>
<h4 id="积化和差"><a href="#积化和差" class="headerlink" title="积化和差"></a>积化和差</h4><p>sin(a)sin(b) = -1/2*[cos(a+b)-cos(a-b)]</p>
<p>cos(a)cos(b) = 1/2*[cos(a+b)+cos(a-b)]</p>
<p>sin(a)cos(b) = 1/2*[sin(a+b)+sin(a-b)]</p>
<p>cos(a)sin(b) = 1/2*[sin(a+b)-sin(a-b)]</p>
<h2 id="滤波器"><a href="#滤波器" class="headerlink" title="滤波器"></a>滤波器</h2><h4 id="RC低通滤波器"><a href="#RC低通滤波器" class="headerlink" title="RC低通滤波器"></a>RC低通滤波器</h4><p><img src="https://s1.xptou.com/2023/01/19/63c91bc197178.png" alt="1670057171754"></p>
<script type="math/tex; mode=display">
H(j \omega)=\frac{U_{o}}{U}_{i}=\frac{X_{C}}{R+X_{C}}=\frac{\frac{1}{j \omega C}}{R+\frac{1}{j \omega C}}=\frac{1}{1 + R C j \omega}</script><p>截止频率</p>
<script type="math/tex; mode=display">
|H(j \omega)|=\sqrt{\frac{1}{1+(\omega RC)^{2}}}=\frac{\sqrt{2}}{2}\\
\omega_0 = \frac1{RC}\\
f_0 = \frac1{2 \pi R C}</script><h4 id="RLC带通滤波器"><a href="#RLC带通滤波器" class="headerlink" title="RLC带通滤波器"></a>RLC带通滤波器</h4><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>课内知识</tag>
        <tag>公式</tag>
      </tags>
  </entry>
  <entry>
    <title>从regedit改变键盘映射关系</title>
    <url>/2022/solved/%E4%BB%8Eregedit%E6%94%B9%E5%8F%98%E9%94%AE%E7%9B%98%E6%98%A0%E5%B0%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<div class="note primary">
            <div align="center">`caps lock`不怎么用，一般用`shift+字母`代替；用鼠标操控时，经常左手够删除键`del`，就想直接调换过来</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<blockquote>
<p>​    因为鼠标滚轮也坏了，想做一点更自由的改动，因此直接研究了，修改注册表设置按键映射。</p>
</blockquote>
<h2 id="两步设置按键映射"><a href="#两步设置按键映射" class="headerlink" title="两步设置按键映射"></a>两步设置按键映射</h2><ol>
<li><p>注册表定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Keyboard Layout</code>，新建一个<code>二进制数值</code>，命名为<code>Scancode Map</code></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bcc9faa4.png" alt="1669721677084"></p>
</li>
<li><p>输入按键映射代码，保存，重启电脑</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bcfa8298.png" alt="1669721822415"></p>
<p><strong>除了图中画框的以外都是固定样式</strong></p>
<h2 id="按键映射代码规则"><a href="#按键映射代码规则" class="headerlink" title="按键映射代码规则"></a>按键映射代码规则</h2><ul>
<li>框一<code>02</code>：表示<strong>映射个数</strong>，如一组映射为<code>02</code>，两组映射为<code>03</code>，以此类推。</li>
<li>框二<code>0E 00 3A 00</code>：表示映射按键的<strong>扫描码</strong>（与其对应的还有ASCII码），<strong>将前者映射到后者</strong>，如<code>0E 00</code>表示<code>backspace</code>，<code>3A 00</code>表示<code>caps lock</code>。（具体映射表见后）</li>
</ul>
<h2 id="映射表"><a href="#映射表" class="headerlink" title="映射表"></a>映射表</h2><p> <a href="https://blog.csdn.net/liuyukuan/article/details/120575746">键盘按键的各种编码对照表_liuyukuan的博客-CSDN博客_键盘编码</a> </p>
<p> <a href="https://blog.csdn.net/qq_37232329/article/details/79926440">键盘扫描码_Kiopler的博客-CSDN博客_键盘扫描码</a> </p>
<p>（注意提供的多位的扫描码都是反的，如<code>0e 53</code>，其实应为<code>53 0e</code>）</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>regedit</tag>
        <tag>键盘</tag>
      </tags>
  </entry>
  <entry>
    <title>【k210】开发板上手</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/%E3%80%90k210%E3%80%91%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>kflash烧录固件</p>
<p>maixpy直接连接编程</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h4 id="保存图片到SD卡"><a href="#保存图片到SD卡" class="headerlink" title="保存图片到SD卡"></a>保存图片到SD卡</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">img.save(&quot;/sd/test.jpg&quot;, quality=95)</span><br></pre></td></tr></table></figure>
<h4 id="串口"><a href="#串口" class="headerlink" title="串口"></a>串口</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from machine import UART</span><br><span class="line"></span><br><span class="line"># 选择引脚用于串口通信</span><br><span class="line">fm.register(board_info.PIN10,fm.fpioa.UART2_TX)</span><br><span class="line">fm.register(board_info.PIN11,fm.fpioa.UART2_RX)</span><br><span class="line"># 开启串口</span><br><span class="line">uart = UART(UART.UART1, 115200, 8, 0, 0, timeout=1000, read_buf_len=4096)</span><br><span class="line"></span><br><span class="line">uart.write(data)</span><br></pre></td></tr></table></figure>
<h4 id="神经网络"><a href="#神经网络" class="headerlink" title="神经网络"></a>神经网络</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import KPU as kpu</span><br><span class="line"></span><br><span class="line">task = kpu.load(&quot;/sd/facedetect.kmodel&quot;) # 模型SD卡上</span><br><span class="line"></span><br><span class="line">fmap = kpu.forward(task, img)		# 返回一个列表，列表值对应概率</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>开发板</tag>
        <tag>k210</tag>
      </tags>
  </entry>
  <entry>
    <title>未整理</title>
    <url>/2022/solved/%E6%9C%AA%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">help me a lot, heartfully thanks!!!</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p> <a href="https://blog.csdn.net/qq_39466755/article/details/78434547">(109条消息) 交叉编译错误make: arm-none-linux-gnueabi-gcc：命令未找到 /bin/sh: 1: arm-none-linux-gnueabi-gcc: not found问题解决_yhlvhl8487的博客-CSDN博客_arm-none-linux-gnueabi-gcc:命令未找到</a> </p>
<p> <a href="https://blog.csdn.net/qq_36393978/article/details/117695708">(109条消息) 新版本gcc(gcc10.x)编译Linux内核，错误:multiple definition of `yylloc‘_Imagine Miracle的博客-CSDN博客</a> </p>
<p> <a href="https://blog.csdn.net/xiandang8023/article/details/124750391">(109条消息) usr/bin/ld: scripts/dtc/dtc-parser.tab.o:(.bss+0x10): multiple definition of ‘yylloc‘； scripts/dtc/d_梅尔文.古的博客-CSDN博客</a> </p>
<p> <a href="https://blog.csdn.net/p1279030826/article/details/112912011">(109条消息) 【问题解决】报错：unable to execute ‘swig‘: No such file or directory_丨匿名用户丨的博客-CSDN博客_unable to execute ‘swig’: no such file or director</a> </p>
<p> <a href="https://blog.csdn.net/q936889811/article/details/80783427">(109条消息) pycharm ModuleNotFoundError: No module named ‘distutils.core‘_柔于似水的博客-CSDN博客</a> </p>
<p> <a href="https://linux.cn/article-14878-1.html">技术|修复 Ubuntu Linux 中 “Command ‘python’ not found” 的错误</a> </p>
<p> <a href="https://blog.csdn.net/wanpengpenga/article/details/122313358">(109条消息) 编译U-Boot DTB 时报错 syntax error； FATAL ERROR: Unable to parse input tree_非攻墨门的博客-CSDN博客</a> </p>
<p> <a href="https://blog.csdn.net/weixin_42912498/article/details/108443386">(109条消息) linux安装库时报错error: command ‘x86_64-linux-gnu-gcc‘ failed with exit status 1_凤舞无夜的博客-CSDN博客</a> </p>
<p> <a href="https://blog.csdn.net/p1279030826/article/details/112699149">(109条消息) Linux下切换python版本（python2和python3版本切换）_丨匿名用户丨的博客-CSDN博客</a> </p>
<p> <a href="https://blog.csdn.net/p1279030826/article/details/112888891">(109条消息) 【问题解决】报错：scripts/dtc/pylibfdt/libfdt_wrap.c:149:11: fatal error: Python.h: 没有那个文件或目录_丨匿名用户丨的博客-CSDN博客</a> </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
      </tags>
  </entry>
  <entry>
    <title>报错binsh 1 bc not found</title>
    <url>/2022/solved/%E6%8A%A5%E9%94%99binsh%201%20bc%20not%20found/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">kernel编译报错</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><code>sudo apt-get install bc</code></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>报错binsh python not found</title>
    <url>/2022/solved/%E6%8A%A5%E9%94%99binsh%20python%20not%20found/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>   <a href="https://www.its301.com/article/qq_35067322/104917602">/bin/sh: python: not found 问题的解决_码农小胖哥的博客-程序员ITS301 - 程序员ITS301</a> </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>报错binsh 1 cc not found</title>
    <url>/2022/solved/%E6%8A%A5%E9%94%99binsh%201%20cc%20not%20found/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">`sudo apt-get install gcc`</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p> 表示缺gcc。</p>
<p><code>/bin/sh:1:***:not found</code>类型的都是需要安装解决</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>执行make menuconfig时报错</title>
    <url>/2022/solved/%E6%89%A7%E8%A1%8Cmake%20menuconfig%E6%97%B6%E6%8A%A5%E9%94%99/</url>
    <content><![CDATA[<div class="note success">
            <div align="center"> 在执行make menuconfig时出现报错 </div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>表示缺libncurses5-dev库</p>
<p><code>sudo apt-get install libncurses5-dev</code></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>linux</tag>
        <tag>make</tag>
      </tags>
  </entry>
  <entry>
    <title>【linux】常用指令</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E3%80%90linux%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><h4 id="tar压缩或解压"><a href="#tar压缩或解压" class="headerlink" title="tar压缩或解压"></a>tar压缩或解压</h4><p>压缩或解压<code>***.tar</code>，语句为<code>tar [指令名]+f [文件名]</code></p>
<h5 id="独立命令"><a href="#独立命令" class="headerlink" title="独立命令"></a>独立命令</h5><div class="table-container">
<table>
<thead>
<tr>
<th>c</th>
<th>x</th>
<th>t</th>
<th>r</th>
<th>u</th>
</tr>
</thead>
<tbody>
<tr>
<td>压缩</td>
<td>解压</td>
<td>查看内容，列出所有文件</td>
<td>向压缩文件末尾追加指定文件</td>
<td>更新原压缩包指定文件</td>
</tr>
<tr>
<td><code>tar -cf all.tar *.jpg</code></td>
<td><code>tar -xf all.tar</code></td>
<td><code>tar -tf all.tar</code></td>
<td><code>tar -rf all.tar *.gif</code></td>
<td><code>tar -uf all.tar logo.gif</code></td>
</tr>
</tbody>
</table>
</div>
<h5 id="可选命令"><a href="#可选命令" class="headerlink" title="可选命令"></a>可选命令</h5><div class="table-container">
<table>
<thead>
<tr>
<th>z</th>
<th>j</th>
<th>Z</th>
<th>v</th>
<th>O</th>
</tr>
</thead>
<tbody>
<tr>
<td>压缩或解压<code>***.gz</code></td>
<td>压缩或解压<code>***.bz2</code></td>
<td>压缩或解压<code>.Z</code></td>
<td>显示所有过程</td>
<td>将所有文件解压到标准输出</td>
</tr>
</tbody>
</table>
</div>
<p>使用示例（以<code>***.gz</code>为例）：压缩：<code>tar –czf jpg.tar.gz *.jpg</code>，解压：<code>tar -xzvf file.tar.gz</code></p>
<h5 id="必须要加f"><a href="#必须要加f" class="headerlink" title="必须要加f"></a>必须要加f</h5><h4 id="其他压缩或解压"><a href="#其他压缩或解压" class="headerlink" title="其他压缩或解压"></a>其他压缩或解压</h4><div class="table-container">
<table>
<thead>
<tr>
<th><code>***.rar</code></th>
<th><code>***.zip</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>rar a jpg.rar *.jpg</code></td>
<td><code>zip jpg.zip *.jpg</code></td>
</tr>
<tr>
<td><code>unrar e file.rar</code></td>
<td><code>unzip file.zip</code></td>
</tr>
</tbody>
</table>
</div>
<p><a href="https://blog.csdn.net/imyang2007/article/details/7634470">感谢链接</a></p>
<h4 id="文件操作-1"><a href="#文件操作-1" class="headerlink" title="文件操作"></a>文件操作</h4><div class="table-container">
<table>
<thead>
<tr>
<th>新建文件夹</th>
<th>复制文件</th>
</tr>
</thead>
<tbody>
<tr>
<td>mkdir</td>
<td>cp</td>
</tr>
</tbody>
</table>
</div>
<h4 id="编辑文件"><a href="#编辑文件" class="headerlink" title="编辑文件"></a>编辑文件</h4><p>nano，vi</p>
<p>撤销：M-U —&gt; alt+U</p>
<h2 id="源"><a href="#源" class="headerlink" title="源"></a>源</h2><p>报错<code>Could not connect to archive.ubuntu.com:80</code></p>
<p> <a href="https://blog.csdn.net/weixin_40520161/article/details/90290083">(109条消息) Ubuntu sudo apt update报错：无法连接上 cn.archive.ubuntu.com:80 (123.129.214.98)。 - connect (111: 拒绝连接)_weixin_40520161的博客-CSDN博客</a> </p>
<p> <a href="https://mirrors.tuna.tsinghua.edu.cn/help/ubuntu/">ubuntu | 镜像站使用帮助 | 清华大学开源软件镜像站 | Tsinghua Open Source Mirror</a> </p>
<p> <a href="https://www.cnblogs.com/lizebiao/p/12875410.html">无法发起与 cn.archive.ubuntu.com:80 (2001:67c:1562::18) 的连接 - connect (101: 网络不可达) - 嫖老板 - 博客园 (cnblogs.com)</a> </p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p> <a href="https://blog.csdn.net/liudsl/article/details/79200134">(109条消息) apt 和 apt-get的区别_御龙冀人的博客-CSDN博客_apt apt-get</a> </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>理工方向</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>【numpy】语法基础</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81/%E3%80%90numpy%E3%80%91%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  ravel()把数组拉成一维数组</p>
<p>asarray节省内存的复制数组</p>
<p>concatenate拼接数组</p>
<p>searchsorted搜索排序</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>深度学习</tag>
        <tag>numpy</tag>
        <tag>代码</tag>
      </tags>
  </entry>
  <entry>
    <title>【torch】语法基础</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E4%BB%A3%E7%A0%81/%E3%80%90torch%E3%80%91%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="tensor处理"><a href="#tensor处理" class="headerlink" title="tensor处理"></a>tensor处理</h2><h4 id="生成tensor"><a href="#生成tensor" class="headerlink" title="生成tensor"></a>生成tensor</h4><p>torch.rand，</p>
<h4 id="torch-cat合并数组"><a href="#torch-cat合并数组" class="headerlink" title="torch.cat合并数组"></a><code>torch.cat</code>合并数组</h4><h4 id="tolist数组转list类型"><a href="#tolist数组转list类型" class="headerlink" title=".tolist数组转list类型"></a><code>.tolist</code>数组转list类型</h4><h4 id="torch-cumsum累加"><a href="#torch-cumsum累加" class="headerlink" title="torch.cumsum累加"></a>torch.cumsum累加</h4><h3 id="形状改变"><a href="#形状改变" class="headerlink" title="形状改变"></a>形状改变</h3><p>sequeeze，[…,:,None]</p>
<p>detach分离出来，不带梯度</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>深度学习</tag>
        <tag>代码</tag>
        <tag>torch</tag>
      </tags>
  </entry>
  <entry>
    <title>【python】进阶总结</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%AF%AD%E8%A8%80/%E3%80%90python%E3%80%91%E8%BF%9B%E9%98%B6%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h4 id="zip"><a href="#zip" class="headerlink" title="zip"></a>zip</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">b </span><br></pre></td></tr></table></figure>
<h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>python</tag>
        <tag>library</tag>
        <tag>理工方向</tag>
        <tag>语言</tag>
      </tags>
  </entry>
  <entry>
    <title>【V831】开发板上手</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E8%BD%AF%E4%BB%B6/%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/%E3%80%90V831%E3%80%91%E5%BC%80%E5%8F%91%E6%9D%BF%E4%B8%8A%E6%89%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">V831是</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="烧录系统"><a href="#烧录系统" class="headerlink" title="烧录系统"></a>烧录系统</h2><p> <a href="https://wiki.sipeed.com/hardware/zh/maixII/M2/flash.html">MaixII-Dock 烧录系统 - Sipeed Wiki</a> </p>
<p>烧录过系统之后，把SD卡插上，type-C上电之后，屏幕就会显示图标了。</p>
<h2 id="运行程序"><a href="#运行程序" class="headerlink" title="运行程序"></a>运行程序</h2><p>​    上电后，自动运行<code>main.py</code>，修改<code>main.py</code>即可。运行代码与<code>k210</code>一致，传承自<code>openmv</code>。</p>
<p>​    文件构成：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">. --&gt; b[root]</span><br><span class="line">. --&gt; c[home]</span><br><span class="line">b--&gt;d[模型等文件]</span><br><span class="line">b--&gt;e[wpa_supplicant.conf]</span><br><span class="line">b--&gt;f[app]</span><br><span class="line"></span><br><span class="line">c--&gt;g[main.py]</span><br><span class="line">c--&gt;h[run.py]</span><br><span class="line">c--&gt;i[smart]</span><br></pre></td></tr></table></figure>
<h3 id="控制方式一：命令行"><a href="#控制方式一：命令行" class="headerlink" title="控制方式一：命令行"></a>控制方式一：命令行</h3><p>​    可以用串口调试工具<code>putty</code>，把他当作<code>Linux</code>系统即可。</p>
<h4 id="修改文本文件"><a href="#修改文本文件" class="headerlink" title="修改文本文件"></a>修改文本文件</h4><p><code>vim [文件名]</code>打开编辑界面</p>
<h4 id="重启或关机"><a href="#重启或关机" class="headerlink" title="重启或关机"></a>重启或关机</h4><p>重启：<code>reboot</code>，关机：<code>poweroff</code></p>
<h4 id="导入文件"><a href="#导入文件" class="headerlink" title="导入文件"></a>导入文件</h4><p>​    重新用读卡器插电脑上后，报错无法打开。</p>
<p>​    但是可以用<code>V831</code>的<code>OTG</code>口，连接电脑会显示U盘。可以直接复制文件进去。</p>
<h3 id="控制方式二：maixpy3-jupyter"><a href="#控制方式二：maixpy3-jupyter" class="headerlink" title="控制方式二：maixpy3+jupyter"></a>控制方式二：maixpy3+jupyter</h3><p> <a href="https://wiki.sipeed.com/soft/maixpy3/zh/tools/0.MaixII-Dock.html">通过 IDE 连接 MaixII-Dock - Sipeed Wiki</a> </p>
<p> <a href="https://wiki.sipeed.com/soft/maixpy3/zh/tools/maixsense.html">使用 MaixPy3 IDE 连接 MaixSense - Sipeed Wiki</a> </p>
<h2 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h2><p>见附件<code>first.ipynb</code></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>软件</tag>
        <tag>V831</tag>
        <tag>开发板</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm修改快捷键</title>
    <url>/2022/solved/pycharm%E4%BF%AE%E6%94%B9%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">在file --> settings -- keymap中![1668304724550](https://s1.xptou.com/2023/01/19/63c91bc926234.png)</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>可以在里面关键词搜索，也可以找对应分类。</p>
<p>点击搜索栏同行的笔，可以进行修改。</p>
<p>我修改的包括</p>
<ul>
<li>运行代码 —&gt; <code>ctrl+shift+caps lock</code></li>
<li>debug代码 —&gt; <code>ctrl+shift+Q</code></li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>【nerf】Point-NeRF笔记</title>
    <url>/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">用点云表示nerf</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  point-nerf</p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/Users\DELL\AppData\Roaming\Typora\typora-user-images\1658151343476.png" alt="1658151343476" style="zoom: 33%;"></p>
<ul>
<li><p>继承Nerf和深度多视图立体方法的优点</p>
</li>
<li><p>比Nerf快30倍</p>
</li>
<li>可以与其他3D重建方法结合</li>
</ul>
<hr>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/Users\DELL\AppData\Roaming\Typora\typora-user-images\1658153159758.png" alt="1658153159758" style="zoom:33%;"></p>
<ul>
<li>用0.2秒从三个输入视图生成点云</li>
</ul>
<hr>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/Users\DELL\AppData\Roaming\Typora\typora-user-images\1658153560472.png" alt="1658153560472" style="zoom:33%;"></p>
<ul>
<li>用20-40min训练得到的效果与Nerf训练20+hour 的效果相当甚至更好</li>
</ul>
<h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ul>
<li>基于点云    P点：p位置，f神经特征向量（ 局部3D场景信息 ），γ位于表面的可能性0-1</li>
<li>修剪和生长</li>
<li>可以对接各种获得稠密点云的方法，而不仅仅是MVSNet。 </li>
</ul>
<h2 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h2><ul>
<li>输入照片 —&gt; MVS生成深度图 —&gt; 获得点云p、γ —&gt; 渲染新视角（point-nerf） —&gt; 更新点云</li>
</ul>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dda21ed9.png" alt="1658128325205"> </p>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><h3 id="MVS"><a href="#MVS" class="headerlink" title="MVS"></a>MVS</h3><p> MVSnet:从非结构化多视角立体中推断深度<br>网络输入：1张参考图像+N张原图像（从其他视角观察同一物体的图像），每张图像对应的相机内参和外参<br>网络输出：概率图+优化深度图，在后处理中使用概率图对优化深度图进行过滤 </p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91de33f778.png" alt="1658194855269"></p>
<h3 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h3><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><p> <a href="https://blog.csdn.net/qq_28053189/article/details/74898110">(96条消息) 从照片的三维重建（3D Reconstruction）——MVS系列（１）_yuboona的博客-CSDN博客_mvs算法</a> </p>
<p> <a href="https://blog.csdn.net/weeeeeida/article/details/101726093">(96条消息) SFM 与MVS的区别_weeeeeida的博客-CSDN博客_sfm和mvs</a> </p>
<p> <a href="https://blog.csdn.net/weixin_43013761/article/details/102852209?spm=1001.2014.3001.5502">(96条消息) 3D点云重建0-00：MVSNet(R-MVSNet)-目录-史上最新无死角讲解_江南才尽，年少无知！的博客-CSDN博客</a> </p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol>
<li>第一步获取稠密点云的方法不只MVS（6.4实验：用colmap点云转化到point-nerf，200k；提供极端示例，用非常稀疏的初始点云）</li>
<li>大规模3D场景的评估（ScanNet）</li>
<li>高效的临近神经点查询</li>
<li>高效的渲染方法</li>
</ol>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/Users\DELL\AppData\Roaming\Typora\typora-user-images\1658154067831.png" alt="1658154067831" style="zoom:33%;"></p>
<ol>
<li>点云可能适合3D建模实体</li>
</ol>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ul>
<li>[x] 啥是MVS<ul>
<li>[ ] 咋生成初始点云的</li>
<li>[x] 为啥不能直接用，或者改进，或者用其他的（因为只有深度信息）</li>
</ul>
</li>
<li>[x] 篇尾总结</li>
<li>[ ] point-nerf渲染：自己对自己没有影响吗？</li>
<li>[ ] f到底是啥</li>
<li>[ ] colmap咋就有点云了呢</li>
</ul>
<h2 id="PointNerf"><a href="#PointNerf" class="headerlink" title="PointNerf"></a>PointNerf</h2><p><strong>体素渲染</strong></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91de65809a.png" alt="在这里插入图片描述"> </p>
<p>c:像素点颜色，M:采样点个数，σ:体密度， τ:遮挡后剩余光， Δ:相邻样本距离，r:角度</p>
<hr>
<p><strong>输入输出</strong></p>
<p>​    传统的NeRF模型直接利用MLP对光线上的采样点查询其辐射值r和体密度σ，而Point-NeRF对每个采样点，查询其在给定半径R（论文中没说取啥值）中的K个点，以采样点位置x，光线方向d以及K个点云作为输入，输出其辐射值和体密度。</p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91de91db5f.png" alt="在这里插入图片描述"> </p>
<hr>
<h3 id="1-计算"><a href="#1-计算" class="headerlink" title="1. 计算 "></a>1. 计算 <img src="https://s1.xptou.com/2023/01/19/63c91deede1cf.gif" alt="f_{i,x}"></h3><p> <img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/gif-1667310098644.gif" alt="f_{i,x}"> :点云 <img src="https://s1.xptou.com/2023/01/19/63c91df18d336.gif" alt="p_{i}"> 对于采样点位置 x 的特征向量，<img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/gif.gif" alt="p_{i}"> : 点云特征向量，x: 采样点位置， <img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/gif.gif" alt="p_{i}">代表点云 <img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/gif.gif" alt="p_{i}"> 到采样点 x 的相对位置 </p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91df4518ff.png" alt="在这里插入图片描述"> </p>
<h3 id="2-计算"><a href="#2-计算" class="headerlink" title="2. 计算 "></a>2. 计算 <img src="https://s1.xptou.com/2023/01/19/63c91df6dfbb4.gif" alt="f_{x}"></h3><p><img src="https://s1.xptou.com/2023/01/19/63c91df6dfbb4.gif" alt="f_{x}">：采样点的渲染后的特征向量，包括周围点的影响</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91dfc27208.png" alt="在这里插入图片描述"> </p>
<h3 id="3-计算辐射值r"><a href="#3-计算辐射值r" class="headerlink" title="3. 计算辐射值r"></a>3. 计算辐射值r</h3><p> <img src="https://s1.xptou.com/2023/01/19/63c91dffd4831.png" alt="在这里插入图片描述"> </p>
<p>​    d是视角，R是多层感知器</p>
<h3 id="4-计算体密度σ"><a href="#4-计算体密度σ" class="headerlink" title="4. 计算体密度σ"></a>4. 计算体密度σ</h3><p> <img src="https://s1.xptou.com/2023/01/19/63c91e02ac637.png" alt="在这里插入图片描述"> </p>
<p>T是mlp</p>
<hr>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e072d56d.png" alt="在这里插入图片描述"> </p>
<h2 id="初始点云"><a href="#初始点云" class="headerlink" title="初始点云"></a>初始点云</h2><h3 id="获取图像深度"><a href="#获取图像深度" class="headerlink" title="获取图像深度"></a>获取图像深度</h3><p><img src="https://s1.xptou.com/2023/01/19/63c91e0a28c85.png" alt="img"> </p>
<p>G是MVSnet，可以理解成 3D CNN模块 </p>
<p> I是原图像，Φ是摄像机参数； additional neighboring views ( we use two additional views in most cases. )</p>
<h3 id="获取特征f"><a href="#获取特征f" class="headerlink" title="获取特征f"></a>获取特征f</h3><p> 将点云投影到reference image的特征图上，将投影点对应的特征向量（不同尺度下特征的聚合）作为点云的特征向量 </p>
<p><img src="https://img-blog.csdnimg.cn/68593312927546f7820fda1c571d83c9.png" alt="img" style="zoom:33%;"> </p>
<p>G是二维CNN（  带有3个下采样层的VGG网络 ）</p>
<p>向量是56 （ 8 + 16 + 32 ）通道， 最终的每个点的神经特征是59 通道的向量。  </p>
<h2 id="剪枝和生长"><a href="#剪枝和生长" class="headerlink" title="剪枝和生长"></a>剪枝和生长</h2><p> 初始的点云往往有空洞或离群点，这会影响到渲染质量， 文章发现直接优化现存点的位置会让训练不稳定并且并不能填补大空洞 。</p>
<h3 id="剪枝"><a href="#剪枝" class="headerlink" title="剪枝"></a>剪枝</h3><p>γ：用sparsity loss优化，趋近于0或1</p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e0cc91d8.png" alt="在这里插入图片描述"> </p>
<p>每10000次迭代就删去γ &lt;0.1的点</p>
<h3 id="生长"><a href="#生长" class="headerlink" title="生长"></a>生长</h3><p>计算每条光线遮挡值最大的点</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91e0f52666.png" alt="在这里插入图片描述"> </p>
<p>如果<img src="https://s1.xptou.com/2023/01/19/63c91e1219ded.png" alt="img"> </p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e158655c.png" alt="img">作为该点到它最近的神经点的距离</p>
<p>保证离表面近，离其他点远。</p>
<h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>Lrender：</p>
<p><img src="/2022/work/nerf/%E3%80%90nerf%E3%80%91Point-NeRF%E7%AC%94%E8%AE%B0/Users\DELL\AppData\Roaming\Typora\typora-user-images\1658150505789.png" alt="1658150505789" style="zoom: 50%;"></p>
<p>Lsparse：</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91e0cc91d8.png" alt="在这里插入图片描述"></p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91e1a5fd7f.png" alt="在这里插入图片描述"> </p>
<p>论文中采取 a = 2e-3</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
        <tag>Point-NeRF</tag>
      </tags>
  </entry>
  <entry>
    <title>github的github.io项目打不开，显示404</title>
    <url>/2022/solved/github%E7%9A%84github.io%E9%A1%B9%E7%9B%AE%E6%89%93%E4%B8%8D%E5%BC%80/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="问题出现"><a href="#问题出现" class="headerlink" title="问题出现"></a>问题出现</h2><p>先连接不到github，然后用steam++连接上了，然后出现这种情况。</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>通常直接把你的加速器关闭就行了</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>github</tag>
        <tag>solved</tag>
      </tags>
  </entry>
  <entry>
    <title>【钢琴】织体类型</title>
    <url>/2022/library/inte/%E3%80%90%E9%92%A2%E7%90%B4%E3%80%91%E7%BB%87%E4%BD%93%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p><img src="https://s1.xptou.com/2023/01/19/63c904eec8545.png" alt="1666968516628"></p>
<p><img src="https://s1.xptou.com/2023/01/19/63c904f247120.png" alt="1667918446434"></p>
<p>2536嗨</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>inte</tag>
        <tag>钢琴</tag>
      </tags>
  </entry>
  <entry>
    <title>【算法】贝叶斯优化</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95/%E3%80%90%E7%AE%97%E6%B3%95%E3%80%91%E8%B4%9D%E5%8F%B6%E6%96%AF%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<div class="note success">
            <div align="center"> 这篇blog参考github上一个基于高斯过程回归的贝叶斯优化开源项目(python)：https://github.com/fmfn/BayesianOptimization </div><p> <strong>AutoML</strong> ⊃ <strong>BO</strong> ⊃ <strong>SMBO</strong> ⊃ <strong>{GPR, TPE}</strong> </p>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="贝叶斯优化器的介绍"><a href="#贝叶斯优化器的介绍" class="headerlink" title="贝叶斯优化器的介绍"></a>贝叶斯优化器的介绍</h2><p>  贝叶斯优化在不知道目标函数（黑箱函数）长什么样子的情况下，通过猜测黑箱函数长什么样，来求一个可接受的最大值。和网格搜索相比，优点是迭代次数少(节省时间)，粒度可以到很小，缺点是不容易找到全局最优解。<br>  贝叶斯优化流程图如下：</p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91592de9f7.png" alt="在这里插入图片描述"> </p>
<p>贝叶斯优化有两个核心过程，先验函数(Prior Function,PF)与采集函数(Acquisition Function,AC)，采集函数也可以叫效能函数(Utility Funtcion)，但一般还是称呼为采集函数，见下面引用论文A Tutorial on Bayesian Optimization of Expensive Cost Functions, with Application to Active User Modeling and Hierarchical Reinforcement Learning的话。PF主要利用高斯过程回归(GPR（高斯分布） vs. TPE（好成绩比坏成绩）)；AC主要包括EI，PI，UCB这几种方法，同时exploration与exploitation的平衡，也是通过AC来完成的。</p>
<h2 id="采集函数-Acquisition-Function-AC"><a href="#采集函数-Acquisition-Function-AC" class="headerlink" title="采集函数(Acquisition Function,AC)"></a>采集函数(Acquisition Function,AC)</h2><p>  常见的采集函数有下面三种，UCB，PI，EI，先介绍最好理解的UCB。</p>
<h3 id="UCB-Upper-confidence-bound"><a href="#UCB-Upper-confidence-bound" class="headerlink" title="UCB(Upper confidence bound)"></a>UCB(Upper confidence bound)</h3><p>  $UCB=\mu (x)+k\sigma (x)$，k为调节参数，直观地理解为上置信边界。</p>
<h3 id="PI-probability-of-improvement"><a href="#PI-probability-of-improvement" class="headerlink" title="PI(probability of improvement)"></a>PI(probability of improvement)</h3><p>​    $P I(x)=P(f(x) \geq f(x^{+})+U)=\Phi(\frac{\mu(x)-f(x^{+})-v}{\sigma(x)})$<br>​    超参数 $v$ 用于调节exploitation与exploitation，$v=0$  更倾向于收敛到$f(x^{+})$附近，$\Phi(\cdot)$表示正态累计分布函数 ，$f(x^{+})$表示现有的最大值 。<br> 其原理就是找到未知点的函数值比$f(x^{+})$大的概率，取这些点中概率最大的点，具体比$f(x^{+})$ 大多少不考虑，这里通过Z-scores标准化法，让每个未知点函数值大于$f(x^{+})$ 的概率可以进行比较。  </p>
<p>​    Z-scores标准化法，$ \frac{x \mu} \sigma$，x为观察点，$\mu$为所有观察点的均值，$\sigma$为所有观察点标准差，$ \frac{x \mu} \sigma$ 的概率密度函数符合标准正态分布。 </p>
<h3 id="EI-Expected-improvement"><a href="#EI-Expected-improvement" class="headerlink" title="EI(Expected improvement)"></a>EI(Expected improvement)</h3><p>​    后续再补上</p>
<h2 id="贝叶斯优化的一个模拟实验"><a href="#贝叶斯优化的一个模拟实验" class="headerlink" title="贝叶斯优化的一个模拟实验"></a>贝叶斯优化的一个模拟实验</h2><pre><code> 假设我们想知道下面这个黑箱函数在(-2,10)的最大值，$f(x)=e^&#123;-(x-2)^&#123;2&#125;&#125;+e^&#123;\frac&#123;-(x-6)^&#123;2&#125;&#125;&#123;10&#125;&#125;+\frac&#123;1&#125;&#123;x^&#123;2&#125;+1&#125;$，最大值大概是14，我们假定找到一个点其函数值大于13，就已经可以接受了，返回该函数值。
</code></pre><p> <img src="https://s1.xptou.com/2023/01/19/63c91595e4eff.png" alt="img"> </p>
<h3 id="探索-exploration-与利用-exploitation"><a href="#探索-exploration-与利用-exploitation" class="headerlink" title="探索(exploration)与利用(exploitation)"></a>探索(exploration)与利用(exploitation)</h3><p>  探索(exploration)：简单来说就是尽量选择远离已知点的点为下一次用于迭代的参考点，即尽量探索未知的区域，点的分布会尽可能的平均。<br>  利用(exploitation)：简单来说就是尽量选择靠近已知点的点为下一次用于迭代的参考点，即尽量挖掘已知点周围的点，点的分布会出现一个密集区域，容易进入局部最大。</p>
<p>​    在上文提到的github项目中，通过kappa这个参数平衡探索和利用，如上，上面的图kappa=0.1，下面的图kappa=10，我们下面的代码取kappa等于1.96，即U C B = μ ( x ) + 1.96 σ ( x ) UCB=\mu (x)+1.96\sigma (x)UCB=μ(x)+1.96σ(x)，github示例中kappa取的是中间值5，这里取1.96是为了让下面演示贝叶斯优化过程中，UCB就是95%置信区间的上界，更好理解UCB是什么，详细请看下面的贝叶斯优化过程。</p>
<p> <img src="https://s1.xptou.com/2023/01/19/63c91599c3759.gif" alt="tt0.top-284371"></p>
<p>虚线表示高斯回归过程求得的未知点的均值$\mu$ ，蓝色区域表示标准差$ \sigma$</p>
<h2 id="贝叶斯优化的应用"><a href="#贝叶斯优化的应用" class="headerlink" title="贝叶斯优化的应用"></a>贝叶斯优化的应用</h2><p>  贝叶斯优化器用于调参，可以很快找到一个可以接受的超参数值，和网格搜索相比，优点是迭代次数少(节省时间)，粒度可以到很小，缺点是不容易找到全局最优解。例如我们想调logistic回归的正则化超参数，就把黑箱函数设置成logistic回归，自变量为超参数，因变量为logistic回归在训练集准确度，设置一个可以接受的黑箱函数因变量取值，例如0.95，得到的超参数结果就是可以让logistic回归分类准确度超过0.95的一个超参数。</p>
<p><a href="https://blog.csdn.net/Leon_winter/article/details/86604553">原文链接</a></p>
<p> <a href="https://zhuanlan.zhihu.com/p/459110020">通俗科普文：贝叶斯优化与SMBO、高斯过程回归、TPE - 知乎 (zhihu.com)</a> </p>
<h2 id="Acquisition-function-Expected-Improvement-EI"><a href="#Acquisition-function-Expected-Improvement-EI" class="headerlink" title="Acquisition function / Expected Improvement (EI)"></a>Acquisition function / Expected Improvement (EI)</h2><h2 id="python实现方法"><a href="#python实现方法" class="headerlink" title="python实现方法"></a>python实现方法</h2><p>python有3个库支持，bayes_opt、hyperopt、optuna，以下详细介绍<strong>bayes_opt</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bayes_opt <span class="keyword">import</span> BayesianOptimization</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">a, b, c</span>):  <span class="comment"># 定义函数，可以输入多个数，输出保证一个</span></span><br><span class="line">	<span class="keyword">return</span> a+b+c</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义输入值范围（名称要与函数用的相同）</span></span><br><span class="line">inputs = &#123;<span class="string">&#x27;a&#x27;</span>: (<span class="number">0</span>,<span class="number">1</span>), <span class="string">&#x27;b&#x27;</span>: (<span class="number">2</span>,<span class="number">3</span>), <span class="string">&#x27;c&#x27;</span>: (<span class="number">1</span>,<span class="number">2</span>)&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例化贝叶斯对象</span></span><br><span class="line">opt = BayesianOptimization(run, inputs)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 优化器求解，返回</span></span><br><span class="line"><span class="comment"># 只支持求最大值</span></span><br><span class="line">opt.maximize(init_points=<span class="number">5</span>,</span><br><span class="line">             	n_iter=<span class="number">30</span>, 														acq=init_bayes.get(<span class="string">&#x27;acq&#x27;</span>))	<span class="comment"># AC方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#优化完成，取出最佳参数与最佳分数</span></span><br><span class="line">params_best = opt.<span class="built_in">max</span>[<span class="string">&quot;params&quot;</span>]</span><br><span class="line">score_best = opt.<span class="built_in">max</span>[<span class="string">&quot;target&quot;</span>]</span><br></pre></td></tr></table></figure>
<p><a href="https://blog.csdn.net/weixin_43819931/article/details/125172266">详细参考这篇</a> </p>
<h2 id="用sklearn高斯过程回归"><a href="#用sklearn高斯过程回归" class="headerlink" title="用sklearn高斯过程回归"></a>用sklearn高斯过程回归</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sklearn.gaussian_process <span class="keyword">import</span> GaussianProcessRegressor</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">a=np.random.random(<span class="number">50</span>).reshape(<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line">b=a*<span class="number">2</span>+np.random.random(<span class="number">50</span>).reshape(<span class="number">50</span>,<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 实例化高斯过程对象</span></span><br><span class="line">gaussian=GaussianProcessRegressor()</span><br><span class="line"><span class="comment"># 高斯过程回归</span></span><br><span class="line">gaussian.fit(a,b)</span><br><span class="line"></span><br><span class="line">c=np.linspace(<span class="number">0.1</span>,<span class="number">1</span>,<span class="number">100</span>)</span><br><span class="line">d=gaussian.predict(c.reshape(<span class="number">100</span>,<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>算法</tag>
        <tag>深度学习</tag>
        <tag>贝叶斯</tag>
      </tags>
  </entry>
  <entry>
    <title>【忆阻器】记录</title>
    <url>/2022/work/%E5%BF%86%E9%98%BB%E5%99%A8/%E3%80%90%E5%BF%86%E9%98%BB%E5%99%A8%E3%80%91%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ol>
<li>运放选型</li>
<li>忆阻器封装</li>
</ol>
<h2 id="历程"><a href="#历程" class="headerlink" title="历程"></a>历程</h2><h4 id="2023-3-20"><a href="#2023-3-20" class="headerlink" title="2023.3.20"></a>2023.3.20</h4><p>终于开始了，师姐已经打板了运放测试板（卡尔曼滤波），但是角度读取有问题</p>
<p>我也开始画板（pd），每个接口留出电位器和忆阻器接口，暂时不知运放选型和忆阻器封装</p>
<p>之后再画总板，确定好连接方式</p>
<h4 id="2023-1-17"><a href="#2023-1-17" class="headerlink" title="2023.1.17"></a>2023.1.17</h4><p>需要看忆阻器</p>
<p>了解了忆阻器在 ltspice 里仿真的方法，确定了梯度下降随机搜索方法，</p>
<h4 id="2022-12-03"><a href="#2022-12-03" class="headerlink" title="2022.12.03"></a>2022.12.03</h4><p>看到稚晖君的机器人，才知道 <code>zmp</code> 和 <code>mpc</code>，觉得 <code>mpc</code> 可能有忆阻器的用武之地。后来又简单了解了一下 ，<a href="https://zhuanlan.zhihu.com/p/141871796">一个模型预测控制（MPC）的简单实现 - 知乎 (zhihu.com)</a> 没看完，<code>mpc</code> 和 <code>pid</code> 是同类东西，优势在于控制多条，简单思路了解，还不清楚具体。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>work</tag>
        <tag>忆阻器</tag>
      </tags>
  </entry>
  <entry>
    <title>【css】学习</title>
    <url>/2022/library/inte/%E3%80%90css%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h3 id="插入点击跳转链接"><a href="#插入点击跳转链接" class="headerlink" title="插入点击跳转链接"></a>插入点击跳转链接</h3><h3 id="将同一类型元件的不同css区分开"><a href="#将同一类型元件的不同css区分开" class="headerlink" title="将同一类型元件的不同css区分开"></a>将同一类型元件的不同css区分开</h3><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>inte</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo部署报错spawn failed</title>
    <url>/2022/solved/hexo%E9%83%A8%E7%BD%B2%E6%8A%A5%E9%94%99spawn%20failed/</url>
    <content><![CDATA[<h2 id="报错内容"><a href="#报错内容" class="headerlink" title="报错内容"></a>报错内容</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\Program Files\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:526:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\Program Files\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) </span><br></pre></td></tr></table></figure>
<h2 id="原因分析"><a href="#原因分析" class="headerlink" title="原因分析"></a>原因分析</h2><p> 问题大多是因为git进行push或者hexo d的时候改变了一些.deploy_git文件下的内容。 </p>
<blockquote>
<p>我觉得多数情况是github网络问题，但我没有证据</p>
</blockquote>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p> 把<code>.deploy_git</code>和<code>public</code>直接删除 </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>solved</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>【深度学习工具】tensorboard学习</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E3%80%91tensorboard%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="Tensorboard的工作流程："><a href="#Tensorboard的工作流程：" class="headerlink" title="Tensorboard的工作流程："></a>Tensorboard的工作流程：</h2><ol>
<li>代码运行中，保存数据在文件夹下</li>
<li>浏览器显示</li>
</ol>
<h2 id="自动保存数据"><a href="#自动保存数据" class="headerlink" title="自动保存数据"></a>自动保存数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> torch.utils.tensorboard <span class="keyword">import</span> SummaryWriter</span><br><span class="line"><span class="comment"># 实例化</span></span><br><span class="line">writer = SummaryWriter(<span class="string">&#x27;./path/to/log&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>之后写入各类数据都是在这个文件夹中<code>./path/to/log</code></p>
<ul>
<li>针对数值<code>writer.add_scalar(key, value, global_step=None, walltime=None)</code></li>
</ul>
<p>global_step可以理解为x轴坐标。实例如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> epoch <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>)</span><br><span class="line">    mAP = <span class="built_in">eval</span>(model)</span><br><span class="line">    writer.add_scalar(<span class="string">&#x27;mAP&#x27;</span>, mAP, epoch)</span><br></pre></td></tr></table></figure>
<ul>
<li>存储图像<code>writer.add_image(tag, img_tensor, global_step=None, walltime=None, dataformats=&#39;CHW&#39;)</code>，<code>writer.add_images(tag, img_tensor, global_step=None, walltime=None, dataformats=&#39;NCHW&#39;)</code></li>
</ul>
<h2 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h2><p><code>tensorboard --logdir=./path/to/the/folder --port 8123</code></p>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol>
<li><p>同时显示多组数据</p>
<p>将日志放到同一目录下，同样的语法执行就行。</p>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>深度学习</tag>
        <tag>深度学习工具</tag>
        <tag>tensorboard</tag>
      </tags>
  </entry>
  <entry>
    <title>【verilog】学习</title>
    <url>/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90verilog%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>verilog HDL（Hardware Description Language）</p>
<p>用代码写数字器件的连接 </p>
<p><img src="https://s1.xptou.com/2023/01/19/63c91bbeb61dc.png" alt="image-20230119183007408"> </p>
<p>有两种实现方式</p>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2_1(a, b, s, y); <span class="comment">//模块名、模块接口名</span></span><br><span class="line">    <span class="keyword">input</span> a, b, s;        <span class="comment">// 定义输入端口</span></span><br><span class="line">    <span class="keyword">output</span> y;              <span class="comment">// 定义输出端口</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* s为0时，选择a输出；</span></span><br><span class="line"><span class="comment">        s为1时，选择b输出。*/</span>  </span><br><span class="line">    <span class="keyword">assign</span> y = (s == <span class="number">0</span>) ? a : b;  <span class="comment">//输出信号</span></span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mux2_1(a, b, s, y);</span><br><span class="line">    <span class="keyword">input</span> a, b, s; </span><br><span class="line">    <span class="keyword">output</span> y; </span><br><span class="line">    <span class="keyword">reg</span>  y; <span class="comment">//reg 表示寄存器</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">always</span> @(a, b, s)	<span class="comment">//当有a，b，s中任一值变化，将触发</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">        <span class="keyword">if</span>(!s) y = a;</span><br><span class="line">        <span class="keyword">else</span> y = b;</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">always</span> @(*)	<span class="comment">//当有a，b，s中任一值变化，将触发</span></span><br><span class="line">    switch</span><br><span class="line">    </span><br><span class="line"><span class="keyword">endmodule</span></span><br></pre></td></tr></table></figure>
<h2 id="实例代码解读"><a href="#实例代码解读" class="headerlink" title="实例代码解读"></a>实例代码解读</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> pwm_buzzer(</span><br><span class="line">	<span class="keyword">input</span>				clk		,		<span class="comment">//时钟输入</span></span><br><span class="line">	<span class="keyword">input</span>				rst_n	,		<span class="comment">//复位按键输入</span></span><br><span class="line">	<span class="keyword">input</span>				key_in	,		<span class="comment">//按键输入</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">output</span>	<span class="keyword">reg</span>			buzzer			<span class="comment">//驱动蜂鸣器</span></span><br><span class="line">	);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">wire</span>				press	;		<span class="comment">//线，连接按键标志信号</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//引用按键模块</span></span><br><span class="line">	key_debounce u_key_debounce(</span><br><span class="line">		<span class="variable">.clk</span>			(clk	),</span><br><span class="line">		<span class="variable">.rst_n</span>			(rst_n	),</span><br><span class="line">		<span class="variable">.key</span>			(key_in	),</span><br><span class="line">		<span class="variable">.press</span>			(press	)</span><br><span class="line">	);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义音符时序周期数</span></span><br><span class="line">	<span class="keyword">localparam</span>			M0 	= <span class="number">98800</span>,</span><br><span class="line">						M1	= <span class="number">95600</span>,</span><br><span class="line">						M2	= <span class="number">85150</span>,</span><br><span class="line">						M3	= <span class="number">75850</span>,</span><br><span class="line">						M4	= <span class="number">71600</span>,</span><br><span class="line">						M5  = <span class="number">63750</span>,</span><br><span class="line">						M6	= <span class="number">56800</span>,</span><br><span class="line">						M7	= <span class="number">50600</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//信号定义</span></span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">16</span>:<span class="number">0</span>]		cnt0		;	<span class="comment">//计数每个音符对应的时序周期</span></span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">10</span>:<span class="number">0</span>]		cnt1		;	<span class="comment">//计数每个音符重复次数</span></span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">5</span> :<span class="number">0</span>]		cnt2		;	<span class="comment">//计数曲谱中音符个数</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">16</span>:<span class="number">0</span>]		pre_set		;	<span class="comment">//预装载值</span></span><br><span class="line">	<span class="keyword">wire</span>	[<span class="number">16</span>:<span class="number">0</span>]		pre_div		;	<span class="comment">//占空比</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">10</span>:<span class="number">0</span>]		cishu		;	<span class="comment">//定义不同音符重复不同次数</span></span><br><span class="line">	<span class="keyword">wire</span>	[<span class="number">10</span>:<span class="number">0</span>]		cishu_div	;	<span class="comment">//音符重复次数占空比</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">reg</span> 				flag		;	<span class="comment">//歌曲种类标志：0小星星，1两只老虎</span></span><br><span class="line">	<span class="keyword">reg</span>		[<span class="number">5</span> :<span class="number">0</span>]		YINFU		;	<span class="comment">//定义曲谱中音符个数</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//歌曲种类标志位</span></span><br><span class="line">    <span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span>	<span class="comment">//每个时钟信号触发</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">			flag &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(press) <span class="keyword">begin</span></span><br><span class="line">			flag &lt;= ~flag;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//重设音符的个数</span></span><br><span class="line">	<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n)</span><br><span class="line">			YINFU &lt;= <span class="number">48</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(flag == <span class="number">1&#x27;b1</span>)</span><br><span class="line">			YINFU &lt;= <span class="number">36</span>;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			YINFU &lt;= <span class="number">48</span>;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//计数每个音符的周期，也就是表示音符的一个周期</span></span><br><span class="line">	<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">			cnt0 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(press)</span><br><span class="line">			cnt0 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span>(cnt0 == pre_set - <span class="number">1</span>)</span><br><span class="line">				cnt0 &lt;= <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				cnt0 &lt;= cnt0 + <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//计数每个音符重复次数，也就是表示一个音符的响鸣持续时长</span></span><br><span class="line">	<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">			cnt1 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(press)</span><br><span class="line">			cnt1 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span>(cnt0 == pre_set - <span class="number">1</span>)<span class="keyword">begin</span></span><br><span class="line">				<span class="keyword">if</span>(cnt1 == cishu)</span><br><span class="line">					cnt1 &lt;= <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					cnt1 &lt;= cnt1 + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//计数有多少个音符，也就是曲谱中有共多少个音符</span></span><br><span class="line">	<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">			cnt2 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(press)</span><br><span class="line">			cnt2 &lt;= <span class="number">0</span>;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span>(cnt1 == cishu &amp;&amp; cnt0 == pre_set - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">				<span class="keyword">if</span>(cnt2 == YINFU - <span class="number">1</span>) <span class="keyword">begin</span></span><br><span class="line">					cnt2 &lt;= <span class="number">0</span>;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					cnt2 &lt;= cnt2 + <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//定义音符重复次数</span></span><br><span class="line">    <span class="keyword">always</span> @(*) <span class="keyword">begin</span>		<span class="comment">//当pre_set值变化时触发</span></span><br><span class="line">		<span class="keyword">case</span>(pre_set)</span><br><span class="line">			M0:cishu = <span class="number">242</span>;</span><br><span class="line">			M1:cishu = <span class="number">250</span>;</span><br><span class="line">			M2:cishu = <span class="number">281</span>;</span><br><span class="line">			M3:cishu = <span class="number">315</span>;</span><br><span class="line">			M4:cishu = <span class="number">334</span>;</span><br><span class="line">			M5:cishu = <span class="number">375</span>;</span><br><span class="line">			M6:cishu = <span class="number">421</span>;</span><br><span class="line">			M7:cishu = <span class="number">472</span>;</span><br><span class="line">		<span class="keyword">endcase</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//曲谱定义</span></span><br><span class="line">	<span class="keyword">always</span> @(*) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(flag == <span class="number">1&#x27;b0</span>) <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">case</span>(cnt2)	<span class="comment">//小星星歌谱</span></span><br><span class="line">				<span class="number">0</span> : pre_set = M1;</span><br><span class="line">				<span class="number">1</span> : pre_set = M1;</span><br><span class="line">				<span class="number">2</span> : pre_set = M5;</span><br><span class="line">				<span class="number">3</span> : pre_set = M5;</span><br><span class="line">				<span class="number">4</span> : pre_set = M6;</span><br><span class="line">				<span class="number">5</span> : pre_set = M6;</span><br><span class="line">				<span class="number">6</span> : pre_set = M5;</span><br><span class="line">				<span class="number">7</span> : pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">8</span> : pre_set = M4;</span><br><span class="line">				<span class="number">9</span> : pre_set = M4;</span><br><span class="line">				<span class="number">10</span>: pre_set = M3;</span><br><span class="line">				<span class="number">11</span>: pre_set = M3;</span><br><span class="line">				<span class="number">12</span>: pre_set = M2;</span><br><span class="line">				<span class="number">13</span>: pre_set = M2;</span><br><span class="line">				<span class="number">14</span>: pre_set = M1;</span><br><span class="line">				<span class="number">15</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">16</span>: pre_set = M5;</span><br><span class="line">				<span class="number">17</span>: pre_set = M5;</span><br><span class="line">				<span class="number">18</span>: pre_set = M4;</span><br><span class="line">				<span class="number">19</span>: pre_set = M4;</span><br><span class="line">				<span class="number">20</span>: pre_set = M3;</span><br><span class="line">				<span class="number">21</span>: pre_set = M3;</span><br><span class="line">				<span class="number">22</span>: pre_set = M2;</span><br><span class="line">				<span class="number">23</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">24</span>: pre_set = M5;</span><br><span class="line">				<span class="number">25</span>: pre_set = M5;</span><br><span class="line">				<span class="number">26</span>: pre_set = M4;</span><br><span class="line">				<span class="number">27</span>: pre_set = M4;</span><br><span class="line">				<span class="number">28</span>: pre_set = M3;</span><br><span class="line">				<span class="number">29</span>: pre_set = M3;</span><br><span class="line">				<span class="number">30</span>: pre_set = M2;</span><br><span class="line">				<span class="number">31</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">32</span>: pre_set = M1;</span><br><span class="line">				<span class="number">33</span>: pre_set = M1;</span><br><span class="line">				<span class="number">34</span>: pre_set = M5;</span><br><span class="line">				<span class="number">35</span>: pre_set = M5;</span><br><span class="line">				<span class="number">36</span>: pre_set = M6;</span><br><span class="line">				<span class="number">37</span>: pre_set = M6;</span><br><span class="line">				<span class="number">38</span>: pre_set = M5;</span><br><span class="line">				<span class="number">39</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">40</span>: pre_set = M4;</span><br><span class="line">				<span class="number">41</span>: pre_set = M4;</span><br><span class="line">				<span class="number">42</span>: pre_set = M3;</span><br><span class="line">				<span class="number">43</span>: pre_set = M3;</span><br><span class="line">				<span class="number">44</span>: pre_set = M2;</span><br><span class="line">				<span class="number">45</span>: pre_set = M2;</span><br><span class="line">				<span class="number">46</span>: pre_set = M1;</span><br><span class="line">				<span class="number">47</span>: pre_set = M0;</span><br><span class="line">			<span class="keyword">endcase</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">case</span>(cnt2)	<span class="comment">//两只老虎歌谱</span></span><br><span class="line">				<span class="number">0</span> : pre_set = M1;</span><br><span class="line">				<span class="number">1</span> : pre_set = M2;</span><br><span class="line">				<span class="number">2</span> : pre_set = M3;</span><br><span class="line">				<span class="number">3</span> : pre_set = M1;</span><br><span class="line">				<span class="number">4</span> : pre_set = M1;</span><br><span class="line">				<span class="number">5</span> : pre_set = M2;</span><br><span class="line">				<span class="number">6</span> : pre_set = M3;</span><br><span class="line">				<span class="number">7</span> : pre_set = M1;</span><br><span class="line">				<span class="number">8</span> : pre_set = M3;</span><br><span class="line">				<span class="number">9</span> : pre_set = M4;</span><br><span class="line">				<span class="number">10</span>: pre_set = M5;</span><br><span class="line">				<span class="number">11</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">12</span>: pre_set = M3;</span><br><span class="line">				<span class="number">13</span>: pre_set = M4;</span><br><span class="line">				<span class="number">14</span>: pre_set = M5;</span><br><span class="line">				<span class="number">15</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">16</span>: pre_set = M5;</span><br><span class="line">				<span class="number">17</span>: pre_set = M6;</span><br><span class="line">				<span class="number">18</span>: pre_set = M5;</span><br><span class="line">				<span class="number">19</span>: pre_set = M4;</span><br><span class="line">				<span class="number">20</span>: pre_set = M3;</span><br><span class="line">				<span class="number">21</span>: pre_set = M1;</span><br><span class="line">				<span class="number">22</span>: pre_set = M5;</span><br><span class="line">				<span class="number">23</span>: pre_set = M6;</span><br><span class="line">				<span class="number">24</span>: pre_set = M5;</span><br><span class="line">				<span class="number">25</span>: pre_set = M4;</span><br><span class="line">				<span class="number">26</span>: pre_set = M3;</span><br><span class="line">				<span class="number">27</span>: pre_set = M1;</span><br><span class="line">				<span class="number">28</span>: pre_set = M2;</span><br><span class="line">				<span class="number">29</span>: pre_set = M5;</span><br><span class="line">				<span class="number">30</span>: pre_set = M1;</span><br><span class="line">				<span class="number">31</span>: pre_set = M0;</span><br><span class="line">				</span><br><span class="line">				<span class="number">32</span>: pre_set = M2;</span><br><span class="line">				<span class="number">33</span>: pre_set = M5;</span><br><span class="line">				<span class="number">34</span>: pre_set = M1;</span><br><span class="line">				<span class="number">35</span>: pre_set = M0;</span><br><span class="line">			<span class="keyword">endcase</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">assign</span> pre_div = pre_set &gt;&gt; <span class="number">1</span>;	<span class="comment">//除以2</span></span><br><span class="line">	<span class="keyword">assign</span> cishu_div = cishu * <span class="number">4</span> / <span class="number">5</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//向蜂鸣器输出脉冲</span></span><br><span class="line">	<span class="keyword">always</span> @(<span class="keyword">posedge</span> clk <span class="keyword">or</span> <span class="keyword">negedge</span> rst_n) <span class="keyword">begin</span></span><br><span class="line">		<span class="keyword">if</span>(!rst_n) <span class="keyword">begin</span></span><br><span class="line">			buzzer &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(pre_set != M0) <span class="keyword">begin</span></span><br><span class="line">			<span class="keyword">if</span>(cnt1 &lt; cishu_div) <span class="keyword">begin</span></span><br><span class="line">				<span class="keyword">if</span>(cnt0 &lt; pre_div) <span class="keyword">begin</span></span><br><span class="line">						buzzer &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">				<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">						buzzer &lt;= <span class="number">1&#x27;b0</span>;</span><br><span class="line">				<span class="keyword">end</span></span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">begin</span></span><br><span class="line">				buzzer &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">			<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">end</span></span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			buzzer &lt;= <span class="number">1&#x27;b1</span>;</span><br><span class="line">	<span class="keyword">end</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">endmodule</span></span><br><span class="line">	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>课内知识</tag>
        <tag>verilog</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】选型</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E9%80%89%E5%9E%8B/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="稳压电源"><a href="#稳压电源" class="headerlink" title="稳压电源"></a>稳压电源</h2><h3 id="LDO"><a href="#LDO" class="headerlink" title="LDO"></a>LDO</h3><script type="math/tex; mode=display">
\operatorname{PSRR}=20 \times \log \left(\frac{\text { VOUT_Noise }_{-}}{\text {VIN_Noise }_{-}}\right)</script><ul>
<li>确定输出电压VOUT，建议选择固定输出电压的，不要选有ADJ功能的，这样节省器件，降低干扰。</li>
<li>确定输出电流IOUT，至少留25%余量。</li>
<li>确定压差是否合适，一定要查看规格书上，对应最大电流的最小压差要求。</li>
<li>确认封装，手机上一般用1x1 CSP的LDO</li>
<li>确认PSRR，如果用在低噪声场合，一定要选择高PSRR（80dB以上）的LDO，建议在80dB以上。</li>
<li>如果是电池供电，对续航要求很高，一定要选择IQ低的LDO。</li>
<li>注意LDO的CIN和COUT要求，千万不要错。</li>
<li><p>如果要快速响应，可以选择带偏置电压的LDO。</p>
<p>常见的LDO品牌：TOSHIBA，NXP，ON，ADI，RICON，SGMICRO，ST，TI，WILLSEMI。 </p>
</li>
</ul>
<p><img src="https://s1.xptou.com/2023/01/19/63c915574c773.png" alt="1665935986042"></p>
<h3 id="DCDC"><a href="#DCDC" class="headerlink" title="DCDC"></a>DCDC</h3><p>…</p>
<h2 id="mos"><a href="#mos" class="headerlink" title="mos"></a>mos</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>硬件</tag>
        <tag>选型</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】H桥驱动</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91H%E6%A1%A5%E9%A9%B1%E5%8A%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>​           <img src="https://s1.xptou.com/2023/01/19/63c908728971c.jpg" alt="img">  </p>
<p>​         要使电机运转，必须使对角线上的一对三极管导通。当Q1管和Q4管导通时，电流就从电源正极经Q1从左至右穿过电机，然后再经Q4回到电源负极。该流向的电流将驱动电机顺时针转动。 当Q2管和Q3管导通时，电流就从电源正极经Q3从左至右穿过电机，然后再经Q2回到电源负极。该流向的电流将驱动电机顺时针转动。  </p>
<h3 id="栅极驱动驱动芯片——ir2104"><a href="#栅极驱动驱动芯片——ir2104" class="headerlink" title="栅极驱动驱动芯片——ir2104"></a>栅极驱动驱动芯片——ir2104</h3><p>​         <img src="https://s1.xptou.com/2023/01/19/63c9087619d21.png" alt="img">  </p>
<p>自举二极管D使用与功率开关管相同耐压等级的肖特基二极管 </p>
<p>自举电容的计算</p>
<p>​         <img src="https://s1.xptou.com/2023/01/19/63c9087929f9b.png" alt="img">  </p>
<p>其中<img src="https://s1.xptou.com/2023/01/19/63c9087cc887a.png" alt="img">为MOSFET的门极电荷</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>H桥</tag>
        <tag>硬件</tag>
      </tags>
  </entry>
  <entry>
    <title>【硬件知识】芯片熟悉</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E7%A1%AC%E4%BB%B6/%E3%80%90%E7%A1%AC%E4%BB%B6%E7%9F%A5%E8%AF%86%E3%80%91%E8%8A%AF%E7%89%87%E7%86%9F%E6%82%89/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  IRFB3207：IRF开头的多数都是mos，如 IRFZ44NPbF 、 IRFB4321PbF 、 IRF3205PbF ，当然像irf2104是栅极驱动芯片</p>
<p> MBR20100CT ：mos管形状的肖特基二极管</p>
<p>l7805、6、9，l79xx：79输出负电压</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>嵌入式</tag>
        <tag>library</tag>
        <tag>硬件</tag>
        <tag>芯片</tag>
      </tags>
  </entry>
  <entry>
    <title>【经验积累】网址整理</title>
    <url>/2022/library/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E3%80%90%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF%E3%80%91%E7%BD%91%E5%9D%80%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="论文"><a href="#论文" class="headerlink" title="论文"></a>论文</h2><ol>
<li><a href="https://sci-hub.se/">Sci-Hub: 将知识带给每个人</a> 直接下载，搜得很全</li>
</ol>
<h2 id="电影美剧下载"><a href="#电影美剧下载" class="headerlink" title="电影美剧下载"></a>电影美剧下载</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>经验积累</tag>
        <tag>网址整理</tag>
      </tags>
  </entry>
  <entry>
    <title>【经验积累】论文搜集</title>
    <url>/2022/library/%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF/%E3%80%90%E7%BB%8F%E9%AA%8C%E7%A7%AF%E7%B4%AF%E3%80%91%E8%AE%BA%E6%96%87%E6%90%9C%E9%9B%86/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="已整理"><a href="#已整理" class="headerlink" title="已整理"></a>已整理</h2><ol>
<li><a href="https://sci-hub.se/">Sci-Hub: 将知识带给每个人</a> 真滴好，免费能下载</li>
</ol>
<h2 id="待整理"><a href="#待整理" class="headerlink" title="待整理"></a>待整理</h2><p><strong>如何收集论文</strong></p>
<ol>
<li>学会翻墙，善用搜索引擎</li>
</ol>
<ul>
<li>google scholar: 全部论文都可以看到，但不一定能下载</li>
<li>Arxiv+高级搜索</li>
<li>Github</li>
</ul>
<ol>
<li>以老师及其团队为目标搜索</li>
</ol>
<ul>
<li>通过google scholar或者通过百度上找到他的主页</li>
</ul>
<ol>
<li>知乎和微信的各大公众号</li>
</ol>
<p>如我爱计算机视觉等等，可以看以前发群里的链接都是来自于哪个平台或者学术机构发的</p>
<ol>
<li>会议图书馆</li>
</ol>
<p>IJCAI: <a href="https://ijcai-22.org/main-track-accepted-papers">https://ijcai-22.org/main-track-accepted-papers</a></p>
<p>AAAI:<a href="https://www.aaai.org/Library/library.php">https://www.aaai.org/Library/library.php</a></p>
<p>CVPR/ICCV/ECCV: <a href="https://openaccess.thecvf.com/menu">https://openaccess.thecvf.com/menu</a></p>
<p>IEEE: <a href="https://ieeexplore.ieee.org/Xplore/home.jsp">https://ieeexplore.ieee.org/Xplore/home.jsp</a></p>
<p>ACM: <a href="https://dl.acm.org/">https://dl.acm.org/</a></p>
<p>SIAM: <a href="https://epubs.siam.org/">https://epubs.siam.org/</a></p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>经验积累</tag>
        <tag>论文搜集</tag>
      </tags>
  </entry>
  <entry>
    <title>【深度学习】基础知识：×NN都有些啥</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E3%80%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%9A%C3%97NN%E9%83%BD%E6%9C%89%E4%BA%9B%E5%95%A5/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<div class="table-container">
<table>
<thead>
<tr>
<th>名称</th>
<th>结构</th>
<th>应用</th>
<th>我的理解</th>
</tr>
</thead>
<tbody>
<tr>
<td>DNN</td>
<td>多层MLP全连接层，输入层，隐藏层和输出层</td>
<td>所有</td>
<td>最基础的那个</td>
</tr>
<tr>
<td>CNN</td>
<td>卷积核卷积</td>
<td>图像处理</td>
<td>匹配特征，突出重点</td>
</tr>
<tr>
<td>RNN</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>SNN</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>GNN</td>
<td></td>
<td></td>
</tr>
</tbody>
</table>
</div>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
  <entry>
    <title>pycharm内无法打开cmd</title>
    <url>/2022/solved/pycharm%E5%86%85%E6%97%A0%E6%B3%95%E6%89%93%E5%BC%80cmd/</url>
    <content><![CDATA[<p>setting -&gt; tools -&gt; terminal -&gt; shellpath从powershell改成cmd</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>pycharm</tag>
      </tags>
  </entry>
  <entry>
    <title>能力年表</title>
    <url>/2022/others/%E8%83%BD%E5%8A%9B%E5%B9%B4%E8%A1%A8/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">用纪年法总结记录大学期间学会了什么，干了什么</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="大一上"><a href="#大一上" class="headerlink" title="大一上"></a>大一上</h2><p>年夜饭游戏设计</p>
<p>机械加工制图</p>
<h2 id="大一下"><a href="#大一下" class="headerlink" title="大一下"></a>大一下</h2><ol>
<li>typora</li>
<li>git</li>
<li>pil、cv2</li>
<li>dqn嵌入式AI</li>
<li>虚拟机</li>
<li>烟雾识别的——yolo模型训练、tf和torch的模型转换</li>
<li>pytq</li>
<li>serial读取串口</li>
<li>TextureNet</li>
<li>一些创意</li>
<li>人体姿态识别</li>
<li>树莓派的图传等入门</li>
<li>最小系统板</li>
<li>PCB拼图</li>
<li>hexo博客</li>
</ol>
<h2 id="大二上"><a href="#大二上" class="headerlink" title="大二上"></a>大二上</h2><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>like</tag>
      </tags>
  </entry>
  <entry>
    <title>古诗</title>
    <url>/2022/others/%E5%8F%A4%E8%AF%97/%E5%8F%A4%E8%AF%97/</url>
    <content><![CDATA[<p>总有些古诗触动我，又总会被遗忘， 这里留作纪念。</p>
<h2 id="小松"><a href="#小松" class="headerlink" title="小松"></a>小松</h2><p>杜荀鹤</p>
<blockquote>
<p>自小刺头深草里，而今渐觉出蓬蒿。<br>时人不识凌云木，直待凌云始道高。</p>
</blockquote>
<h2 id="绝句"><a href="#绝句" class="headerlink" title="绝句"></a>绝句</h2><p>志南</p>
<blockquote>
<p>古木阴中系短篷，杖藜扶我过桥东。</p>
<p>沾衣欲湿杏花雨，吹面不寒杨柳风。</p>
</blockquote>
<h2 id="滕王阁序"><a href="#滕王阁序" class="headerlink" title="滕王阁序"></a>滕王阁序</h2><p>王勃</p>
<blockquote>
<p>豫章故郡，洪都新府。星分翼轸，地接衡庐。襟三江而带五湖，控蛮荆而引瓯越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃之榻。雄州雾列，俊采星驰。台隍枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨戟遥临；宇文新州之懿范，襜帷暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电青霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。(豫章故郡 一作：南昌故郡；青霜 一作：清霜)</p>
<p>　　时维九月，序属三秋。潦水尽而寒潭清，烟光凝而暮山紫。俨骖騑于上路，访风景于崇阿。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流丹，下临无地。鹤汀凫渚，穷岛屿之萦回；桂殿兰宫，即冈峦之体势。（天人 一作：仙人；层峦 一作：层台；即冈 一作：列冈；飞阁流丹 一作：飞阁翔丹）</p>
<p>　　披绣闼，俯雕甍，山原旷其盈视，川泽纡其骇瞩。闾阎扑地，钟鸣鼎食之家；舸舰弥津，青雀黄龙之舳。云销雨霁，彩彻区明。落霞与孤鹜齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡之滨，雁阵惊寒，声断衡阳之浦。(轴 通：舳；迷津 一作：弥津；云销雨霁，彩彻区明 一作：虹销雨霁，彩彻云衢)</p>
<p>　　遥襟甫畅，逸兴遄飞。爽籁发而清风生，纤歌凝而白云遏。睢园绿竹，气凌彭泽之樽；邺水朱华，光照临川之笔。四美具，二难并。穷睇眄于中天，极娱游于暇日。天高地迥，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会于云间。地势极而南溟深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍而不见，奉宣室以何年？(遥襟甫畅 一作：遥吟俯畅)</p>
<p>　　嗟乎！时运不齐，命途多舛。冯唐易老，李广难封。屈贾谊于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙以犹欢。北海虽赊，扶摇可接；东隅已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！(见机 一作：安贫；以犹欢 一作：而相欢)</p>
<p>　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠；有怀投笔，慕宗悫之长风。舍簪笏于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨陪鲤对；今兹捧袂，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</p>
<p>　　呜呼！胜地不常，盛筵难再；兰亭已矣，梓泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。<br>　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。<br>　　画栋朝飞南浦云，珠帘暮卷西山雨。<br>　　闲云潭影日悠悠，物换星移几度秋。<br>　　阁中帝子今何在？槛外长江空自流。</p>
</blockquote>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>【nerf】nerf-pytorch</title>
    <url>/2022/work/nerf/%E3%80%90nerf%E3%80%91nerf-pytorch/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">最初的nerf，论文以及代码解读</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="假设前提"><a href="#假设前提" class="headerlink" title="假设前提"></a>假设前提</h2><ul>
<li><p>体素在不同方向的自发光颜色是不一样的</p>
<p><a href="https://blog.csdn.net/qq_41071191/article/details/126659233?spm=1001.2014.3001.5502">NeRF 源码分析解读（五）_面里多加汤的博客-CSDN博客_nerf代码</a> </p>
</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>nerf</tag>
        <tag>work</tag>
      </tags>
  </entry>
  <entry>
    <title>【pip】【conda】常用指令</title>
    <url>/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90pip%E3%80%91%E3%80%90conda%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p>  pip</p>
<ol>
<li><p>咱这个不知道为啥新建虚拟环境后pip版本都过低，需要先<code>python -m pip install --upgrade pip</code></p>
</li>
<li><p>安装指定版本：<code>pip install xxx==1.15</code></p>
</li>
<li><p>源</p>
<p><code>https://pypi.doubanio.com/simple/</code>，<code>https://pypi.mirrors.ustc.edu.cn/simple/</code>，<code>https://pypi.tuna.tsinghua.edu.cn/simple</code></p>
</li>
<li><p>安装torch<code>pip install torch==1.9.0+cu111 torchvision==0.10.0+cu111 torchaudio===0.9.0 -f https://download.pytorch.org/whl/torch_stable.html</code></p>
</li>
<li><p><code>pip install -r requirements.txt</code></p>
</li>
<li><p><a href="https://www.csdn.net/tags/MtjaYg4sMTEwNTItYmxvZwO0O0OO0O0O.html#:~:text=pytorch和cuda 并不是一一对应的 关系 ，一个 pytorch 版本可以有多个 cuda 版本与之对应。,，既可以使用9.2版本的 cuda ，也可以使用10.2版本的 cuda 。 事实上，你在安装 pytorch 时无需考虑自己需要安装">(103条消息) cuda和pytorch的关系 - CSDN</a> </p>
</li>
<li><p><a href="https://blog.csdn.net/dream__1/article/details/122433061">(103条消息) torch_scatter安装_dream__1的博客-CSDN博客_torch_scatter</a> </p>
</li>
</ol>
<h2 id="conda"><a href="#conda" class="headerlink" title="conda"></a>conda</h2><p><a href="https://blog.csdn.net/chenxy_bwave/article/details/119996001">(92条消息) Anaconda conda常用命令：从入门到精通_笨牛慢耕的博客-CSDN博客_anaconda conda命令怎么用</a> </p>
<ul>
<li><p>删除虚拟环境</p>
<p>conda remove —name env_name —all </p>
</li>
<li><p>查看虚拟环境列表</p>
<p>conda info —envs</p>
</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>pip</tag>
        <tag>conda</tag>
        <tag>快捷键和常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title>【win】快捷键</title>
    <url>/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90win%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<div class="note danger">
            <div align="center">多用多记</div>
          </div>
<h2 id="打字"><a href="#打字" class="headerlink" title="打字"></a>打字</h2><ul>
<li>切换中英文标点：<code>ctrl + .</code></li>
</ul>
<h2 id="桌面管理"><a href="#桌面管理" class="headerlink" title="桌面管理"></a>桌面管理</h2><ul>
<li>新建窗口：<code>ctrl+win+D</code></li>
<li>切换窗口：<code>ctrl+win+方向键</code></li>
<li>关闭窗口：<code>ctrl+win+f4</code></li>
<li><strong>可视化管理</strong>：<code>win+tab</code></li>
</ul>
<h2 id="窗口管理"><a href="#窗口管理" class="headerlink" title="窗口管理"></a>窗口管理</h2><ul>
<li>控制窗口：<code>win + 方向键</code></li>
<li>浏览器内切换：<code>ctrl + alt</code></li>
<li>关闭当前应用：<code>alt + f4</code></li>
</ul>
<h2 id="录屏"><a href="#录屏" class="headerlink" title="录屏"></a>录屏</h2><ul>
<li>xbox功能贼多：<code>win + G</code></li>
</ul>
<h2 id="系统辅助"><a href="#系统辅助" class="headerlink" title="系统辅助"></a>系统辅助</h2><ul>
<li>打开设置：<code>win + I</code></li>
<li>打开任务栏应用：<code>win + 数字</code></li>
<li>放大镜：<code>win + (+ =)</code></li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h4 id="everything"><a href="#everything" class="headerlink" title="everything"></a>everything</h4><p>我自己设置的</p>
<ul>
<li>打开（若没有就新建）一个搜索窗口：<code>alt + s</code></li>
<li>关闭：<code>alt + a</code></li>
</ul>
<p>语法和技巧</p>
<p> <a href="https://link.zhihu.com/?target=https%3A//www.voidtools.com/zh-cn/support/everything/searching/">官方中文帮助文档</a> </p>
<ol>
<li>限制关键词出现顺序：<code>*stm*data*</code>（无空格）</li>
<li>左下角有找到的文件数</li>
<li>或：<code>|</code>（无空格）；非：<code>!</code></li>
<li><code>?</code> 占位，表示一个字符；<code>*</code> 占位，表示一个字符串</li>
</ol>
<h2 id="不常用"><a href="#不常用" class="headerlink" title="不常用"></a>不常用</h2><p>同时按fn和esc可以打开键盘音量、亮度等功能</p>
<h2 id="熟知的"><a href="#熟知的" class="headerlink" title="熟知的"></a>熟知的</h2><ul>
<li>切换窗口：<code>alt + tab</code></li>
<li>返回桌面：<code>win + D</code></li>
<li>锁屏：<code>win + L</code></li>
</ul>
<h2 id="强制删除"><a href="#强制删除" class="headerlink" title="强制删除"></a>强制删除</h2><p>总有无法删除的文件，显示正在使用，可以 <code>shift + del</code> 强制删除</p>
<h4 id="2022-12-6"><a href="#2022-12-6" class="headerlink" title="2022.12.6"></a>2022.12.6</h4><ul>
<li><code>win + v</code>打开剪切板</li>
<li><code>win + shift + s</code>截屏</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>快捷键和常用指令</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title>【cmd】常用指令</title>
    <url>/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90cmd%E3%80%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">文章概览</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>   <code>nvidia-smi</code> 查看显卡使用情况</p>
<ul>
<li><h2 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h2></li>
<li><p>cd到别的盘用cd /d D…..</p>
</li>
<li>cd .. 返回上一级</li>
<li>cd \ 返回到根目录</li>
<li>linux cd到windows的盘用<code>cd /mnt/d ...</code>（指windows的linuxi子系统中）<ol>
<li>cd之后接一个空格，其余没有</li>
<li>路径用右斜杠，与windows不同！</li>
</ol>
</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>快捷键和常用指令</tag>
        <tag>cmd</tag>
      </tags>
  </entry>
  <entry>
    <title>【pycharm】快捷键</title>
    <url>/2022/library/%E5%BF%AB%E6%8D%B7%E9%94%AE%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/%E3%80%90pycharm%E3%80%91%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">多用多记</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<ul>
<li><code>ctrl Q</code> 查看提示</li>
<li><code>ctrl shift A</code> 全project查找</li>
<li><code>alt+⬆</code>向上切换函数</li>
<li>收放代码块</li>
<li>展开ctrl + shift + +<ul>
<li>收起ctrl + shift + -</li>
<li>折叠某一点：ctrl + -</li>
<li>展开某一层：ctrl + +</li>
</ul>
</li>
<li><code>shift + shift</code>: 全局查找</li>
</ul>
<h2 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h2><p>我自己设置的</p>
<ul>
<li>run：<code>alt + shift + Q</code></li>
<li>debug：<code>ctrl + shift + Q</code></li>
<li><code>ctrl + 鼠标向上滚轮</code> 前进到下一个位置</li>
<li><code>ctrl + 鼠标向下滚轮</code> 退回到上一个位置</li>
</ul>
<h2 id="搜狗输入法"><a href="#搜狗输入法" class="headerlink" title="搜狗输入法"></a>搜狗输入法</h2><ul>
<li><code>ctrl + .</code> 切换中英文输入法</li>
</ul>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>pycharm</tag>
        <tag>library</tag>
        <tag>快捷键和常用指令</tag>
      </tags>
  </entry>
  <entry>
    <title>【markdown】编写文档</title>
    <url>/2022/library/frontend/%E3%80%90markdown%E3%80%91%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<div class="note warning">
            <div align="center">typora做笔记</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h2 id="进阶表达"><a href="#进阶表达" class="headerlink" title="进阶表达"></a>进阶表达</h2><h3 id="希腊字母"><a href="#希腊字母" class="headerlink" title="希腊字母"></a>希腊字母</h3><p> $\alpha$  <code>$\alpha$</code></p>
<p> <img src="/2022/library/frontend/%E3%80%90markdown%E3%80%91%E7%BC%96%E5%86%99%E6%96%87%E6%A1%A3/v2-e006224a3066540d792b5ecb950aab50_1440w.jpg" alt="img" style="zoom:33%;"> </p>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><p> 输入 <code>```mermaid</code> 然后敲击回车 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">graph TD </span><br><span class="line">%% RL LR</span><br><span class="line">a[qwer] --&gt; b</span><br><span class="line">b&#123;asdf&#125;</span><br><span class="line">a --说明--&gt; c(zxcv)</span><br><span class="line">a .-&gt; b</span><br><span class="line">a --&gt; d</span><br><span class="line">b ==&gt; d((asdf))</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gantt</span><br><span class="line">        dateFormat  YYYY-MM-DD</span><br><span class="line">        title Adding GANTT diagram functionality to mermaid</span><br><span class="line"></span><br><span class="line">        section python仿真验证随机梯度下降</span><br><span class="line">        Completed task            :done,    des1, 2014-01-06,2014-01-08</span><br><span class="line">        Active task               :active,  des2, 2014-01-09, 3d</span><br><span class="line">        Future task               :         des3, after des2, 5d</span><br><span class="line">        Future task2               :         des4, after des3, 5d</span><br><span class="line"></span><br><span class="line">        section Critical tasks</span><br><span class="line">        Completed task in the critical line :crit, done, 2014-01-06,24h</span><br><span class="line">        Implement parser and jison          :crit, done, after des1, 2d</span><br><span class="line">        Create tests for parser             :crit, active, 3d</span><br><span class="line">        Future task in critical line        :crit, 5d</span><br><span class="line">        Create tests for renderer           :2d</span><br><span class="line">        Add to mermaid                      :1d</span><br><span class="line"></span><br><span class="line">        section Documentation</span><br><span class="line">        Describe gantt syntax               :active, a1, after des1, 3d</span><br><span class="line">        Add gantt diagram to demo page      :after a1  , 20h</span><br><span class="line">        Add another diagram to demo page    :doc1, after a1  , 48h</span><br><span class="line"></span><br><span class="line">        section Last section</span><br><span class="line">        Describe gantt syntax               :after doc1, 3d</span><br><span class="line">        Add gantt diagram to demo page      : 20h</span><br><span class="line">        Add another diagram to demo page    : 48h</span><br></pre></td></tr></table></figure>
<p>参考链接：</p>
<p><a href="https://zhuanlan.zhihu.com/p/355997933">Mermaid从入门到入土——Markdown进阶语法 - 知乎 (zhihu.com)</a> </p>
<h2 id="收起菜单"><a href="#收起菜单" class="headerlink" title="收起菜单"></a>收起菜单</h2><p>这是原始样式</p>
<p><details>     <summary style="font-family:arial;color:#880000;font-size:20px;text-align:center;">每日时间安排</summary>  
    <ul style="font-family:arial;color:#CC99FF;font-size:20px;">
    <li>8：30 - 规划今天任务 - 9：00</li>
    <li>9：00 - 做瑜伽 - 9：30</li>
    <li>9：30 - 任务一 - 12：00</li>
    <li>2：30 - 任务二 - 17：00</li>
    <li>18：00 - 任务三 - 20：00</li>   
    <li>20：00 - 整理总结md - </li>
    </ul>
</details><br>但是总是不能正确识别结束位置</p>
<p>写博客的话，在 hexo 中有另一种方法，<a href="https://zennnnnnnnnnnn.js.cool/2022/library/frontend/【hexo】学习/">【hexo】学习 | Zen的小站 (js.cool)</a></p>
<h3 id="快捷方式"><a href="#快捷方式" class="headerlink" title="快捷方式"></a>快捷方式</h3><ul>
<li><code>ctrl + shift + m</code>打开公式编辑</li>
<li><code>ctrl + t</code>插入表格</li>
<li><code>ctrl + b</code>将当前句子用双*包围 | <code>ctrl + i</code>单包围</li>
<li><code>ctrl + n</code>新建md文件</li>
<li><code>ctrl + p</code>查询最近的md文件并打开</li>
</ul>
<h3 id="上下标高亮"><a href="#上下标高亮" class="headerlink" title="上下标高亮"></a>上下标高亮</h3><p><em>在偏好设置中有</em></p>
<ul>
<li><p>下标：H~2~O：<code>H~2~O</code></p>
</li>
<li><p>上标：x^2^：<code>x^2^</code></p>
</li>
<li><p>高亮：==key==：<code>==key==</code></p>
</li>
</ul>
<h2 id="表情符号"><a href="#表情符号" class="headerlink" title="表情符号"></a>表情符号</h2><p><a href="http://t.csdn.cn/m4jNq">查找文档非官方</a></p>
<h2 id="博客专用"><a href="#博客专用" class="headerlink" title="博客专用"></a>博客专用</h2><ul>
<li><p><code>&lt;!-- more --&gt;</code> 阅读全文按钮</p>
</li>
<li><p>编辑<code>tags:</code>和<code>top:</code>，保证文章便于查询</p>
</li>
<li><p><code>&lt;div align = center&gt;文本居中&lt;/div&gt;</code></p>
</li>
<li><blockquote>
<p>植物</p>
<blockquote>
<p>陆生植物</p>
</blockquote>
</blockquote>
</li>
<li><!-- 注释 -->
</li>
<li><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签引用</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
</li>
<li><span class="label primary">标签</span>
</li>
</ul>
<p>  更多详见 <a href="https://eisenhao.cn/2018/08/31/write-a-md-file/">基于 Hexo 的 Markdown 博文语法简介 | EisenHao’s Note</a> </p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>inte</tag>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title>【深度学习工具】onnx学习</title>
    <url>/2022/library/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0/%E5%B7%A5%E5%85%B7/%E3%80%90%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7%E3%80%91onnx%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">onnx的pytorch模型部署方法</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="torch模型转onnx"><a href="#torch模型转onnx" class="headerlink" title="torch模型转onnx"></a>torch模型转onnx</h2><p>在<code>model.eval()</code>和<code>output = modle(input)</code>后面添加一句话：</p>
<p><code>torch.onnx.export(model, input, &#39;modelname.onnx&#39;)</code>即可导出</p>
<ul>
<li>onnx支持的算子，可以在 <a href="https://github.com/onnx/onnx/blob/main/docs/Operators.md">算子文档</a> 中查看</li>
<li>如果不支持报错，怎么查看具体是哪个算子不支持呢？我也不知道。</li>
<li><a href="https://zhuanlan.zhihu.com/p/513387413">在 PyTorch 中支持更多 ONNX 算子</a> </li>
</ul>
<h2 id="onnx模型的使用"><a href="#onnx模型的使用" class="headerlink" title="onnx模型的使用"></a>onnx模型的使用</h2><p>​    不知。。</p>
<p>​    有空看看部署在安卓设备的方法。（我们新生项目小组已经做好了，用的是maui+onnx ）</p>
<p> <a href="https://blog.csdn.net/qq_40507857/article/details/118755061">(105条消息) 在Android设备部署PyTorch模型_紫芝的博客-CSDN博客_android pytorch</a> </p>
<p> <a href="https://blog.csdn.net/y_dd6011/article/details/104751029">(105条消息) 将Pytorch模型部署到Android端_YDDUONG的博客-CSDN博客_pytorch模型部署到安卓</a> </p>
<h4 id="maui"><a href="#maui" class="headerlink" title="maui"></a>maui</h4><h4 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h4><h2 id="onnx模型的优点"><a href="#onnx模型的优点" class="headerlink" title="onnx模型的优点"></a>onnx模型的优点</h2><p>不知。。</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>深度学习</tag>
        <tag>onnx</tag>
        <tag>深度学习工具</tag>
      </tags>
  </entry>
  <entry>
    <title>【matlab】学习</title>
    <url>/2022/library/%E8%AF%BE%E5%86%85%E7%9F%A5%E8%AF%86/%E3%80%90matlab%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note warning">
            <div align="center">matlab语句，随用随记</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<p> <a href="https://ww2.mathworks.cn/?s_tid=gn_logo">matlab官网</a> </p>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h4 id="cell"><a href="#cell" class="headerlink" title="cell"></a>cell</h4><ol>
<li><p>创建</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">% 有两种方式</span><br><span class="line">a=&#123;&#x27;winter&#x27;,123,&#x27;coming&#x27;,&#x27;哈哈&#x27;&#125;; </span><br><span class="line">a=cell(1,4);	a=&#123;&#x27;winter&#x27;,123,&#x27;coming&#x27;,&#x27;哈哈&#x27;&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&#123;1&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>相关函数</p>
<ol>
<li><code>cell2mat</code>：转化为数组，要求 cell 内变量数据类型相同</li>
<li><code>cellplot</code>：用彩图显示内容</li>
<li><code>cellfun</code>：<code>A = cellfun(func,C)</code> 将函数 <code>func</code> 应用于元胞数组 <code>C</code> 的每个元胞的内容</li>
</ol>
</li>
</ol>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h4 id="tf函数：创建传递函数"><a href="#tf函数：创建传递函数" class="headerlink" title="tf函数：创建传递函数"></a>tf函数：创建传递函数</h4><p>tf创建实值或复值传递函数模型，或转换动态系统模型传递函数形式。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>语法</th>
<th>用法</th>
</tr>
</thead>
<tbody>
<tr>
<td>sys = tf(numerator,denominator)</td>
<td>创建连续时间传递函数模型</td>
</tr>
<tr>
<td>sys = tf(numerator,denominator,ts)</td>
<td>创建离散时间传递函数模型</td>
</tr>
</tbody>
</table>
</div>
<p>例如$sys(s)=\frac1{2s^2+3s+4}$可以由下面的sys表示</p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">numerator = <span class="number">1</span>;</span><br><span class="line">denominator = [<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">sys = tf(numerator,denominator)</span><br></pre></td></tr></table></figure>
<p>绘制传递函数的波特图用<code>margin(sys);</code>一句话搞定</p>
<p>若想用该传递函数处理信号，可以用这个方法 <code>z变换 --&gt; 提取分子分母系数 --&gt; 数据类型转换 --&gt; 进行滤波</code></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">rc = tf(<span class="number">1</span>, [R*C,<span class="number">1</span>]);        <span class="comment">% 生成传递函数</span></span><br><span class="line"><span class="comment">% margin(rc);               % 显示传递函数波特图</span></span><br><span class="line">drc = c2d(rc, <span class="number">1</span>/Fs);        <span class="comment">% 进行z变换</span></span><br><span class="line">[a ,b] = tfdata(drc);       <span class="comment">% 得到分子分母系数</span></span><br><span class="line">a=cell2mat(a(<span class="number">1</span>,<span class="number">1</span>));         <span class="comment">% 数据类型转换</span></span><br><span class="line">b=cell2mat(b(<span class="number">1</span>,<span class="number">1</span>));</span><br><span class="line">x = filter(a, b, x);        <span class="comment">% 进行滤波</span></span><br></pre></td></tr></table></figure>
<h4 id="拟合"><a href="#拟合" class="headerlink" title="拟合"></a>拟合</h4><ol>
<li><code>p = polyfit(x, y, 2)</code>：输入两组数 x，y 拟合；2 表示用二次函数拟合；返回 p 是对应系数，如 p(1) 对应 x^2 的系数，p(2) 对应 x 的系数</li>
<li><code>yi = polyval(p,xi)</code>：输入拟合次方系数和输入数组，得到输出值</li>
</ol>
<h4 id="方程求解：solve-函数"><a href="#方程求解：solve-函数" class="headerlink" title="方程求解：solve 函数"></a>方程求解：solve 函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">syms i</span><br><span class="line">pi = 0.5*i^2 + 3*i + 1;</span><br><span class="line"></span><br><span class="line">s = solve(pi == 0.8602,i);</span><br></pre></td></tr></table></figure>
<p>得到方程的解</p>
<h2 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h2><h4 id="stem绘制离散信号"><a href="#stem绘制离散信号" class="headerlink" title="stem绘制离散信号"></a>stem绘制离散信号</h4><p><code>stem(y)</code>or<code>stem(x,y)</code></p>
<h4 id="square绘制方波信号"><a href="#square绘制方波信号" class="headerlink" title="square绘制方波信号"></a>square绘制方波信号</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">T=0:0.01:8*pi;</span><br><span class="line">y=square(T);</span><br></pre></td></tr></table></figure>
<h4 id="调整画面"><a href="#调整画面" class="headerlink" title="调整画面"></a>调整画面</h4><ul>
<li>title(‘文字’,’position’,[5,1], ‘Fontsize’,16 ) </li>
</ul>
<h2 id="3D动画"><a href="#3D动画" class="headerlink" title="3D动画"></a>3D动画</h2><figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">w = <span class="built_in">pi</span>;</span><br><span class="line">z=<span class="number">0</span>:<span class="number">0.01</span>:<span class="number">3</span>;</span><br><span class="line">pic_num=<span class="number">1</span>;                 </span><br><span class="line"><span class="keyword">for</span> t=<span class="number">0</span>:<span class="number">0.05</span>:<span class="number">5</span></span><br><span class="line">    Ex=<span class="built_in">sin</span>(<span class="number">2</span>*<span class="built_in">pi</span>*t-k*z)+<span class="number">2</span>;       <span class="comment">%螺旋线</span></span><br><span class="line">    Ey=<span class="built_in">cos</span>(<span class="number">2</span>*<span class="built_in">pi</span>*t-k*z)+<span class="number">2</span>; </span><br><span class="line">    Lx=Ex(<span class="number">1</span>):<span class="number">0.01</span>:<span class="number">4</span>;            <span class="comment">%直线辅助线</span></span><br><span class="line">    Ly=<span class="number">0</span>:<span class="number">0.01</span>:Ey(<span class="number">1</span>);</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">plot3</span>(z,Ex,Ey, z,Ex,Ey*<span class="number">0</span>, z,Ex*<span class="number">0</span>+<span class="number">4</span>,Ey, Lx*<span class="number">0</span>,Lx,Lx*<span class="number">0</span>+Ey(<span class="number">1</span>), Ly*<span class="number">0</span>,Ly*<span class="number">0</span>+Ex(<span class="number">1</span>),Ly);         <span class="comment">%画3维图</span></span><br><span class="line">    <span class="built_in">hold</span> on</span><br><span class="line">    </span><br><span class="line">    quiver3(<span class="number">0</span>,<span class="number">2</span>,<span class="number">2</span>,z(<span class="number">1</span>),Ex(<span class="number">1</span>)<span class="number">-2</span>,Ey(<span class="number">1</span>)<span class="number">-2</span>);    <span class="comment">%矢量箭头</span></span><br><span class="line">    axis([<span class="number">-1</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span> <span class="number">0</span> <span class="number">4</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">hold</span> off</span><br><span class="line">    F=getframe;            <span class="comment">%抓取当前图像</span></span><br><span class="line">    I=frame2im(F); </span><br><span class="line">    [I,map]=rgb2ind(I,<span class="number">256</span>);<span class="comment">%因gif不支持三维数据，所以应调用 rgb2ind，将rgb图像转为关联256种色彩的索引图像</span></span><br><span class="line">    <span class="keyword">if</span> t==<span class="number">0</span></span><br><span class="line">        imwrite(I,map,<span class="string">&#x27;复指数信号.gif&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>); <span class="comment">%创建一个.gif文件，将索引图像数组和其关联的颜色图写入</span></span><br><span class="line">    <span class="keyword">else</span>     </span><br><span class="line">        imwrite(I,map,<span class="string">&#x27;复指数信号.gif&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>,<span class="string">&#x27;WriteMode&#x27;</span>,<span class="string">&#x27;append&#x27;</span>,<span class="string">&#x27;DelayTime&#x27;</span>,<span class="number">0.01</span>);<span class="comment">%将多个图像并入第一个，帧间加入0.01s的延时</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    pic_num=pic_num+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<ul>
<li>绘制3D曲线：plot3函数<ul>
<li>可以依次写多组xyz，绘制多条曲线</li>
</ul>
</li>
<li><p>曲线的取0的维度，用正常维度的数组*0得到</p>
</li>
<li><p>保存gif语句</p>
</li>
</ul>
<p>完全参考： <a href="https://blog.csdn.net/qq_43208092/article/details/104080364">(105条消息) MATLAB：绘制三维偏振光动画_qq_43208092的博客-CSDN博客</a> </p>
<h2 id="音频处理"><a href="#音频处理" class="headerlink" title="音频处理"></a>音频处理</h2><ol>
<li><p>读取音频<strong>audioread</strong>，<strong>getaudiodata</strong></p>
<p><code>[y,Fs] = audioread(filename)</code></p>
<p><code>y = getaudiodata(recObj)</code></p>
</li>
<li><p>播放音频<strong>sound</strong>，<strong>getaudiodata</strong></p>
<p><code>sound(y,Fs)</code></p>
<p><code>play(recObj)</code></p>
</li>
<li><p>生成音频文件<strong>audiowrite</strong></p>
<p><code>audiowrite(filename,y,Fs)</code></p>
</li>
<li><p>录制音频<strong>audiorecorder</strong>，<strong>recordblocking</strong></p>
<figure class="highlight matlab"><table><tr><td class="code"><pre><span class="line">recObj = audiorecorder;		<span class="comment">% audiorecorder(Fs,16,1);</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;Start speaking.&#x27;</span>)		</span><br><span class="line">recordblocking(recObj, <span class="number">3</span>);	<span class="comment">%录制 3s 的数据</span></span><br><span class="line"><span class="built_in">disp</span>(<span class="string">&#x27;End of Recording.&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ol>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>多想多做，发篇一作</p>

            <i class="fa fa-quote-right"></i>
          </blockquote><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>matlab</tag>
        <tag>课内知识</tag>
      </tags>
  </entry>
  <entry>
    <title>【git】学习</title>
    <url>/2022/library/%E5%B5%8C%E5%85%A5%E5%BC%8F/%E3%80%90git%E3%80%91%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<div class="note success">
            <div align="center">git常用语法</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="常用语句"><a href="#常用语句" class="headerlink" title="常用语句"></a>常用语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 原封不动复制下来</span><br><span class="line">git clone https://github.com/zennnnnnnnnnnn/dqn.git</span><br><span class="line"></span><br><span class="line"># 新建</span><br><span class="line">git init</span><br><span class="line">git add .					# 有新文件需要add</span><br><span class="line">git commit -m &quot;上传说明&quot;	# 只有内容改动可以直接git commit -a</span><br><span class="line">git remote add origin https://github.com/zennnnnnnnnnnn/dqn.git</span><br><span class="line">git push -u origin main	# 首次上传需要-u origin [branch]，以后直接push</span><br><span class="line"></span><br><span class="line"># 中途参与: init -&gt; remote -&gt; git pull origin main</span><br><span class="line"># 强制覆盖：git push -f origin master</span><br><span class="line"></span><br><span class="line"># 其他</span><br><span class="line">git status	# 查看提交状态</span><br><span class="line">git rm	# 删除文件</span><br></pre></td></tr></table></figure>
<h2 id="高级语句"><a href="#高级语句" class="headerlink" title="高级语句"></a>高级语句</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 1. 查看历史版本 </span><br><span class="line"></span><br><span class="line">git log --oneline	# 简洁版本</span><br><span class="line">git reflog		# 查看包括撤回、删除在内的操作以及版本</span><br><span class="line">git reset --hard [HEAD]		# 回滚到指定版本</span><br></pre></td></tr></table></figure>
<ol>
<li>gitignore</li>
</ol>
<p>创建一个.gitignore文件，按照<a href="https://blog.csdn.net/ThinkWon/article/details/101447866写入不需要上传的文件。">https://blog.csdn.net/ThinkWon/article/details/101447866写入不需要上传的文件。</a></p>
<ol>
<li>分支</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git branch [name]	# 创建分支</span><br><span class="line">git checkout [name]	# 切换分支</span><br><span class="line"></span><br><span class="line">git branch			# 查看所有分支</span><br><span class="line"></span><br><span class="line">git checkout -b [name]	# 创建并切换到分支</span><br><span class="line">git branch -d [name]	# 删除分支</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 把目录添加到信任列表</span><br><span class="line">git config --global --add safe.directory /media/data/users/jhu3szh/serialize</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>library</tag>
        <tag>git</tag>
        <tag>理工方向</tag>
      </tags>
  </entry>
  <entry>
    <title>【hexo】博客部署</title>
    <url>/2022/library/frontend/%E3%80%90hexo%E3%80%91%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<div class="note primary">
            <div align="center">hexo补给站，内涵大量链接，萌新还是大佬统统进来看！</div>
          </div>
<!-- ,default,primary,success,info,warning,danger -->
<span id="more"></span>
<h2 id="hexo日常使用"><a href="#hexo日常使用" class="headerlink" title="hexo日常使用"></a>hexo日常使用</h2><ul>
<li><p>新建文章<code>hexo new articlename</code></p>
</li>
<li><p>编辑文章</p>
<ul>
<li><p><code>&lt;!-- more --&gt;</code> 阅读全文按钮</p>
</li>
<li><p>编辑<code>tags:</code>和<code>top:</code>，保证文章便于查询</p>
</li>
<li><p><code>&lt;div align = center&gt;文本居中&lt;/div&gt;</code></p>
</li>
<li><blockquote>
<p>植物</p>
<blockquote>
<p>陆生植物</p>
</blockquote>
</blockquote>
</li>
<li><!-- 注释 -->
</li>
<li><blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>标签引用</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>
</li>
<li><span class="label primary">标签</span>
</li>
</ul>
</li>
</ul>
<p>  更多详见 <a href="https://eisenhao.cn/2018/08/31/write-a-md-file/">基于 Hexo 的 Markdown 博文语法简介 | EisenHao’s Note</a> </p>
<ul>
<li>上传文章</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br><span class="line">hexo d	# 地址为https://zennnnnnnnnnnn.github.io。</span><br><span class="line"># 本地测试可以用hexo s，并在http://localhost:4000/上看到结果</span><br></pre></td></tr></table></figure>
<ul>
<li><p>统计评论</p>
<p>评论由 <a href="https://console.leancloud.cn/apps">LeanCloud</a> 管理，在 <a href="https://console.leancloud.cn/apps">LeanCloud</a> 查看。</p>
</li>
</ul>
<h2 id="从零开始hexo"><a href="#从零开始hexo" class="headerlink" title="从零开始hexo"></a>从零开始hexo</h2><h3 id="搭建hexo环境"><a href="#搭建hexo环境" class="headerlink" title="搭建hexo环境"></a>搭建hexo环境</h3><p> <a href="https://blog.csdn.net/sinat_37781304/article/details/82729029">(105条消息) hexo史上最全搭建教程_zjufangzh的博客-CSDN博客_hexo</a> </p>
<p> <a href="https://zhuanlan.zhihu.com/p/85037427">Hexo系列 | Hexo的基本使用 - 知乎 (zhihu.com)</a> </p>
<h4 id="文件夹说明"><a href="#文件夹说明" class="headerlink" title="文件夹说明"></a>文件夹说明</h4><ul>
<li><code>source</code><ul>
<li>hexo的<strong>文章</strong>位于<code>source/_posts</code>文件夹中，可以自己新建文件夹存放，没区别。</li>
<li>可通过<code>hexo new page name</code>新建<strong>tags、categories、about</strong>等文件，存放于此。</li>
</ul>
</li>
<li><code>_config.yml</code><strong>编辑</strong>文章标题等<strong>基础元素</strong>。</li>
<li><code>scaffolds</code>文件夹存放新建文章的<strong>模板</strong>。</li>
<li><code>themes</code>存放<strong>主题</strong>，一般留一个就行了。</li>
<li><code>public</code>：存放生成的<strong>页面</strong></li>
</ul>
<p>其余的都在<strong>主题文件夹</strong>中。</p>
<h3 id="更换hexo主题"><a href="#更换hexo主题" class="headerlink" title="更换hexo主题"></a>更换hexo主题</h3><p>一开始就找了一个好看的主题，结果发现功能不能自己开发，最后还是选择了比较常用的<strong>next</strong>主题。开发新主题——新的支线任务。</p>
<h3 id="next主题使用说明"><a href="#next主题使用说明" class="headerlink" title="next主题使用说明"></a>next主题使用说明</h3><p> <a href="https://blog.csdn.net/qq_34003239/article/details/100883213">(105条消息) Next主题美化_蜗牛非牛的博客-CSDN博客_next主题美化</a> </p>
<p>现在的主题包括：</p>
<p>​    菜单栏、搜索功能、网页图标、联系方式、文章结束标志、文章版权信息、访问统计（ <a href="https://blog.csdn.net/Awt_FuDongLai/article/details/107458310">(105条消息) hexo笔记十二：next主题统计网站与文章的浏览人数及次数_小镇攻城狮的博客-CSDN博客</a> ）、github绑带、修改块间距 （<a href="https://blog.csdn.net/mqdxiaoxiao/article/details/93797964">(105条消息) Hexo博客NexT主题下添加文章边框阴影效果_野猿新一的博客-CSDN博客</a> ）、添加圆角（ <a href="https://blog.csdn.net/Growing_potato/article/details/113926856?spm=1001.2101.3001.6661.1&amp;utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113926856-blog-93797964.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-113926856-blog-93797964.pc_relevant_default&amp;utm_relevant_index=1">(105条消息) next主题美化——背景图片、页面透明化、阴影、圆角、动画_Oath丶forever的博客-CSDN博客_next主题美化</a> ）、文章排序（ <a href="https://blog.csdn.net/nineya_com/article/details/103394315">(105条消息) hexo博客文章置顶功能实现的两种方法_玖涯的博客-CSDN博客_hexo置顶</a> ）</p>
<p>此外还有：</p>
<p>​    代码复制、修改背景颜色、修改字体</p>
<h4 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h4><p>修改typora的<strong>偏好设置</strong>，之后从网页复制图片会自动下载图片到对应文件夹。</p>
<p>我用的配置：</p>
<p><img src="https://s1.xptou.com/2023/01/18/63c816687b3f5.png" alt="1663507479006"></p>
<p> <a href="https://blog.csdn.net/xjm850552586/article/details/84101345">hexo引用本地图片无法显示</a> </p>
<p><strong>！！！⬆帮大忙了！感谢⬆！！！</strong></p>
<p><em>注意</em>还是要存放<strong>图片的文件夹名</strong>与 <strong>md文件名</strong> 一致才行</p>
<blockquote>
<p>最后的解决办法：</p>
<p>删除node_modules的hexo-asset-image文件夹，<code>npm install https://github.com/CodeFalling/hexo-asset-image --save</code>，设置配置文件<code>post_asset_folder: true</code>(最后一步很重要，我是看了public文件夹发现没有他，<code>hexo g</code>之后不会打包图片文件)</p>
<p>此外github不太稳定，有时很奇怪的只是打不开<code>.github.io</code>的项目</p>
<p>2022.12.17</p>
<p>改成用图床了，picgo + smms，图床设置如下</p>
</blockquote>
<p>（老版本 typora 没有这个选项）</p>
<p>选择 smms 一部分原因是，配置方便，只需要在官网注册账号，下面链接获取 token，填到 picgo 中就行了</p>
<p>smms 存储空间只有 5GB</p>
<p><a href="https://github.com/Molunerfinn/picgo/releases">Releases · Molunerfinn/PicGo (github.com)</a></p>
<p><a href="https://sm.ms/home/apitoken">API Access - SM.MS | Dashboard</a> 获取token</p>
<p><img src="https://s1.xptou.com/2023/01/19/63c90846c6dec.png" alt="image-20221217163306575"></p>
<ul>
<li><p>遇到的问题</p>
<ol>
<li><p>picgo本地导不进去</p>
<p><strong>参考新版本方法</strong><img src="https://s1.xptou.com/2023/01/19/63c9084c23299.png" alt="image-20221217163453870"></p>
</li>
<li><p>图片上传和显示速度都比较慢（偶尔有快了）</p>
<p>考虑不用smms</p>
</li>
</ol>
</li>
</ul>
<h4 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h4><ol>
<li><p>在<code>_post</code>文件夹中自己新建文件夹，每组文件夹添加<strong>模板文档</strong></p>
</li>
<li><p>网页端管理：</p>
<p>在线尝试：<a href="https://link.zhihu.com/?target=https%3A//link.yujianghao.cn/hexondemo">Hexon</a></p>
<p>网站和安装：<a href="https://link.zhihu.com/?target=https%3A//link.yujianghao.cn/hexongitee">gitee</a> | <a href="https://link.zhihu.com/?target=https%3A//link.yujianghao.cn/hexongithub">github</a></p>
<p> 进一步<strong>electron</strong>封装 </p>
</li>
</ol>
<h4 id="一键部署"><a href="#一键部署" class="headerlink" title="一键部署"></a>一键部署</h4> <span class="label primary">bat相关知识</span> 创建`.bat`文件，里面写入正常cmd命令，即可双击运行。

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd D:\MyData\hexoData\first\first</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>
<p>我还创建了一键上传和新建博客，放在存放 md 文件的文件夹中。</p>
<h4 id="隐藏部分文章"><a href="#隐藏部分文章" class="headerlink" title="隐藏部分文章"></a>隐藏部分文章</h4><p><code>npm install hexo-hide-posts --save</code>安装，并在站点<code>_config.yml</code>下添加如下配置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-hide-posts</span><br><span class="line">hide_posts:</span><br><span class="line"># 可以改成其他你喜欢的名字</span><br><span class="line">  filter: hidden</span><br><span class="line"># 指定你想要传递隐藏文章的位置，比如让所有隐藏文章在存档页面可见</span><br><span class="line"># 常见的位置有：index, tag, category, archive, sitemap, feed, etc.</span><br><span class="line"># 留空则默认全部隐藏</span><br><span class="line">  public_generators: []</span><br><span class="line"># 为隐藏的文章添加 noindex meta 标签，阻止搜索引擎收录</span><br><span class="line">  noindex: true</span><br></pre></td></tr></table></figure>
<h4 id="添加版本更新通知"><a href="#添加版本更新通知" class="headerlink" title="添加版本更新通知"></a>添加版本更新通知</h4><p><img src="/2022/library/frontend/%E3%80%90hexo%E3%80%91%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/1663655817135.png" alt="1663655817135" style="zoom:25%;"></p>
<p>真没想到成功了，以为寄了，有生之年！</p>
<p>​    <code>npm i hexo-offline-popup --save</code>安装后就有了。</p>
<p>​    他主要是一个提升访问速度的插件，只不过配置后好像不增反降，就索性关掉了配置。</p>
<h4 id="百度、谷歌收录"><a href="#百度、谷歌收录" class="headerlink" title="百度、谷歌收录"></a>百度、谷歌收录</h4><p>​    <strong>完全参考</strong> <a href="https://cjh0613.com/20200603HexoSubmitUrlsToSearchEngine#必应">hexo-submit-urls-to-search-engine 中文文档 | 峡州仙士之页 (cjh0613.com)</a> ，以后更新也得靠他！</p>
<p>​    谷歌的上传和搜索都需要翻墙，暂时没弄。</p>
<p>​     可以配合 <a href="https://blog.csdn.net/weixin_41800884/article/details/103750683">hexo搭建博客系列(六)百度，必应，谷歌收录</a> 食用，里面有些具体操作。</p>
<h4 id="github表"><a href="#github表" class="headerlink" title="github表"></a>github表</h4><p> <a href="https://blog.csdn.net/weixin_44580076/article/details/118737615">手把手教你在Hexo中使用Github贡献日历（以Next主题为例）</a> </p>
<h4 id="提升访问速度"><a href="#提升访问速度" class="headerlink" title="提升访问速度"></a>提升访问速度</h4><p>静态资源压缩常规做法用gulp，不过我尝试失败了，同时每次压缩还要输入额外的命令，个人不喜欢</p>
<ul>
<li><p>图片压缩：<code>hexo-neat</code></p>
<p>安装 <code>npm install hexo-neat --save</code></p>
<p>在配置文件中添加</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># hexo-neat</span><br><span class="line"># 博文压缩</span><br><span class="line">neat_enable: true</span><br><span class="line"># 压缩html</span><br><span class="line">neat_html:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line"># 压缩css  </span><br><span class="line">neat_css:</span><br><span class="line">  enable: true</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.css&#x27;</span><br><span class="line"># 压缩js</span><br><span class="line">neat_js:</span><br><span class="line">  enable: true</span><br><span class="line">  mangle: true</span><br><span class="line">  output:</span><br><span class="line">  compress:</span><br><span class="line">  exclude:</span><br><span class="line">    - &#x27;**/*.min.js&#x27;</span><br><span class="line">    - &#x27;**/jquery.fancybox.pack.js&#x27;</span><br><span class="line">    - &#x27;**/index.js&#x27;  </span><br></pre></td></tr></table></figure>
<p><a href="https://github.com/rozbo/hexo-neat">GitHub项目地址</a></p>
<p> <a href="https://blog.csdn.net/weixin_41287260/article/details/99687257">Hexo文件压缩：使用hexo-neat插件压缩页面静态资源</a> </p>
</li>
</ul>
<h4 id="完全新建界面"><a href="#完全新建界面" class="headerlink" title="完全新建界面"></a>完全新建界面</h4><ul>
<li><code>hexo n page mypage</code>创建界面</li>
<li>在新界面中新建<code>index.html</code>文件</li>
<li>在主题配置文档中添加<code>mypage: /mypage/ || fa fa-th</code></li>
</ul>
<h4 id="插入数学公式"><a href="#插入数学公式" class="headerlink" title="插入数学公式"></a>插入数学公式</h4><p> <a href="https://blog.csdn.net/weixin_45511189/article/details/115798563">(106条消息) hexo博客next主题添加对数学公式的支持_阳光洒在杨树上的博客-CSDN博客_hexo公式</a> </p>
<h4 id="代码自动折叠"><a href="#代码自动折叠" class="headerlink" title="代码自动折叠"></a>代码自动折叠</h4><p><a href="https://www.toimc.com/hexo-usage-2/#引用样式">hexo博客代码折叠功能 | Coding World (toimc.com)</a></p>
<p>其中有一步不同，就是找不到他说的 <code>themes/next/source/css/_common/components/index.styl</code> 文件</p>
<p>我对应找了一下，同目录下的 <code>components.styl</code> 有相似内容，对应修改这个文件就行了。</p>
<p>此外创建的 <code>highlight.styl</code> 要放在相同名字的文件夹中，格式与 <code>components.styl</code> 中其他 import 的相同</p>
<p>梦寐以求的样式！！</p>
<h4 id="内容折叠"><a href="#内容折叠" class="headerlink" title="内容折叠"></a>内容折叠</h4><p>用html语法写markdown的折叠很容易误判，导致只折叠一部分内容，其他内容乱识别</p>
<p>可以用这样的语句包裹内容，效果还凑合</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% spoiler &quot;隐藏内容的标题&quot; %&#125;</span><br><span class="line">markdown内容</span><br><span class="line">&#123;% endspoiler %&#125;</span><br></pre></td></tr></table></figure>
<p>需要先安装</p>
<p><code>npm install hexo-sliding-spoiler --save</code></p>
<p>修改样式在 <code>hexo\node_modules\hexo-sliding-spoiler\assetsspoiler.css</code></p>
<p>这里改提示符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">.spoiler.collapsed .spoiler-title:before &#123;</span><br><span class="line">    content: &quot;Show: &quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.spoiler.expanded .spoiler-title:before &#123;</span><br><span class="line">    content: &quot;Hide: &quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h2><ul>
<li><p>标题级别间差别不大</p>
<p><img src="/2022/library/frontend/%E3%80%90hexo%E3%80%91%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/1663226540949.png" alt="img" style="zoom:33%;"></p>
<ul>
<li>hexo + github 速度太慢！</li>
</ul>
</li>
</ul>
<h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ul>
<li>开<code>steam++加速器</code>会导致不能deploy</li>
</ul>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>library</tag>
        <tag>inte</tag>
      </tags>
  </entry>
  <entry>
    <title>Write-blog-using-markdown</title>
    <url>/2022/others/Write-blog-using-markdown/</url>
    <content><![CDATA[<p> this is my first try！</p>
<span id="more"></span> 
<p>qwerqwer</p>
<link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      <tags>
        <tag>like</tag>
      </tags>
  </entry>
</search>
